/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { __read } from "tslib";
import { Directive } from '@angular/core';
import { fromEvent, merge, ReplaySubject } from 'rxjs';
import { filter, map, mapTo, pairwise, startWith, take, takeUntil } from 'rxjs/operators';
import { _closest, _matches } from '@angular/cdk-experimental/popover-edit';
import { HEADER_CELL_SELECTOR, RESIZE_OVERLAY_SELECTOR } from './selectors';
var HOVER_OR_ACTIVE_CLASS = 'cdk-column-resize-hover-or-active';
var WITH_RESIZED_COLUMN_CLASS = 'cdk-column-resize-with-resized-column';
var nextId = 0;
/**
 * Base class for ColumnResize directives which attach to mat-table elements to
 * provide common events and services for column resizing.
 */
var ColumnResize = /** @class */ (function () {
    function ColumnResize() {
        this.destroyed = new ReplaySubject();
        /** Unique ID for this table instance. */
        this.selectorId = "" + ++nextId;
    }
    ColumnResize.prototype.ngAfterViewInit = function () {
        this.elementRef.nativeElement.classList.add(this.getUniqueCssClass());
        this._listenForRowHoverEvents();
        this._listenForResizeActivity();
        this._listenForHoverActivity();
    };
    ColumnResize.prototype.ngOnDestroy = function () {
        this.destroyed.next();
        this.destroyed.complete();
    };
    /** Gets the unique CSS class name for this table instance. */
    ColumnResize.prototype.getUniqueCssClass = function () {
        return "cdk-column-resize-" + this.selectorId;
    };
    /** Called when a column in the table is resized. Applies a css class to the table element. */
    ColumnResize.prototype.setResized = function () {
        this.elementRef.nativeElement.classList.add(WITH_RESIZED_COLUMN_CLASS);
    };
    ColumnResize.prototype._listenForRowHoverEvents = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            var element = _this.elementRef.nativeElement;
            fromEvent(element, 'mouseover').pipe(map(function (event) { return _closest(event.target, HEADER_CELL_SELECTOR); }), takeUntil(_this.destroyed)).subscribe(_this.eventDispatcher.headerCellHovered);
            fromEvent(element, 'mouseleave').pipe(filter(function (event) { return !!event.relatedTarget &&
                !_matches(event.relatedTarget, RESIZE_OVERLAY_SELECTOR); }), mapTo(null), takeUntil(_this.destroyed)).subscribe(_this.eventDispatcher.headerCellHovered);
        });
    };
    ColumnResize.prototype._listenForResizeActivity = function () {
        var _this = this;
        merge(this.eventDispatcher.overlayHandleActiveForCell.pipe(mapTo(undefined)), this.notifier.triggerResize.pipe(mapTo(undefined)), this.notifier.resizeCompleted.pipe(mapTo(undefined))).pipe(takeUntil(this.destroyed), take(1)).subscribe(function () {
            _this.setResized();
        });
    };
    ColumnResize.prototype._listenForHoverActivity = function () {
        this.eventDispatcher.headerRowHoveredOrActiveDistinct.pipe(startWith(null), pairwise(), takeUntil(this.destroyed)).subscribe(function (_a) {
            var _b = __read(_a, 2), previousRow = _b[0], hoveredRow = _b[1];
            if (hoveredRow) {
                hoveredRow.classList.add(HOVER_OR_ACTIVE_CLASS);
            }
            if (previousRow) {
                previousRow.classList.remove(HOVER_OR_ACTIVE_CLASS);
            }
        });
    };
    ColumnResize.decorators = [
        { type: Directive }
    ];
    return ColumnResize;
}());
export { ColumnResize };
//# sourceMappingURL=data:application/json;base64,