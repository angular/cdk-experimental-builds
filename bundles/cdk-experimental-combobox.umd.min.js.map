{"version":3,"sources":["src/cdk-experimental/cdk-experimental-combobox.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdkExperimental","combobox","core","cdk","overlay","portal","bidi","coercion","keycodes","rxjs","this","CdkCombobox","_elementRef","_overlay","_viewContainerRef","_directionality","_disabled","_openActions","_autoSetText","opened","EventEmitter","closed","panelValueChanged","contentId","Object","defineProperty","prototype","get","_panel","set","panel","enumerable","configurable","value","coerceBooleanProperty","action","_coerceOpenActionProperty","ngAfterContentInit","_a","_b","_c","_this","valueUpdated","subscribe","data","_setComboboxValue","close","contentIdUpdated","id","contentTypeUpdated","type","contentType","ngOnDestroy","complete","_keydown","event","keyCode","DOWN_ARROW","isOpen","focusContent","indexOf","open","ENTER","toggle","ESCAPE","preventDefault","TAB","_handleInteractions","interaction","_attemptClose","target","composedPath","Element","className","parentElement","hasPanel","disabled","next","_overlayRef","create","_getOverlayConfig","attach","_getPanelContent","_isTextTrigger","detach","hasAttached","_getTabIndex","valueChanged","emit","coerceArray","_setTextContent","content","contentArray","nativeElement","textContent","join","tagName","toLowerCase","OverlayConfig","positionStrategy","_getOverlayPositionStrategy","scrollStrategy","scrollStrategies","block","direction","position","flexibleConnectedTo","withPositions","_getOverlayPositions","originX","originY","overlayX","overlayY","hasPanelChanged","_templateRef","_panelContent","templateRef","TemplatePortal","input","trim","split","decorators","Directive","args","selector","exportAs","host","role","class","(click)","(focus)","(keydown)","(document:click)","[attr.aria-disabled]","[attr.aria-owns]","[attr.aria-haspopup]","[attr.aria-expanded]","[attr.tabindex]","ctorParameters","ElementRef","Overlay","ViewContainerRef","Directionality","Optional","propDecorators","Input","openActions","autoSetText","Output","CdkComboboxPanel","Subject","closePanel","document","getElementById","focus","_registerContent","Error","TemplateRef","PANEL","InjectionToken","nextId","CdkComboboxPopup","_parentPanel","_role","_firstFocusElement","ngOnInit","registerWithPanel","_explicitPanel","focusFirstElement","[attr.role]","[id]","tabindex","Inject","firstFocus","CdkComboboxModule","EXPORTED_DECLARATIONS","NgModule","imports","OverlayModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('rxjs')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk-experimental/combobox', ['exports', '@angular/core', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/keycodes', 'rxjs'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdkExperimental = global.ng.cdkExperimental || {}, global.ng.cdkExperimental.combobox = {}), global.ng.core, global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.keycodes, global.rxjs));\n}(this, (function (exports, core, overlay, portal, bidi, coercion, keycodes, rxjs) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var allowedOpenActions = ['focus', 'click', 'downKey', 'toggle'];\n    var CdkCombobox = /** @class */ (function () {\n        function CdkCombobox(_elementRef, _overlay, _viewContainerRef, _directionality) {\n            this._elementRef = _elementRef;\n            this._overlay = _overlay;\n            this._viewContainerRef = _viewContainerRef;\n            this._directionality = _directionality;\n            this._disabled = false;\n            this._openActions = ['click'];\n            this._autoSetText = true;\n            this.opened = new core.EventEmitter();\n            this.closed = new core.EventEmitter();\n            this.panelValueChanged = new core.EventEmitter();\n            this.contentId = '';\n        }\n        Object.defineProperty(CdkCombobox.prototype, \"panel\", {\n            get: function () { return this._panel; },\n            set: function (panel) { this._panel = panel; },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(CdkCombobox.prototype, \"disabled\", {\n            get: function () { return this._disabled; },\n            set: function (value) { this._disabled = coercion.coerceBooleanProperty(value); },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(CdkCombobox.prototype, \"openActions\", {\n            get: function () {\n                return this._openActions;\n            },\n            set: function (action) {\n                this._openActions = this._coerceOpenActionProperty(action);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(CdkCombobox.prototype, \"autoSetText\", {\n            /** Whether the textContent is automatically updated upon change of the combobox value. */\n            get: function () { return this._autoSetText; },\n            set: function (value) { this._autoSetText = coercion.coerceBooleanProperty(value); },\n            enumerable: false,\n            configurable: true\n        });\n        CdkCombobox.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            var _a, _b, _c;\n            (_a = this._panel) === null || _a === void 0 ? void 0 : _a.valueUpdated.subscribe(function (data) {\n                _this._setComboboxValue(data);\n                _this.close();\n            });\n            (_b = this._panel) === null || _b === void 0 ? void 0 : _b.contentIdUpdated.subscribe(function (id) {\n                _this.contentId = id;\n            });\n            (_c = this._panel) === null || _c === void 0 ? void 0 : _c.contentTypeUpdated.subscribe(function (type) {\n                _this.contentType = type;\n            });\n        };\n        CdkCombobox.prototype.ngOnDestroy = function () {\n            this.opened.complete();\n            this.closed.complete();\n            this.panelValueChanged.complete();\n        };\n        CdkCombobox.prototype._keydown = function (event) {\n            var _a;\n            var keyCode = event.keyCode;\n            if (keyCode === keycodes.DOWN_ARROW) {\n                if (this.isOpen()) {\n                    (_a = this._panel) === null || _a === void 0 ? void 0 : _a.focusContent();\n                }\n                else if (this._openActions.indexOf('downKey') !== -1) {\n                    this.open();\n                }\n            }\n            else if (keyCode === keycodes.ENTER) {\n                if (this._openActions.indexOf('toggle') !== -1) {\n                    this.toggle();\n                }\n                else if (this._openActions.indexOf('click') !== -1) {\n                    this.open();\n                }\n            }\n            else if (keyCode === keycodes.ESCAPE) {\n                event.preventDefault();\n                this.close();\n            }\n            else if (keyCode === keycodes.TAB) {\n                this.close();\n            }\n        };\n        /** Handles click or focus interactions. */\n        CdkCombobox.prototype._handleInteractions = function (interaction) {\n            if (interaction === 'click') {\n                if (this._openActions.indexOf('toggle') !== -1) {\n                    this.toggle();\n                }\n                else if (this._openActions.indexOf('click') !== -1) {\n                    this.open();\n                }\n            }\n            else if (interaction === 'focus') {\n                if (this._openActions.indexOf('focus') !== -1) {\n                    this.open();\n                }\n            }\n        };\n        /** Given a click in the document, determines if the click was inside a combobox. */\n        CdkCombobox.prototype._attemptClose = function (event) {\n            if (this.isOpen()) {\n                var target = event.composedPath ? event.composedPath()[0] : event.target;\n                while (target instanceof Element) {\n                    if (target.className.indexOf('cdk-combobox') !== -1) {\n                        return;\n                    }\n                    target = target.parentElement;\n                }\n            }\n            this.close();\n        };\n        /** Toggles the open state of the panel. */\n        CdkCombobox.prototype.toggle = function () {\n            if (this.hasPanel()) {\n                this.isOpen() ? this.close() : this.open();\n            }\n        };\n        /** If the combobox is closed and not disabled, opens the panel. */\n        CdkCombobox.prototype.open = function () {\n            var _a;\n            if (!this.isOpen() && !this.disabled) {\n                this.opened.next();\n                this._overlayRef = this._overlayRef || this._overlay.create(this._getOverlayConfig());\n                this._overlayRef.attach(this._getPanelContent());\n                if (!this._isTextTrigger()) {\n                    (_a = this._panel) === null || _a === void 0 ? void 0 : _a.focusContent();\n                }\n            }\n        };\n        /** If the combobox is open and not disabled, closes the panel. */\n        CdkCombobox.prototype.close = function () {\n            if (this.isOpen() && !this.disabled) {\n                this.closed.next();\n                this._overlayRef.detach();\n            }\n        };\n        /** Returns true if panel is currently opened. */\n        CdkCombobox.prototype.isOpen = function () {\n            return this._overlayRef ? this._overlayRef.hasAttached() : false;\n        };\n        /** Returns true if combobox has a child panel. */\n        CdkCombobox.prototype.hasPanel = function () {\n            return !!this.panel;\n        };\n        CdkCombobox.prototype._getTabIndex = function () {\n            return this.disabled ? null : '0';\n        };\n        CdkCombobox.prototype._setComboboxValue = function (value) {\n            var valueChanged = (this.value !== value);\n            this.value = value;\n            if (valueChanged) {\n                this.panelValueChanged.emit(coercion.coerceArray(value));\n                if (this._autoSetText) {\n                    this._setTextContent(value);\n                }\n            }\n        };\n        CdkCombobox.prototype._setTextContent = function (content) {\n            var contentArray = coercion.coerceArray(content);\n            this._elementRef.nativeElement.textContent = contentArray.join(' ');\n        };\n        CdkCombobox.prototype._isTextTrigger = function () {\n            // TODO: Should check if the trigger is contenteditable.\n            var tagName = this._elementRef.nativeElement.tagName.toLowerCase();\n            return tagName === 'input' || tagName === 'textarea' ? true : false;\n        };\n        CdkCombobox.prototype._getOverlayConfig = function () {\n            return new overlay.OverlayConfig({\n                positionStrategy: this._getOverlayPositionStrategy(),\n                scrollStrategy: this._overlay.scrollStrategies.block(),\n                direction: this._directionality,\n            });\n        };\n        CdkCombobox.prototype._getOverlayPositionStrategy = function () {\n            return this._overlay\n                .position()\n                .flexibleConnectedTo(this._elementRef)\n                .withPositions(this._getOverlayPositions());\n        };\n        CdkCombobox.prototype._getOverlayPositions = function () {\n            return [\n                { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n                { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n                { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n                { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n            ];\n        };\n        CdkCombobox.prototype._getPanelContent = function () {\n            var _a, _b;\n            var hasPanelChanged = ((_a = this._panel) === null || _a === void 0 ? void 0 : _a._templateRef) !== ((_b = this._panelContent) === null || _b === void 0 ? void 0 : _b.templateRef);\n            if (this._panel && (!this._panel || hasPanelChanged)) {\n                this._panelContent = new portal.TemplatePortal(this._panel._templateRef, this._viewContainerRef);\n            }\n            return this._panelContent;\n        };\n        CdkCombobox.prototype._coerceOpenActionProperty = function (input) {\n            var actions = typeof input === 'string' ? input.trim().split(/[ ,]+/) : input;\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                actions.some(function (a) { return allowedOpenActions.indexOf(a) === -1; })) {\n                throw Error(input + \" is not a support open action for CdkCombobox\");\n            }\n            return actions;\n        };\n        return CdkCombobox;\n    }());\n    CdkCombobox.decorators = [\n        { type: core.Directive, args: [{\n                    selector: '[cdkCombobox]',\n                    exportAs: 'cdkCombobox',\n                    host: {\n                        'role': 'combobox',\n                        'class': 'cdk-combobox',\n                        '(click)': '_handleInteractions(\"click\")',\n                        '(focus)': '_handleInteractions(\"focus\")',\n                        '(keydown)': '_keydown($event)',\n                        '(document:click)': '_attemptClose($event)',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.aria-owns]': 'contentId',\n                        '[attr.aria-haspopup]': 'contentType',\n                        '[attr.aria-expanded]': 'isOpen()',\n                        '[attr.tabindex]': '_getTabIndex()'\n                    }\n                },] }\n    ];\n    CdkCombobox.ctorParameters = function () { return [\n        { type: core.ElementRef },\n        { type: overlay.Overlay },\n        { type: core.ViewContainerRef },\n        { type: bidi.Directionality, decorators: [{ type: core.Optional }] }\n    ]; };\n    CdkCombobox.propDecorators = {\n        panel: [{ type: core.Input, args: ['cdkComboboxTriggerFor',] }],\n        value: [{ type: core.Input }],\n        disabled: [{ type: core.Input }],\n        openActions: [{ type: core.Input }],\n        autoSetText: [{ type: core.Input }],\n        opened: [{ type: core.Output, args: ['comboboxPanelOpened',] }],\n        closed: [{ type: core.Output, args: ['comboboxPanelClosed',] }],\n        panelValueChanged: [{ type: core.Output, args: ['panelValueChanged',] }]\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CdkComboboxPanel = /** @class */ (function () {\n        function CdkComboboxPanel(_templateRef) {\n            this._templateRef = _templateRef;\n            this.valueUpdated = new rxjs.Subject();\n            this.contentIdUpdated = new rxjs.Subject();\n            this.contentTypeUpdated = new rxjs.Subject();\n            this.contentId = '';\n        }\n        /** Tells the parent combobox to close the panel and sends back the content value. */\n        CdkComboboxPanel.prototype.closePanel = function (data) {\n            this.valueUpdated.next(data);\n        };\n        // TODO: instead of using a focus function, potentially use cdk/a11y focus trapping\n        CdkComboboxPanel.prototype.focusContent = function () {\n            var _a;\n            // TODO: Use an injected document here\n            (_a = document.getElementById(this.contentId)) === null || _a === void 0 ? void 0 : _a.focus();\n        };\n        /** Registers the content's id and the content type with the panel. */\n        CdkComboboxPanel.prototype._registerContent = function (contentId, contentType) {\n            // If content has already been registered, no further contentIds are registered.\n            if (this.contentType && this.contentType !== contentType) {\n                return;\n            }\n            this.contentId = contentId;\n            if (contentType !== 'listbox' && contentType !== 'dialog') {\n                throw Error('CdkComboboxPanel currently only supports listbox or dialog content.');\n            }\n            this.contentType = contentType;\n            this.contentIdUpdated.next(this.contentId);\n            this.contentTypeUpdated.next(this.contentType);\n        };\n        return CdkComboboxPanel;\n    }());\n    CdkComboboxPanel.decorators = [\n        { type: core.Directive, args: [{\n                    host: {\n                        'class': 'cdk-combobox-panel'\n                    },\n                    selector: 'ng-template[cdkComboboxPanel]',\n                    exportAs: 'cdkComboboxPanel',\n                },] }\n    ];\n    CdkComboboxPanel.ctorParameters = function () { return [\n        { type: core.TemplateRef }\n    ]; };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var PANEL = new core.InjectionToken('CdkComboboxPanel');\n    var nextId = 0;\n    var CdkComboboxPopup = /** @class */ (function () {\n        function CdkComboboxPopup(_elementRef, _parentPanel) {\n            this._elementRef = _elementRef;\n            this._parentPanel = _parentPanel;\n            this._role = 'dialog';\n            this.id = \"cdk-combobox-popup-\" + nextId++;\n        }\n        Object.defineProperty(CdkComboboxPopup.prototype, \"role\", {\n            get: function () {\n                return this._role;\n            },\n            set: function (value) {\n                this._role = value;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(CdkComboboxPopup.prototype, \"firstFocus\", {\n            get: function () {\n                return this._firstFocusElement;\n            },\n            set: function (id) {\n                this._firstFocusElement = id;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        CdkComboboxPopup.prototype.ngOnInit = function () {\n            this.registerWithPanel();\n        };\n        CdkComboboxPopup.prototype.registerWithPanel = function () {\n            if (this._parentPanel === null || this._parentPanel === undefined) {\n                this._explicitPanel._registerContent(this.id, this._role);\n            }\n            else {\n                this._parentPanel._registerContent(this.id, this._role);\n            }\n        };\n        CdkComboboxPopup.prototype.focusFirstElement = function () {\n            if (this._firstFocusElement) {\n                this._firstFocusElement.focus();\n            }\n            else {\n                this._elementRef.nativeElement.focus();\n            }\n        };\n        return CdkComboboxPopup;\n    }());\n    CdkComboboxPopup.decorators = [\n        { type: core.Directive, args: [{\n                    selector: '[cdkComboboxPopup]',\n                    exportAs: 'cdkComboboxPopup',\n                    host: {\n                        'class': 'cdk-combobox-popup',\n                        '[attr.role]': 'role',\n                        '[id]': 'id',\n                        'tabindex': '-1',\n                        '(focus)': 'focusFirstElement()'\n                    }\n                },] }\n    ];\n    CdkComboboxPopup.ctorParameters = function () { return [\n        { type: core.ElementRef },\n        { type: CdkComboboxPanel, decorators: [{ type: core.Optional }, { type: core.Inject, args: [PANEL,] }] }\n    ]; };\n    CdkComboboxPopup.propDecorators = {\n        role: [{ type: core.Input }],\n        firstFocus: [{ type: core.Input }],\n        id: [{ type: core.Input }],\n        _explicitPanel: [{ type: core.Input, args: ['parentPanel',] }]\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EXPORTED_DECLARATIONS = [CdkCombobox, CdkComboboxPanel, CdkComboboxPopup];\n    var CdkComboboxModule = /** @class */ (function () {\n        function CdkComboboxModule() {\n        }\n        return CdkComboboxModule;\n    }());\n    CdkComboboxModule.decorators = [\n        { type: core.NgModule, args: [{\n                    imports: [overlay.OverlayModule],\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                },] }\n    ];\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CdkCombobox = CdkCombobox;\n    exports.CdkComboboxModule = CdkComboboxModule;\n    exports.CdkComboboxPanel = CdkComboboxPanel;\n    exports.CdkComboboxPopup = CdkComboboxPopup;\n    exports.PANEL = PANEL;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-experimental-combobox.umd.js.map\n"]}