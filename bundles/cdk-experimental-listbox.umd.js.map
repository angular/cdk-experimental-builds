{"version":3,"file":"cdk-experimental-listbox.umd.js","sources":["../../../../../../src/cdk-experimental/listbox/listbox.ts","../../../../../../src/cdk-experimental/listbox/listbox-module.ts","../../../../../../src/cdk-experimental/listbox/public-api.ts","../../../../../../src/cdk-experimental/listbox/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ContentChildren,\n  Directive,\n  EventEmitter, forwardRef, Inject,\n  Input, Output,\n  QueryList\n} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\nlet nextId = 0;\n\n/**\n * Directive that applies interaction patterns to an element following the aria role of option.\n * Typically meant to be placed inside a listbox. Logic handling selection, disabled state, and\n * value is built in.\n */\n@Directive({\n  selector: '[cdkOption]',\n  exportAs: 'cdkOption',\n  host: {\n    role: 'option',\n    '(click)': 'toggle()',\n    '[attr.aria-selected]': 'selected || null',\n    '[id]': 'id',\n  }\n})\nexport class CdkOption {\n  private _selected: boolean = false;\n\n  /** Whether the option is selected or not */\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n  }\n\n  /** The id of the option, set to a uniqueid if the user does not provide one */\n  @Input() id = `cdk-option-${nextId++}`;\n\n  constructor(@Inject(forwardRef(() => CdkListbox)) public listbox: CdkListbox) {}\n\n  /** Toggles the selected state, emits a change event through the injected listbox */\n  toggle() {\n    this.selected = !this.selected;\n    this.listbox._emitChangeEvent(this);\n  }\n\n  static ngAcceptInputType_selected: BooleanInput;\n}\n\n/**\n * Directive that applies interaction patterns to an element following the aria role of listbox.\n * Typically CdkOption elements are placed inside the listbox. Logic to handle keyboard navigation,\n * selection of options, active options, and disabled states is built in.\n */\n@Directive({\n  selector: '[cdkListbox]',\n  exportAs: 'cdkListbox',\n  host: {\n    role: 'listbox',\n  }\n})\nexport class CdkListbox {\n\n  /** A query list containing all CdkOption elements within this listbox */\n  @ContentChildren(CdkOption, {descendants: true}) _options: QueryList<CdkOption>;\n\n  @Output() readonly selectionChange: EventEmitter<ListboxSelectionChangeEvent> =\n      new EventEmitter<ListboxSelectionChangeEvent>();\n\n  /** Emits a selection change event, called when an option has its selected state changed */\n  _emitChangeEvent(option: CdkOption) {\n    this.selectionChange.emit(new ListboxSelectionChangeEvent(this, option));\n  }\n\n  /** Sets the given option's selected state to true */\n  select(option: CdkOption) {\n    option.selected = true;\n  }\n\n  /** Sets the given option's selected state to null. Null is preferable for screen readers */\n  deselect(option: CdkOption) {\n    option.selected = false;\n  }\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class ListboxSelectionChangeEvent {\n  constructor(\n    /** Reference to the listbox that emitted the event. */\n    public source: CdkListbox,\n    /** Reference to the option that has been changed. */\n    public option: CdkOption) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkListbox, CdkOption} from './listbox';\n\nconst EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class CdkListboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './listbox';\nexport * from './listbox-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["coerceBooleanProperty","Directive","Inject","forwardRef","Input","EventEmitter","ContentChildren","Output","NgModule"],"mappings":";;;;;;IAAA;;;;;;;AAQA,IASA,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf;;;;;AAKA;QAyBE,mBAAyD,OAAmB;YAAnB,YAAO,GAAP,OAAO,CAAY;YAdpE,cAAS,GAAY,KAAK,CAAC;;YAY1B,OAAE,GAAG,gBAAc,MAAM,EAAI,CAAC;SAEyC;QAXhF,sBACI,+BAAQ;;iBADZ;gBAEE,OAAO,IAAI,CAAC,SAAS,CAAC;aACvB;iBACD,UAAa,KAAc;gBACzB,IAAI,CAAC,SAAS,GAAGA,8BAAqB,CAAC,KAAK,CAAC,CAAC;aAC/C;;;WAHA;;QAWD,0BAAM,GAAN;YACE,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC/B,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SACrC;;oBA/BFC,cAAS,SAAC;wBACT,QAAQ,EAAE,aAAa;wBACvB,QAAQ,EAAE,WAAW;wBACrB,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,SAAS,EAAE,UAAU;4BACrB,sBAAsB,EAAE,kBAAkB;4BAC1C,MAAM,EAAE,IAAI;yBACb;qBACF;;;oBAgBmE,UAAU,uBAA/DC,WAAM,SAACC,eAAU,CAAC,cAAM,OAAA,UAAU,GAAA,CAAC;;;+BAX/CC,UAAK;yBASLA,UAAK;;QAWR,gBAAC;KAlCD,IAkCC;IAED;;;;;AAKA;QAAA;YAYqB,oBAAe,GAC9B,IAAIC,iBAAY,EAA+B,CAAC;SAgBrD;;QAbC,qCAAgB,GAAhB,UAAiB,MAAiB;YAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,2BAA2B,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;SAC1E;;QAGD,2BAAM,GAAN,UAAO,MAAiB;YACtB,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;SACxB;;QAGD,6BAAQ,GAAR,UAAS,MAAiB;YACxB,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;SACzB;;oBA5BFJ,cAAS,SAAC;wBACT,QAAQ,EAAE,cAAc;wBACxB,QAAQ,EAAE,YAAY;wBACtB,IAAI,EAAE;4BACJ,IAAI,EAAE,SAAS;yBAChB;qBACF;;;+BAIEK,oBAAe,SAAC,SAAS,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC;sCAE9CC,WAAM;;QAiBT,iBAAC;KA7BD,IA6BC;IAED;AACA;QACE;;QAES,MAAkB;;QAElB,MAAiB;YAFjB,WAAM,GAAN,MAAM,CAAY;YAElB,WAAM,GAAN,MAAM,CAAW;SAAI;QAChC,kCAAC;IAAD,CAAC;;ICvGD;;;;;;;AAQA,IAGA,IAAM,qBAAqB,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AACtD;QAAA;SAIgC;;oBAJ/BC,aAAQ,SAAC;wBACR,OAAO,EAAE,qBAAqB;wBAC9B,YAAY,EAAE,qBAAqB;qBACpC;;QAC8B,uBAAC;KAJhC;;ICZA;;;;;;OAMG;;ICNH;;OAEG;;;;;;;;;;;;;;;"}