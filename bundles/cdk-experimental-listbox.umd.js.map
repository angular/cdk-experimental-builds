{"version":3,"file":"cdk-experimental-listbox.umd.js","sources":["../../../../../../src/cdk-experimental/listbox/listbox.ts","../../../../../../src/cdk-experimental/listbox/listbox-module.ts","../../../../../../src/cdk-experimental/listbox/public-api.ts","../../../../../../src/cdk-experimental/listbox/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef, EventEmitter, forwardRef,\n  Inject,\n  Input, OnDestroy, Output,\n  QueryList\n} from '@angular/core';\nimport {ActiveDescendantKeyManager, Highlightable, ListKeyManagerOption} from '@angular/cdk/a11y';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\nlet nextId = 0;\n\n@Directive({\n  selector: '[cdkOption]',\n  exportAs: 'cdkOption',\n  host: {\n    'role': 'option',\n    '(click)': 'toggle()',\n    '(focus)': 'activate()',\n    '(blur)': 'deactivate()',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_selected || null',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': '_isInteractionDisabled()',\n    '[class.cdk-option-disabled]': '_isInteractionDisabled()',\n    '[class.cdk-option-active]': '_active'\n\n  }\n})\nexport class CdkOption implements ListKeyManagerOption, Highlightable {\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n  _active: boolean = false;\n\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    if (!this._disabled) {\n      this._selected = coerceBooleanProperty(value);\n    }\n  }\n\n  /** The id of the option, set to a uniqueid if the user does not provide one. */\n  @Input() id = `cdk-option-${nextId++}`;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Inject(forwardRef(() => CdkListbox)) public listbox: CdkListbox) {\n  }\n\n  /** Toggles the selected state, emits a change event through the injected listbox. */\n  toggle() {\n    if (!this._isInteractionDisabled()) {\n      this.selected = !this.selected;\n      this.listbox._emitChangeEvent(this);\n    }\n  }\n\n  /** Sets the active property true if the option and listbox aren't disabled. */\n  activate() {\n    if (!this._isInteractionDisabled()) {\n      this._active = true;\n      this.listbox.setActiveOption(this);\n    }\n  }\n\n  /** Sets the active property false. */\n  deactivate() {\n    this._active = false;\n  }\n\n  /** Returns true if the option or listbox are disabled, and false otherwise. */\n  _isInteractionDisabled(): boolean {\n    return (this.listbox.disabled || this._disabled);\n  }\n\n  /** Returns the tab index which depends on the disabled property. */\n  _getTabIndex(): string | null {\n    return (this.listbox.disabled || this._disabled) ? null : '-1';\n  }\n\n  getLabel(): string {\n    // TODO: improve to method to handle more complex combinations of elements and text\n    return this._elementRef.nativeElement.textContent;\n  }\n\n  setActiveStyles() {\n    this._active = true;\n  }\n\n  setInactiveStyles() {\n    this._active = false;\n  }\n\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Directive({\n    selector: '[cdkListbox]',\n    exportAs: 'cdkListbox',\n    host: {\n      'role': 'listbox',\n      '(keydown)': '_keydown($event)',\n      '[attr.aria-disabled]': '_disabled',\n    }\n})\nexport class CdkListbox implements AfterContentInit, OnDestroy {\n\n  _listKeyManager: ActiveDescendantKeyManager<CdkOption>;\n  private _disabled: boolean = false;\n\n  @ContentChildren(CdkOption, {descendants: true}) _options: QueryList<CdkOption>;\n\n  @Output() readonly selectionChange: EventEmitter<ListboxSelectionChangeEvent> =\n      new EventEmitter<ListboxSelectionChangeEvent>();\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  ngAfterContentInit() {\n    this._listKeyManager = new ActiveDescendantKeyManager(this._options)\n      .withWrap().withVerticalOrientation().withTypeAhead();\n  }\n\n  ngOnDestroy() {\n    this._listKeyManager.change.complete();\n  }\n\n  _keydown(event: KeyboardEvent) {\n    if (this._disabled) {\n      return;\n    }\n\n    const manager = this._listKeyManager;\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n\n    } else if (keyCode === SPACE || keyCode === ENTER) {\n      if (manager.activeItem && !manager.isTyping()) {\n        this._toggleActiveOption();\n      }\n\n    } else {\n      manager.onKeydown(event);\n    }\n\n  }\n\n  /** Emits a selection change event, called when an option has its selected state changed. */\n  _emitChangeEvent(option: CdkOption) {\n    this.selectionChange.emit(new ListboxSelectionChangeEvent(this, option));\n  }\n\n  private _toggleActiveOption() {\n    const activeOption = this._listKeyManager.activeItem;\n    if (activeOption && !activeOption.disabled) {\n      activeOption.toggle();\n      this._emitChangeEvent(activeOption);\n    }\n  }\n\n  /** Selects the given option if the option and listbox aren't disabled. */\n  select(option: CdkOption) {\n    if (!this.disabled && !option.disabled) {\n      option.selected = true;\n    }\n  }\n\n  /** Deselects the given option if the option and listbox aren't disabled. */\n  deselect(option: CdkOption) {\n    if (!this.disabled && !option.disabled) {\n      option.selected = false;\n    }\n  }\n\n  /** Updates the key manager's active item to the given option. */\n  setActiveOption(option: CdkOption) {\n    this._listKeyManager.updateActiveItem(option);\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class ListboxSelectionChangeEvent {\n  constructor(\n      /** Reference to the listbox that emitted the event. */\n      public source: CdkListbox,\n      /** Reference to the option that has been changed. */\n      public option: CdkOption) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkListbox, CdkOption} from './listbox';\n\nconst EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class CdkListboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './listbox';\nexport * from './listbox-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["coerceBooleanProperty","Directive","ElementRef","Inject","forwardRef","Input","EventEmitter","ActiveDescendantKeyManager","HOME","END","SPACE","ENTER","ContentChildren","Output","NgModule"],"mappings":"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"}