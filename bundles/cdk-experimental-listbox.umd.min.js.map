{"version":3,"sources":["src/cdk-experimental/cdk-experimental-listbox.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdkExperimental","listbox","core","cdk","coercion","this","nextId","CdkOption","_selected","id","Object","defineProperty","prototype","get","set","value","coerceBooleanProperty","enumerable","configurable","toggle","selected","_emitChangeEvent","decorators","type","Directive","args","selector","exportAs","host","role","(click)","[attr.aria-selected]","[id]","ctorParameters","CdkListbox","Inject","forwardRef","propDecorators","Input","selectionChange","EventEmitter","option","emit","ListboxSelectionChangeEvent","select","deselect","_options","ContentChildren","descendants","Output","source","EXPORTED_DECLARATIONS","CdkListboxModule","NgModule","declarations"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,0BAChG,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,oCAAqC,CAAC,UAAW,gBAAiB,yBAA0BJ,GACtHA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,gBAAkBT,EAAOQ,GAAGC,iBAAmB,GAAIT,EAAOQ,GAAGC,gBAAgBC,QAAU,IAAKV,EAAOQ,GAAGG,KAAMX,EAAOQ,GAAGI,IAAIC,UAHxM,CAIEC,MAAM,SAAWZ,EAASS,EAAME,GAAY;;;;;;;OAS1C,IAAIE,EAAS,EAMTC,EAA2B,WAC3B,SAASA,EAAUN,GACfI,KAAKJ,QAAUA,EACfI,KAAKG,WAAY,EAEjBH,KAAKI,GAAK,cAAgBH,IAqC9B,OAnCAI,OAAOC,eAAeJ,EAAUK,UAAW,WAAY,CAEnDC,IAAK,WACD,OAAOR,KAAKG,WAEhBM,IAAK,SAAUC,GACXV,KAAKG,UAAYJ,EAASY,sBAAsBD,IAEpDE,YAAY,EACZC,cAAc,IAGlBX,EAAUK,UAAUO,OAAS,WACzBd,KAAKe,UAAYf,KAAKe,SACtBf,KAAKJ,QAAQoB,iBAAiBhB,OAElCE,EAAUe,WAAa,CACnB,CAAEC,KAAMrB,EAAKsB,UAAWC,KAAM,CAAC,CACnBC,SAAU,cACVC,SAAU,YACVC,KAAM,CACFC,KAAM,SACNC,UAAW,WACXC,uBAAwB,mBACxBC,OAAQ,UAI5BzB,EAAU0B,eAAiB,WAAc,MAAO,CAC5C,CAAEV,KAAMW,EAAYZ,WAAY,CAAC,CAAEC,KAAMrB,EAAKiC,OAAQV,KAAM,CAACvB,EAAKkC,YAAW,WAAc,OAAOF,WAEtG3B,EAAU8B,eAAiB,CACvBjB,SAAU,CAAC,CAAEG,KAAMrB,EAAKoC,QACxB7B,GAAI,CAAC,CAAEc,KAAMrB,EAAKoC,SAEf/B,EA1CmB,GAiD1B2B,EAA4B,WAC5B,SAASA,IACL7B,KAAKkC,gBAAkB,IAAIrC,EAAKsC,aA2BpC,OAxBAN,EAAWtB,UAAUS,iBAAmB,SAAUoB,GAC9CpC,KAAKkC,gBAAgBG,KAAK,IAAIC,EAA4BtC,KAAMoC,KAGpEP,EAAWtB,UAAUgC,OAAS,SAAUH,GACpCA,EAAOrB,UAAW,GAGtBc,EAAWtB,UAAUiC,SAAW,SAAUJ,GACtCA,EAAOrB,UAAW,GAEtBc,EAAWZ,WAAa,CACpB,CAAEC,KAAMrB,EAAKsB,UAAWC,KAAM,CAAC,CACnBC,SAAU,eACVC,SAAU,aACVC,KAAM,CACFC,KAAM,eAI1BK,EAAWG,eAAiB,CACxBS,SAAU,CAAC,CAAEvB,KAAMrB,EAAK6C,gBAAiBtB,KAAM,CAAClB,EAAW,CAAEyC,aAAa,MAC1ET,gBAAiB,CAAC,CAAEhB,KAAMrB,EAAK+C,UAE5Bf,EA7BoB,GAgC3BS,EACA,SAASA,EAETO,EAEAT,GACIpC,KAAK6C,OAASA,EACd7C,KAAKoC,OAASA,GAYlBU,EAAwB,CAACjB,EAAY3B,GACrC6C,EAAkC,WAClC,SAASA,KAQT,OANAA,EAAiB9B,WAAa,CAC1B,CAAEC,KAAMrB,EAAKmD,SAAU5B,KAAM,CAAC,CAClBhC,QAAS0D,EACTG,aAAcH,MAGvBC,EAT0B;;;;;;;;AAwBrC3D,EAAQyC,WAAaA,EACrBzC,EAAQ2D,iBAAmBA,EAC3B3D,EAAQc,UAAYA,EACpBd,EAAQkD,4BAA8BA,EAEtCjC,OAAOC,eAAelB,EAAS,aAAc,CAAEsB,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/coercion')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk-experimental/listbox', ['exports', '@angular/core', '@angular/cdk/coercion'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdkExperimental = global.ng.cdkExperimental || {}, global.ng.cdkExperimental.listbox = {}), global.ng.core, global.ng.cdk.coercion));\n}(this, (function (exports, core, coercion) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var nextId = 0;\n    /**\n     * Directive that applies interaction patterns to an element following the aria role of option.\n     * Typically meant to be placed inside a listbox. Logic handling selection, disabled state, and\n     * value is built in.\n     */\n    var CdkOption = /** @class */ (function () {\n        function CdkOption(listbox) {\n            this.listbox = listbox;\n            this._selected = false;\n            /** The id of the option, set to a uniqueid if the user does not provide one */\n            this.id = \"cdk-option-\" + nextId++;\n        }\n        Object.defineProperty(CdkOption.prototype, \"selected\", {\n            /** Whether the option is selected or not */\n            get: function () {\n                return this._selected;\n            },\n            set: function (value) {\n                this._selected = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /** Toggles the selected state, emits a change event through the injected listbox */\n        CdkOption.prototype.toggle = function () {\n            this.selected = !this.selected;\n            this.listbox._emitChangeEvent(this);\n        };\n        CdkOption.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkOption]',\n                        exportAs: 'cdkOption',\n                        host: {\n                            role: 'option',\n                            '(click)': 'toggle()',\n                            '[attr.aria-selected]': 'selected || null',\n                            '[id]': 'id',\n                        }\n                    },] }\n        ];\n        CdkOption.ctorParameters = function () { return [\n            { type: CdkListbox, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return CdkListbox; }),] }] }\n        ]; };\n        CdkOption.propDecorators = {\n            selected: [{ type: core.Input }],\n            id: [{ type: core.Input }]\n        };\n        return CdkOption;\n    }());\n    /**\n     * Directive that applies interaction patterns to an element following the aria role of listbox.\n     * Typically CdkOption elements are placed inside the listbox. Logic to handle keyboard navigation,\n     * selection of options, active options, and disabled states is built in.\n     */\n    var CdkListbox = /** @class */ (function () {\n        function CdkListbox() {\n            this.selectionChange = new core.EventEmitter();\n        }\n        /** Emits a selection change event, called when an option has its selected state changed */\n        CdkListbox.prototype._emitChangeEvent = function (option) {\n            this.selectionChange.emit(new ListboxSelectionChangeEvent(this, option));\n        };\n        /** Sets the given option's selected state to true */\n        CdkListbox.prototype.select = function (option) {\n            option.selected = true;\n        };\n        /** Sets the given option's selected state to null. Null is preferable for screen readers */\n        CdkListbox.prototype.deselect = function (option) {\n            option.selected = false;\n        };\n        CdkListbox.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkListbox]',\n                        exportAs: 'cdkListbox',\n                        host: {\n                            role: 'listbox',\n                        }\n                    },] }\n        ];\n        CdkListbox.propDecorators = {\n            _options: [{ type: core.ContentChildren, args: [CdkOption, { descendants: true },] }],\n            selectionChange: [{ type: core.Output }]\n        };\n        return CdkListbox;\n    }());\n    /** Change event that is being fired whenever the selected state of an option changes. */\n    var ListboxSelectionChangeEvent = /** @class */ (function () {\n        function ListboxSelectionChangeEvent(\n        /** Reference to the listbox that emitted the event. */\n        source, \n        /** Reference to the option that has been changed. */\n        option) {\n            this.source = source;\n            this.option = option;\n        }\n        return ListboxSelectionChangeEvent;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\n    var CdkListboxModule = /** @class */ (function () {\n        function CdkListboxModule() {\n        }\n        CdkListboxModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: EXPORTED_DECLARATIONS,\n                        declarations: EXPORTED_DECLARATIONS,\n                    },] }\n        ];\n        return CdkListboxModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CdkListbox = CdkListbox;\n    exports.CdkListboxModule = CdkListboxModule;\n    exports.CdkOption = CdkOption;\n    exports.ListboxSelectionChangeEvent = ListboxSelectionChangeEvent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-experimental-listbox.umd.js.map\n"]}