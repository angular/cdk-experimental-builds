{"version":3,"sources":["src/cdk-experimental/cdk-experimental-listbox.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdkExperimental","listbox","core","cdk","a11y","keycodes","coercion","this","nextId","CdkOption","_elementRef","_selected","_disabled","_active","id","Object","defineProperty","prototype","get","set","value","coerceBooleanProperty","enumerable","configurable","toggle","_isInteractionDisabled","selected","_emitChangeEvent","activate","setActiveOption","deactivate","disabled","_getTabIndex","getLabel","nativeElement","textContent","setActiveStyles","setInactiveStyles","decorators","type","Directive","args","selector","exportAs","host","role","(click)","(focus)","(blur)","[id]","[attr.aria-selected]","[attr.tabindex]","[attr.aria-disabled]","[class.cdk-option-disabled]","[class.cdk-option-active]","ctorParameters","ElementRef","CdkListbox","Inject","forwardRef","propDecorators","Input","selectionChange","EventEmitter","ngAfterContentInit","_listKeyManager","ActiveDescendantKeyManager","_options","withWrap","withVerticalOrientation","withTypeAhead","ngOnDestroy","change","complete","_keydown","event","manager","keyCode","HOME","END","preventDefault","setFirstItemActive","setLastItemActive","SPACE","ENTER","activeItem","isTyping","_toggleActiveOption","onKeydown","option","emit","ListboxSelectionChangeEvent","activeOption","select","deselect","updateActiveItem","(keydown)","ContentChildren","descendants","Output","source","EXPORTED_DECLARATIONS","CdkListboxModule","NgModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/a11y'), require('@angular/cdk/keycodes'), require('@angular/cdk/coercion')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk-experimental/listbox', ['exports', '@angular/core', '@angular/cdk/a11y', '@angular/cdk/keycodes', '@angular/cdk/coercion'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdkExperimental = global.ng.cdkExperimental || {}, global.ng.cdkExperimental.listbox = {}), global.ng.core, global.ng.cdk.a11y, global.ng.cdk.keycodes, global.ng.cdk.coercion));\n}(this, (function (exports, core, a11y, keycodes, coercion) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var nextId = 0;\n    var CdkOption = /** @class */ (function () {\n        function CdkOption(_elementRef, listbox) {\n            this._elementRef = _elementRef;\n            this.listbox = listbox;\n            this._selected = false;\n            this._disabled = false;\n            this._active = false;\n            /** The id of the option, set to a uniqueid if the user does not provide one. */\n            this.id = \"cdk-option-\" + nextId++;\n        }\n        Object.defineProperty(CdkOption.prototype, \"selected\", {\n            get: function () {\n                return this._selected;\n            },\n            set: function (value) {\n                if (!this._disabled) {\n                    this._selected = coercion.coerceBooleanProperty(value);\n                }\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(CdkOption.prototype, \"disabled\", {\n            get: function () {\n                return this._disabled;\n            },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /** Toggles the selected state, emits a change event through the injected listbox. */\n        CdkOption.prototype.toggle = function () {\n            if (!this._isInteractionDisabled()) {\n                this.selected = !this.selected;\n                this.listbox._emitChangeEvent(this);\n            }\n        };\n        /** Sets the active property true if the option and listbox aren't disabled. */\n        CdkOption.prototype.activate = function () {\n            if (!this._isInteractionDisabled()) {\n                this._active = true;\n                this.listbox.setActiveOption(this);\n            }\n        };\n        /** Sets the active property false. */\n        CdkOption.prototype.deactivate = function () {\n            this._active = false;\n        };\n        /** Returns true if the option or listbox are disabled, and false otherwise. */\n        CdkOption.prototype._isInteractionDisabled = function () {\n            return (this.listbox.disabled || this._disabled);\n        };\n        /** Returns the tab index which depends on the disabled property. */\n        CdkOption.prototype._getTabIndex = function () {\n            return (this.listbox.disabled || this._disabled) ? null : '-1';\n        };\n        CdkOption.prototype.getLabel = function () {\n            // TODO: improve to method to handle more complex combinations of elements and text\n            return this._elementRef.nativeElement.textContent;\n        };\n        CdkOption.prototype.setActiveStyles = function () {\n            this._active = true;\n        };\n        CdkOption.prototype.setInactiveStyles = function () {\n            this._active = false;\n        };\n        CdkOption.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkOption]',\n                        exportAs: 'cdkOption',\n                        host: {\n                            'role': 'option',\n                            '(click)': 'toggle()',\n                            '(focus)': 'activate()',\n                            '(blur)': 'deactivate()',\n                            '[id]': 'id',\n                            '[attr.aria-selected]': '_selected || null',\n                            '[attr.tabindex]': '_getTabIndex()',\n                            '[attr.aria-disabled]': '_isInteractionDisabled()',\n                            '[class.cdk-option-disabled]': '_isInteractionDisabled()',\n                            '[class.cdk-option-active]': '_active'\n                        }\n                    },] }\n        ];\n        CdkOption.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: CdkListbox, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return CdkListbox; }),] }] }\n        ]; };\n        CdkOption.propDecorators = {\n            selected: [{ type: core.Input }],\n            id: [{ type: core.Input }],\n            disabled: [{ type: core.Input }]\n        };\n        return CdkOption;\n    }());\n    var CdkListbox = /** @class */ (function () {\n        function CdkListbox() {\n            this._disabled = false;\n            this.selectionChange = new core.EventEmitter();\n        }\n        Object.defineProperty(CdkListbox.prototype, \"disabled\", {\n            get: function () {\n                return this._disabled;\n            },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        CdkListbox.prototype.ngAfterContentInit = function () {\n            this._listKeyManager = new a11y.ActiveDescendantKeyManager(this._options)\n                .withWrap().withVerticalOrientation().withTypeAhead();\n        };\n        CdkListbox.prototype.ngOnDestroy = function () {\n            this._listKeyManager.change.complete();\n        };\n        CdkListbox.prototype._keydown = function (event) {\n            if (this._disabled) {\n                return;\n            }\n            var manager = this._listKeyManager;\n            var keyCode = event.keyCode;\n            if (keyCode === keycodes.HOME || keyCode === keycodes.END) {\n                event.preventDefault();\n                keyCode === keycodes.HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n            }\n            else if (keyCode === keycodes.SPACE || keyCode === keycodes.ENTER) {\n                if (manager.activeItem && !manager.isTyping()) {\n                    this._toggleActiveOption();\n                }\n            }\n            else {\n                manager.onKeydown(event);\n            }\n        };\n        /** Emits a selection change event, called when an option has its selected state changed. */\n        CdkListbox.prototype._emitChangeEvent = function (option) {\n            this.selectionChange.emit(new ListboxSelectionChangeEvent(this, option));\n        };\n        CdkListbox.prototype._toggleActiveOption = function () {\n            var activeOption = this._listKeyManager.activeItem;\n            if (activeOption && !activeOption.disabled) {\n                activeOption.toggle();\n                this._emitChangeEvent(activeOption);\n            }\n        };\n        /** Selects the given option if the option and listbox aren't disabled. */\n        CdkListbox.prototype.select = function (option) {\n            if (!this.disabled && !option.disabled) {\n                option.selected = true;\n            }\n        };\n        /** Deselects the given option if the option and listbox aren't disabled. */\n        CdkListbox.prototype.deselect = function (option) {\n            if (!this.disabled && !option.disabled) {\n                option.selected = false;\n            }\n        };\n        /** Updates the key manager's active item to the given option. */\n        CdkListbox.prototype.setActiveOption = function (option) {\n            this._listKeyManager.updateActiveItem(option);\n        };\n        CdkListbox.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkListbox]',\n                        exportAs: 'cdkListbox',\n                        host: {\n                            'role': 'listbox',\n                            '(keydown)': '_keydown($event)',\n                            '[attr.aria-disabled]': '_disabled',\n                        }\n                    },] }\n        ];\n        CdkListbox.propDecorators = {\n            _options: [{ type: core.ContentChildren, args: [CdkOption, { descendants: true },] }],\n            selectionChange: [{ type: core.Output }],\n            disabled: [{ type: core.Input }]\n        };\n        return CdkListbox;\n    }());\n    /** Change event that is being fired whenever the selected state of an option changes. */\n    var ListboxSelectionChangeEvent = /** @class */ (function () {\n        function ListboxSelectionChangeEvent(\n        /** Reference to the listbox that emitted the event. */\n        source, \n        /** Reference to the option that has been changed. */\n        option) {\n            this.source = source;\n            this.option = option;\n        }\n        return ListboxSelectionChangeEvent;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\n    var CdkListboxModule = /** @class */ (function () {\n        function CdkListboxModule() {\n        }\n        CdkListboxModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: EXPORTED_DECLARATIONS,\n                        declarations: EXPORTED_DECLARATIONS,\n                    },] }\n        ];\n        return CdkListboxModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CdkListbox = CdkListbox;\n    exports.CdkListboxModule = CdkListboxModule;\n    exports.CdkOption = CdkOption;\n    exports.ListboxSelectionChangeEvent = ListboxSelectionChangeEvent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-experimental-listbox.umd.js.map\n"]}