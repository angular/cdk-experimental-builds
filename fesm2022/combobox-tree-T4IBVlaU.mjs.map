{"version":3,"file":"combobox-tree-T4IBVlaU.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/ui-patterns/tree/tree.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/ui-patterns/tree/combobox-tree.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {List, ListInputs, ListItem} from '../behaviors/list/list';\nimport {ExpansionItem, ExpansionControl, ListExpansion} from '../behaviors/expansion/expansion';\nimport {KeyboardEventManager, PointerEventManager, Modifier} from '../behaviors/event-manager';\n\n/** Represents the required inputs for a tree item. */\nexport interface TreeItemInputs<V> extends Omit<ListItem<V>, 'index'> {\n  /** The parent item. */\n  parent: SignalLike<TreeItemPattern<V> | TreePattern<V>>;\n\n  /** Whether this item has children. Children can be lazily loaded. */\n  hasChildren: SignalLike<boolean>;\n\n  /** The children items. */\n  children: SignalLike<TreeItemPattern<V>[]>;\n\n  /** The tree pattern this item belongs to. */\n  tree: SignalLike<TreePattern<V>>;\n}\n\nexport interface TreeItemPattern<V> extends TreeItemInputs<V> {}\n/**\n * Represents an item in a Tree.\n */\nexport class TreeItemPattern<V> implements ExpansionItem {\n  /** The position of this item among its siblings. */\n  readonly index = computed(() => this.tree().visibleItems().indexOf(this));\n\n  /** The unique identifier used by the expansion behavior. */\n  readonly expansionId: SignalLike<string>;\n\n  /** Controls expansion for child items. */\n  readonly expansionManager: ListExpansion;\n\n  /** Controls expansion for this item. */\n  readonly expansion: ExpansionControl;\n\n  /** Whether the item is expandable. It's expandable if children item exist. */\n  readonly expandable: SignalLike<boolean>;\n\n  /** The level of the current item in a tree. */\n  readonly level: SignalLike<number> = computed(() => this.parent().level() + 1);\n\n  /** Whether this item is currently expanded. */\n  readonly expanded = computed(() => this.expansion.isExpanded());\n\n  /** Whether this item is visible. */\n  readonly visible = computed(() => this.parent().expanded());\n\n  /** The number of items under the same parent at the same level. */\n  readonly setsize = computed(() => this.parent().children().length);\n\n  /** The position of this item among its siblings (1-based). */\n  readonly posinset = computed(() => this.parent().children().indexOf(this) + 1);\n\n  /** Whether the item is active. */\n  readonly active = computed(() => this.tree().activeItem() === this);\n\n  /** The tabindex of the item. */\n  readonly tabindex = computed(() => this.tree().listBehavior.getItemTabindex(this));\n\n  /** Whether the item is selected. */\n  readonly selected = computed(() => {\n    if (this.tree().nav()) {\n      return undefined;\n    }\n    return this.tree().value().includes(this.value());\n  });\n\n  /** The current type of this item. */\n  readonly current = computed(() => {\n    if (!this.tree().nav()) {\n      return undefined;\n    }\n    return this.tree().value().includes(this.value()) ? this.tree().currentType() : undefined;\n  });\n\n  constructor(readonly inputs: TreeItemInputs<V>) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n    this.searchTerm = inputs.searchTerm;\n    this.expansionId = inputs.id;\n    this.tree = inputs.tree;\n    this.parent = inputs.parent;\n    this.children = inputs.children;\n    this.expandable = inputs.hasChildren;\n    this.expansion = new ExpansionControl({\n      ...inputs,\n      expandable: this.expandable,\n      expansionId: this.expansionId,\n      expansionManager: this.parent().expansionManager,\n    });\n    this.expansionManager = new ListExpansion({\n      ...inputs,\n      multiExpandable: () => true,\n      // TODO(ok7sai): allow pre-expanded tree items.\n      expandedIds: signal([]),\n      items: this.children,\n      disabled: computed(() => this.tree()?.disabled() ?? false),\n    });\n  }\n}\n\n/** The selection operations that the tree can perform. */\ninterface SelectOptions {\n  toggle?: boolean;\n  selectOne?: boolean;\n  selectRange?: boolean;\n  anchor?: boolean;\n}\n\n/** Represents the required inputs for a tree. */\nexport interface TreeInputs<V> extends Omit<ListInputs<TreeItemPattern<V>, V>, 'items'> {\n  /** A unique identifier for the tree. */\n  id: SignalLike<string>;\n\n  /** All items in the tree, in document order (DFS-like, a flattened list). */\n  allItems: SignalLike<TreeItemPattern<V>[]>;\n\n  /** Whether the tree is in navigation mode. */\n  nav: SignalLike<boolean>;\n\n  /** The aria-current type. */\n  currentType: SignalLike<'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'>;\n}\n\nexport interface TreePattern<V> extends TreeInputs<V> {}\n/** Controls the state and interactions of a tree view. */\nexport class TreePattern<V> {\n  /** The list behavior for the tree. */\n  readonly listBehavior: List<TreeItemPattern<V>, V>;\n\n  /** Controls expansion for direct children of the tree root (top-level items). */\n  readonly expansionManager: ListExpansion;\n\n  /** The root level is 0. */\n  readonly level = () => 0;\n\n  /** The root is always expanded. */\n  readonly expanded = () => true;\n\n  /** The tabindex of the tree. */\n  tabindex: SignalLike<-1 | 0> = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active item. */\n  readonly activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** The direct children of the root (top-level tree items). */\n  readonly children = computed(() =>\n    this.inputs.allItems().filter(item => item.level() === this.level() + 1),\n  );\n\n  /** All currently visible tree items. An item is visible if their parent is expanded. */\n  readonly visibleItems = computed(() => this.inputs.allItems().filter(item => item.visible()));\n\n  /** Whether the tree selection follows focus. */\n  readonly followFocus = computed(() => this.inputs.selectionMode() === 'follow');\n\n  /** The key for navigating to the previous item. */\n  readonly prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key for navigating to the next item. */\n  readonly nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The key for collapsing an item or moving to its parent. */\n  readonly collapseKey = computed(() => {\n    if (this.inputs.orientation() === 'horizontal') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key for expanding an item or moving to its first child. */\n  readonly expandKey = computed(() => {\n    if (this.inputs.orientation() === 'horizontal') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  readonly dynamicSpaceKey = computed(() => (this.listBehavior.isTyping() ? '' : ' '));\n\n  /** Regular expression to match characters for typeahead. */\n  readonly typeaheadRegexp = /^.$/;\n\n  /** The keydown event manager for the tree. */\n  readonly keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n    const list = this.listBehavior;\n\n    manager\n      .on(this.prevKey, () => list.prev({selectOne: this.followFocus()}))\n      .on(this.nextKey, () => list.next({selectOne: this.followFocus()}))\n      .on('Home', () => list.first({selectOne: this.followFocus()}))\n      .on('End', () => list.last({selectOne: this.followFocus()}))\n      .on(this.typeaheadRegexp, e => list.search(e.key, {selectOne: this.followFocus()}))\n      .on(this.expandKey, () => this.expand({selectOne: this.followFocus()}))\n      .on(this.collapseKey, () => this.collapse({selectOne: this.followFocus()}))\n      .on(Modifier.Shift, '*', () => this.expandSiblings());\n\n    if (this.inputs.multi()) {\n      manager\n        // TODO: Tracking the anchor by index can break if the\n        // tree is expanded or collapsed causing the index to change.\n        .on(Modifier.Any, 'Shift', () => list.anchor(this.listBehavior.activeIndex()))\n        .on(Modifier.Shift, this.prevKey, () => list.prev({selectRange: true}))\n        .on(Modifier.Shift, this.nextKey, () => list.next({selectRange: true}))\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'Home', () =>\n          list.first({selectRange: true, anchor: false}),\n        )\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'End', () =>\n          list.last({selectRange: true, anchor: false}),\n        )\n        .on(Modifier.Shift, 'Enter', () => list.updateSelection({selectRange: true, anchor: false}))\n        .on(Modifier.Shift, this.dynamicSpaceKey, () =>\n          list.updateSelection({selectRange: true, anchor: false}),\n        );\n    }\n\n    if (!this.followFocus() && this.inputs.multi()) {\n      manager\n        .on(this.dynamicSpaceKey, () => list.toggle())\n        .on('Enter', () => list.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => list.toggleAll());\n    }\n\n    if (!this.followFocus() && !this.inputs.multi()) {\n      manager.on(this.dynamicSpaceKey, () => list.selectOne());\n      manager.on('Enter', () => list.selectOne());\n    }\n\n    if (this.inputs.multi() && this.followFocus()) {\n      manager\n        .on([Modifier.Ctrl, Modifier.Meta], this.prevKey, () => list.prev())\n        .on([Modifier.Ctrl, Modifier.Meta], this.nextKey, () => list.next())\n        .on([Modifier.Ctrl, Modifier.Meta], this.expandKey, () => this.expand())\n        .on([Modifier.Ctrl, Modifier.Meta], this.collapseKey, () => this.collapse())\n        .on([Modifier.Ctrl, Modifier.Meta], ' ', () => list.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Enter', () => list.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Home', () => list.first())\n        .on([Modifier.Ctrl, Modifier.Meta], 'End', () => list.last())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => {\n          list.toggleAll();\n          list.select(); // Ensure the currect item remains selected.\n        });\n    }\n\n    return manager;\n  });\n\n  /** The pointerdown event manager for the tree. */\n  pointerdown = computed(() => {\n    const manager = new PointerEventManager();\n\n    if (this.multi()) {\n      manager.on(Modifier.Shift, e => this.goto(e, {selectRange: true}));\n    }\n\n    if (!this.multi()) {\n      return manager.on(e => this.goto(e, {selectOne: true}));\n    }\n\n    if (this.multi() && this.followFocus()) {\n      return manager\n        .on(e => this.goto(e, {selectOne: true}))\n        .on(Modifier.Ctrl, e => this.goto(e, {toggle: true}));\n    }\n\n    if (this.multi() && !this.followFocus()) {\n      return manager.on(e => this.goto(e, {toggle: true}));\n    }\n\n    return manager;\n  });\n\n  constructor(readonly inputs: TreeInputs<V>) {\n    this.id = inputs.id;\n    this.nav = inputs.nav;\n    this.currentType = inputs.currentType;\n    this.allItems = inputs.allItems;\n    this.focusMode = inputs.focusMode;\n    this.disabled = inputs.disabled;\n    this.activeItem = inputs.activeItem;\n    this.skipDisabled = inputs.skipDisabled;\n    this.wrap = inputs.wrap;\n    this.orientation = inputs.orientation;\n    this.textDirection = inputs.textDirection;\n    this.multi = computed(() => (this.nav() ? false : this.inputs.multi()));\n    this.selectionMode = inputs.selectionMode;\n    this.typeaheadDelay = inputs.typeaheadDelay;\n    this.value = inputs.value;\n\n    this.listBehavior = new List({\n      ...inputs,\n      items: this.visibleItems,\n      multi: this.multi,\n    });\n\n    this.expansionManager = new ListExpansion({\n      multiExpandable: () => true,\n      // TODO(ok7sai): allow pre-expanded tree items.\n      expandedIds: signal([]),\n      items: this.children,\n      disabled: this.disabled,\n    });\n  }\n\n  /**\n   * Sets the tree to it's default initial state.\n   *\n   * Sets the active index of the tree to the first focusable selected tree item if one exists.\n   * Otherwise, sets focus to the first focusable tree item.\n   */\n  setDefaultState() {\n    let firstItem: TreeItemPattern<V> | undefined;\n\n    for (const item of this.allItems()) {\n      if (!item.visible()) continue;\n      if (!this.listBehavior.isFocusable(item)) continue;\n\n      if (firstItem === undefined) {\n        firstItem = item;\n      }\n\n      if (item.selected()) {\n        this.activeItem.set(item);\n        return;\n      }\n    }\n\n    if (firstItem !== undefined) {\n      this.activeItem.set(firstItem);\n    }\n  }\n\n  /** Handles keydown events on the tree. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  /** Handles pointerdown events on the tree. */\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /** Navigates to the given tree item in the tree. */\n  goto(e: PointerEvent, opts?: SelectOptions) {\n    const item = this._getItem(e);\n    if (!item) return;\n\n    this.listBehavior.goto(item, opts);\n    this.toggleExpansion(item);\n  }\n\n  /** Toggles to expand or collapse a tree item. */\n  toggleExpansion(item?: TreeItemPattern<V>) {\n    item ??= this.activeItem();\n    if (!item || !this.listBehavior.isFocusable(item)) return;\n\n    if (!item.expandable()) return;\n    if (item.expanded()) {\n      this.collapse();\n    } else {\n      item.expansion.open();\n    }\n  }\n\n  /** Expands a tree item. */\n  expand(opts?: SelectOptions) {\n    const item = this.activeItem();\n    if (!item || !this.listBehavior.isFocusable(item)) return;\n\n    if (item.expandable() && !item.expanded()) {\n      item.expansion.open();\n    } else if (\n      item.expanded() &&\n      item.children().some(item => this.listBehavior.isFocusable(item))\n    ) {\n      this.listBehavior.next(opts);\n    }\n  }\n\n  /** Expands all sibling tree items including itself. */\n  expandSiblings(item?: TreeItemPattern<V>) {\n    item ??= this.activeItem();\n    const siblings = item?.parent()?.children();\n    siblings?.forEach(item => item.expansion.open());\n  }\n\n  /** Collapses a tree item. */\n  collapse(opts?: SelectOptions) {\n    const item = this.activeItem();\n    if (!item || !this.listBehavior.isFocusable(item)) return;\n\n    if (item.expandable() && item.expanded()) {\n      item.expansion.close();\n    } else if (item.parent() && item.parent() !== this) {\n      const parentItem = item.parent();\n      if (parentItem instanceof TreeItemPattern && this.listBehavior.isFocusable(parentItem)) {\n        this.listBehavior.goto(parentItem, opts);\n      }\n    }\n  }\n\n  /** Retrieves the TreeItemPattern associated with a DOM event, if any. */\n  protected _getItem(event: Event): TreeItemPattern<V> | undefined {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n    const element = event.target.closest('[role=\"treeitem\"]');\n    return this.inputs.allItems().find(i => i.element() === element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {TreeInputs, TreePattern, TreeItemPattern} from './tree';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {ComboboxPattern, ComboboxTreeControls} from '../combobox/combobox';\n\nexport type ComboboxTreeInputs<V> = TreeInputs<V> & {\n  /** The combobox controlling the tree. */\n  combobox: SignalLike<ComboboxPattern<TreeItemPattern<V>, V> | undefined>;\n};\n\nexport class ComboboxTreePattern<V>\n  extends TreePattern<V>\n  implements ComboboxTreeControls<TreeItemPattern<V>, V>\n{\n  /** Whether the currently focused item is collapsible. */\n  isItemCollapsible = () => this.activeItem()?.parent() instanceof TreeItemPattern;\n\n  /** The ARIA role for the tree. */\n  role = () => 'tree' as const;\n\n  /* The id of the active (focused) item in the tree. */\n  activeId = computed(() => this.listBehavior.activedescendant());\n\n  /** The list of items in the tree. */\n  items = computed(() => this.inputs.allItems());\n\n  /** The tabindex for the tree. Always -1 because the combobox handles focus. */\n  override tabindex: SignalLike<-1 | 0> = () => -1;\n\n  constructor(override readonly inputs: ComboboxTreeInputs<V>) {\n    if (inputs.combobox()) {\n      inputs.multi = () => false;\n      inputs.focusMode = () => 'activedescendant';\n      inputs.element = inputs.combobox()!.inputs.inputEl;\n    }\n\n    super(inputs);\n  }\n\n  /** Noop. The combobox handles keydown events. */\n  override onKeydown(_: KeyboardEvent): void {}\n\n  /** Noop. The combobox handles pointerdown events. */\n  override onPointerdown(_: PointerEvent): void {}\n\n  /** Noop. The combobox controls the open state. */\n  override setDefaultState(): void {}\n\n  /** Navigates to the specified item in the tree. */\n  focus = (item: TreeItemPattern<V>) => this.listBehavior.goto(item);\n\n  /** Navigates to the next focusable item in the tree. */\n  next = () => this.listBehavior.next();\n\n  /** Navigates to the previous focusable item in the tree. */\n  prev = () => this.listBehavior.prev();\n\n  /** Navigates to the last focusable item in the tree. */\n  last = () => this.listBehavior.last();\n\n  /** Navigates to the first focusable item in the tree. */\n  first = () => this.listBehavior.first();\n\n  /** Unfocuses the currently focused item in the tree. */\n  unfocus = () => this.listBehavior.unfocus();\n\n  /** Selects the specified item in the tree or the current active item if not provided. */\n  select = (item?: TreeItemPattern<V>) => this.listBehavior.select(item);\n\n  /** Clears the selection in the tree. */\n  clearSelection = () => this.listBehavior.deselectAll();\n\n  /** Retrieves the TreeItemPattern associated with a pointer event. */\n  getItem = (e: PointerEvent) => this._getItem(e);\n\n  /** Retrieves the currently selected item in the tree */\n  getSelectedItem = () => this.inputs.allItems().find(i => i.selected());\n\n  /** Sets the value of the combobox tree. */\n  setValue = (value: V | undefined) => this.inputs.value.set(value ? [value] : []);\n\n  /** Expands the currently focused item if it is expandable. */\n  expandItem = () => this.expand();\n\n  /** Collapses the currently focused item if it is expandable. */\n  collapseItem = () => this.collapse();\n\n  /** Whether the specified item or the currently active item is expandable. */\n  isItemExpandable(item: TreeItemPattern<V> | undefined = this.activeItem()) {\n    return item ? item.expandable() : false;\n  }\n\n  /** Expands all of the tree items. */\n  expandAll = () => this.items().forEach(item => item.expansion.open());\n\n  /** Collapses all of the tree items. */\n  collapseAll = () => this.items().forEach(item => item.expansion.close());\n}\n"],"names":[],"mappings":"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"}