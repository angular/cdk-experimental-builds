{"version":3,"file":"ui-patterns.mjs","sources":["../../../../../../src/cdk-experimental/ui-patterns/behaviors/event-manager/event-manager.ts","../../../../../../src/cdk-experimental/ui-patterns/behaviors/event-manager/keyboard-event-manager.ts","../../../../../../src/cdk-experimental/ui-patterns/behaviors/event-manager/pointer-event-manager.ts","../../../../../../src/cdk-experimental/ui-patterns/behaviors/list-selection/list-selection.ts","../../../../../../src/cdk-experimental/ui-patterns/behaviors/list-typeahead/list-typeahead.ts","../../../../../../src/cdk-experimental/ui-patterns/behaviors/list-navigation/list-navigation.ts","../../../../../../src/cdk-experimental/ui-patterns/behaviors/list-focus/list-focus.ts","../../../../../../src/cdk-experimental/ui-patterns/listbox/listbox.ts","../../../../../../src/cdk-experimental/ui-patterns/listbox/option.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * An event that supports modifier keys.\n *\n * Matches the native KeyboardEvent, MouseEvent, and TouchEvent.\n */\nexport interface EventWithModifiers extends Event {\n  ctrlKey: boolean;\n  shiftKey: boolean;\n  altKey: boolean;\n  metaKey: boolean;\n}\n\n/**\n * Options that are applicable to all event handlers.\n *\n * This library has not yet had a need for stopPropagationImmediate.\n */\nexport interface EventHandlerOptions {\n  stopPropagation: boolean;\n  preventDefault: boolean;\n}\n\n/** A basic event handler. */\nexport type EventHandler<T extends Event> = (event: T) => void;\n\n/** A function that determines whether an event is to be handled. */\nexport type EventMatcher<T extends Event> = (event: T) => boolean;\n\n/** A config that specifies how to handle a particular event. */\nexport interface EventHandlerConfig<T extends Event> extends EventHandlerOptions {\n  matcher: EventMatcher<T>;\n  handler: EventHandler<T>;\n}\n\n/** Bit flag representation of the possible modifier keys that can be present on an event. */\nexport enum ModifierKey {\n  None = 0,\n  Ctrl = 0b1,\n  Shift = 0b10,\n  Alt = 0b100,\n  Meta = 0b1000,\n}\n\nexport type ModifierInputs = ModifierKey | ModifierKey[];\n\n/**\n * Abstract base class for all event managers.\n *\n * Event managers are designed to normalize how event handlers are authored and create a safety net\n * for common event handling gotchas like remembering to call preventDefault or stopPropagation.\n */\nexport abstract class EventManager<T extends Event> {\n  protected configs: EventHandlerConfig<T>[] = [];\n  abstract options: EventHandlerOptions;\n\n  /** Runs the handlers that match with the given event. */\n  handle(event: T): void {\n    for (const config of this.configs) {\n      if (config.matcher(event)) {\n        config.handler(event);\n\n        if (config.preventDefault) {\n          event.preventDefault();\n        }\n\n        if (config.stopPropagation) {\n          event.stopPropagation();\n        }\n      }\n    }\n  }\n\n  /** Configures the event manager to handle specific events. (See subclasses for more). */\n  abstract on(...args: [...unknown[]]): this;\n}\n\n/** Gets bit flag representation of the modifier keys present on the given event. */\nexport function getModifiers(event: EventWithModifiers): number {\n  return (\n    (+event.ctrlKey && ModifierKey.Ctrl) |\n    (+event.shiftKey && ModifierKey.Shift) |\n    (+event.altKey && ModifierKey.Alt) |\n    (+event.metaKey && ModifierKey.Meta)\n  );\n}\n\n/**\n * Checks if the given event has modifiers that are an exact match for any of the given modifier\n * flag combinations.\n */\nexport function hasModifiers(event: EventWithModifiers, modifiers: ModifierInputs): boolean {\n  const eventModifiers = getModifiers(event);\n  const modifiersList = Array.isArray(modifiers) ? modifiers : [modifiers];\n  return modifiersList.some(modifiers => eventModifiers === modifiers);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Signal} from '@angular/core';\nimport {\n  EventHandler,\n  EventHandlerOptions,\n  EventManager,\n  hasModifiers,\n  ModifierInputs,\n  ModifierKey,\n} from './event-manager';\n\n/**\n * Used to represent a keycode.\n *\n * This is used to match whether an events keycode should be handled. The ability to match using a\n * string, Signal, or Regexp gives us more flexibility when authoring event handlers.\n */\ntype KeyCode = string | Signal<string> | RegExp;\n\n/**\n * An event manager that is specialized for handling keyboard events. By default this manager stops\n * propagation and prevents default on all events it handles.\n */\nexport class KeyboardEventManager<T extends KeyboardEvent> extends EventManager<T> {\n  options: EventHandlerOptions = {\n    preventDefault: true,\n    stopPropagation: true,\n  };\n\n  /** Configures this event manager to handle events with a specific key and no modifiers. */\n  on(key: KeyCode, handler: EventHandler<T>): this;\n\n  /**  Configures this event manager to handle events with a specific modifer and key combination. */\n  on(modifiers: ModifierInputs, key: KeyCode, handler: EventHandler<T>): this;\n\n  on(...args: any[]) {\n    const {modifiers, key, handler} = this._normalizeInputs(...args);\n\n    this.configs.push({\n      handler: handler,\n      matcher: event => this._isMatch(event, key, modifiers),\n      ...this.options,\n    });\n\n    return this;\n  }\n\n  private _normalizeInputs(...args: any[]) {\n    const key = args.length === 3 ? args[1] : args[0];\n    const handler = args.length === 3 ? args[2] : args[1];\n    const modifiers = args.length === 3 ? args[0] : ModifierKey.None;\n\n    return {\n      key: key as KeyCode,\n      handler: handler as EventHandler<T>,\n      modifiers: modifiers as ModifierInputs,\n    };\n  }\n\n  private _isMatch(event: T, key: KeyCode, modifiers: ModifierInputs) {\n    if (key instanceof RegExp) {\n      return key.test(event.key);\n    }\n\n    const keyStr = typeof key === 'string' ? key : key();\n    return keyStr.toLowerCase() === event.key.toLowerCase() && hasModifiers(event, modifiers);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  EventHandler,\n  EventHandlerOptions,\n  EventManager,\n  hasModifiers,\n  ModifierInputs,\n  ModifierKey,\n} from './event-manager';\n\n/**\n * The different mouse buttons that may appear on a pointer event.\n */\nexport enum MouseButton {\n  Main = 0,\n  Auxiliary = 1,\n  Secondary = 2,\n}\n\n/** An event manager that is specialized for handling pointer events. */\nexport class PointerEventManager<T extends PointerEvent> extends EventManager<T> {\n  options: EventHandlerOptions = {\n    preventDefault: false,\n    stopPropagation: false,\n  };\n\n  /**\n   * Configures this event manager to handle events with a specific modifer and mouse button\n   * combination.\n   */\n  on(button: MouseButton, modifiers: ModifierInputs, handler: EventHandler<T>): this;\n\n  /**\n   * Configures this event manager to handle events with a specific mouse button and no modifiers.\n   */\n  on(modifiers: ModifierInputs, handler: EventHandler<T>): this;\n\n  /**\n   * Configures this event manager to handle events with the main mouse button and no modifiers.\n   *\n   * @param handler The handler function\n   * @param options Options for whether to stop propagation or prevent default.\n   */\n  on(handler: EventHandler<T>): this;\n\n  on(...args: any[]) {\n    const {button, handler, modifiers} = this._normalizeInputs(...args);\n\n    this.configs.push({\n      handler,\n      matcher: event => this._isMatch(event, button, modifiers),\n      ...this.options,\n    });\n    return this;\n  }\n\n  private _normalizeInputs(...args: any[]) {\n    if (args.length === 3) {\n      return {\n        button: args[0] as MouseButton,\n        modifiers: args[1] as ModifierInputs,\n        handler: args[2] as EventHandler<T>,\n      };\n    }\n\n    if (typeof args[0] === 'number' && typeof args[1] === 'function') {\n      return {\n        button: MouseButton.Main,\n        modifiers: args[0] as ModifierInputs,\n        handler: args[1] as EventHandler<T>,\n      };\n    }\n\n    return {\n      button: MouseButton.Main,\n      modifiers: ModifierKey.None,\n      handler: args[0] as EventHandler<T>,\n    };\n  }\n\n  _isMatch(event: PointerEvent, button: MouseButton, modifiers: ModifierInputs) {\n    return button === (event.button ?? 0) && hasModifiers(event, modifiers);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {signal, Signal, WritableSignal} from '@angular/core';\nimport {ListNavigation, ListNavigationItem} from '../list-navigation/list-navigation';\n\n/** Represents an item in a collection, such as a listbox option, than can be selected. */\nexport interface ListSelectionItem extends ListNavigationItem {\n  /** A unique identifier for the item. */\n  id: Signal<string>;\n\n  /** Whether an item is disabled. */\n  disabled: Signal<boolean>;\n}\n\n/** Represents the required inputs for a collection that contains selectable items. */\nexport interface ListSelectionInputs<T extends ListSelectionItem> {\n  /** The items in the list. */\n  items: Signal<T[]>;\n\n  /** Whether multiple items in the list can be selected at once. */\n  multiselectable: Signal<boolean>;\n\n  /** The ids of the current selected items. */\n  selectedIds: WritableSignal<string[]>;\n\n  /** The selection strategy used by the list. */\n  selectionMode: Signal<'follow' | 'explicit'>;\n}\n\n/** Controls selection for a list of items. */\nexport class ListSelection<T extends ListSelectionItem> {\n  /** The id of the most recently selected item. */\n  previousSelectedId = signal<string | undefined>(undefined);\n\n  /** The navigation controller of the parent list. */\n  navigation: ListNavigation<T>;\n\n  constructor(readonly inputs: ListSelectionInputs<T> & {navigation: ListNavigation<T>}) {\n    this.navigation = inputs.navigation;\n  }\n\n  /** Selects the item at the current active index. */\n  select(item?: T) {\n    item = item ?? this.inputs.items()[this.inputs.navigation.inputs.activeIndex()];\n\n    if (item.disabled() || this.inputs.selectedIds().includes(item.id())) {\n      return;\n    }\n\n    if (!this.inputs.multiselectable()) {\n      this.deselectAll();\n    }\n\n    // TODO: Need to discuss when to drop this.\n    this._anchor();\n    this.inputs.selectedIds.update(ids => ids.concat(item.id()));\n  }\n\n  /** Deselects the item at the current active index. */\n  deselect(item?: T) {\n    item = item ?? this.inputs.items()[this.inputs.navigation.inputs.activeIndex()];\n\n    if (!item.disabled()) {\n      this.inputs.selectedIds.update(ids => ids.filter(id => id !== item.id()));\n    }\n  }\n\n  /** Toggles the item at the current active index. */\n  toggle() {\n    const item = this.inputs.items()[this.inputs.navigation.inputs.activeIndex()];\n    this.inputs.selectedIds().includes(item.id()) ? this.deselect() : this.select();\n  }\n\n  /** Toggles only the item at the current active index. */\n  toggleOne() {\n    const item = this.inputs.items()[this.inputs.navigation.inputs.activeIndex()];\n    this.inputs.selectedIds().includes(item.id()) ? this.deselect() : this.selectOne();\n  }\n\n  /** Selects all items in the list. */\n  selectAll() {\n    if (!this.inputs.multiselectable()) {\n      return; // Should we log a warning?\n    }\n\n    for (const item of this.inputs.items()) {\n      this.select(item);\n    }\n\n    this._anchor();\n  }\n\n  /** Deselects all items in the list. */\n  deselectAll() {\n    for (const item of this.inputs.items()) {\n      this.deselect(item);\n    }\n  }\n\n  /** Selects the items in the list starting at the last selected item. */\n  selectFromPrevSelectedItem() {\n    const prevSelectedId = this.inputs.items().findIndex(i => this.previousSelectedId() === i.id());\n    this._selectFromIndex(prevSelectedId);\n  }\n\n  /** Selects the items in the list starting at the last active item. */\n  selectFromActive() {\n    this._selectFromIndex(this.inputs.navigation.prevActiveIndex());\n  }\n\n  /** Selects the items in the list starting at the given index. */\n  private _selectFromIndex(index: number) {\n    if (index === -1) {\n      return;\n    }\n\n    const upper = Math.max(this.inputs.navigation.inputs.activeIndex(), index);\n    const lower = Math.min(this.inputs.navigation.inputs.activeIndex(), index);\n\n    for (let i = lower; i <= upper; i++) {\n      this.select(this.inputs.items()[i]);\n    }\n  }\n\n  /** Sets the selection to only the current active item. */\n  selectOne() {\n    this.deselectAll();\n    this.select();\n  }\n\n  /** Sets the anchor to the current active index. */\n  private _anchor() {\n    const item = this.inputs.items()[this.inputs.navigation.inputs.activeIndex()];\n    this.previousSelectedId.set(item.id());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {signal, Signal} from '@angular/core';\nimport {ListNavigationItem, ListNavigation} from '../list-navigation/list-navigation';\n\n/**\n * Represents an item in a collection, such as a listbox option, than can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadItem extends ListNavigationItem {\n  /** The text used by the typeahead search. */\n  searchTerm: Signal<string>;\n}\n\n/**\n * Represents the required inputs for a collection that contains items that can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadInputs {\n  /** The amount of time before the typeahead search is reset. */\n  typeaheadDelay: Signal<number>;\n}\n\n/** Controls typeahead for a list of items. */\nexport class ListTypeahead<T extends ListTypeaheadItem> {\n  /** A reference to the timeout for resetting the typeahead search. */\n  timeout?: ReturnType<typeof setTimeout> | undefined;\n\n  /** The navigation controller of the parent list. */\n  navigation: ListNavigation<T>;\n\n  /** Keeps track of the characters that typeahead search is being called with. */\n  private _query = signal('');\n\n  /** The index where that the typeahead search was initiated from. */\n  private _startIndex = signal<number | undefined>(undefined);\n\n  constructor(readonly inputs: ListTypeaheadInputs & {navigation: ListNavigation<T>}) {\n    this.navigation = inputs.navigation;\n  }\n\n  /** Performs a typeahead search, appending the given character to the search string. */\n  search(char: string) {\n    if (char.length !== 1) {\n      return;\n    }\n\n    if (this._startIndex() === undefined) {\n      this._startIndex.set(this.navigation.inputs.activeIndex());\n    }\n\n    clearTimeout(this.timeout);\n    this._query.update(q => q + char.toLowerCase());\n    const item = this._getItem();\n\n    if (item) {\n      this.navigation.goto(item);\n    }\n\n    this.timeout = setTimeout(() => {\n      this._query.set('');\n      this._startIndex.set(undefined);\n    }, this.inputs.typeaheadDelay() * 1000);\n  }\n\n  /**\n   * Returns the first item whose search term matches the\n   * current query starting from the the current anchor index.\n   */\n  private _getItem() {\n    let items = this.navigation.inputs.items();\n    const after = items.slice(this._startIndex()! + 1);\n    const before = items.slice(0, this._startIndex()!);\n    items = this.navigation.inputs.wrap() ? after.concat(before) : after; // TODO: Always wrap?\n    items.push(this.navigation.inputs.items()[this._startIndex()!]);\n\n    const focusableItems = [];\n    for (const item of items) {\n      if (this.navigation.isFocusable(item)) {\n        focusableItems.push(item);\n      }\n    }\n\n    return focusableItems.find(i => i.searchTerm().toLowerCase().startsWith(this._query()));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {signal, Signal, WritableSignal} from '@angular/core';\n\n/** Represents an item in a collection, such as a listbox option, than can be navigated to. */\nexport interface ListNavigationItem {\n  /** Whether an item is disabled. */\n  disabled: Signal<boolean>;\n}\n\n/** Represents the required inputs for a collection that has navigable items. */\nexport interface ListNavigationInputs<T extends ListNavigationItem> {\n  /** Whether focus should wrap when navigating. */\n  wrap: Signal<boolean>;\n\n  /** The items in the list. */\n  items: Signal<T[]>;\n\n  /** Whether disabled items in the list should be skipped when navigating. */\n  skipDisabled: Signal<boolean>;\n\n  /** The current index that has been navigated to. */\n  activeIndex: WritableSignal<number>;\n\n  /** Whether the list is vertically or horizontally oriented. */\n  orientation: Signal<'vertical' | 'horizontal'>;\n\n  /** The direction that text is read based on the users locale. */\n  textDirection: Signal<'rtl' | 'ltr'>;\n}\n\n/** Controls navigation for a list of items. */\nexport class ListNavigation<T extends ListNavigationItem> {\n  /** The last index that was active. */\n  prevActiveIndex = signal(0);\n\n  constructor(readonly inputs: ListNavigationInputs<T>) {\n    this.prevActiveIndex.set(inputs.activeIndex());\n  }\n\n  /** Navigates to the given item. */\n  goto(item: T) {\n    if (this.isFocusable(item)) {\n      this.prevActiveIndex.set(this.inputs.activeIndex());\n      const index = this.inputs.items().indexOf(item);\n      this.inputs.activeIndex.set(index);\n    }\n  }\n\n  /** Navigates to the next item in the list. */\n  next() {\n    this._advance(1);\n  }\n\n  /** Navigates to the previous item in the list. */\n  prev() {\n    this._advance(-1);\n  }\n\n  /** Navigates to the first item in the list. */\n  first() {\n    const item = this.inputs.items().find(i => this.isFocusable(i));\n\n    if (item) {\n      this.goto(item);\n    }\n  }\n\n  /** Navigates to the last item in the list. */\n  last() {\n    const items = this.inputs.items();\n    for (let i = items.length - 1; i >= 0; i--) {\n      if (this.isFocusable(items[i])) {\n        this.goto(items[i]);\n        return;\n      }\n    }\n  }\n\n  /** Returns true if the given item can be navigated to. */\n  isFocusable(item: T): boolean {\n    return !item.disabled() || !this.inputs.skipDisabled();\n  }\n\n  /** Advances to the next or previous focusable item in the list based on the given delta. */\n  private _advance(delta: 1 | -1) {\n    const items = this.inputs.items();\n    const itemCount = items.length;\n    const startIndex = this.inputs.activeIndex();\n    const step = (i: number) =>\n      this.inputs.wrap() ? (i + delta + itemCount) % itemCount : i + delta;\n\n    // If wrapping is enabled, this loop ultimately terminates when `i` gets back to `startIndex`\n    // in the case that all options are disabled. If wrapping is disabled, the loop terminates\n    // when the index goes out of bounds.\n    for (let i = step(startIndex); i !== startIndex && i < itemCount && i >= 0; i = step(i)) {\n      if (this.isFocusable(items[i])) {\n        this.goto(items[i]);\n        return;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Signal} from '@angular/core';\nimport {ListNavigation, ListNavigationItem} from '../list-navigation/list-navigation';\n\n/** Represents an item in a collection, such as a listbox option, than may receive focus. */\nexport interface ListFocusItem extends ListNavigationItem {\n  /** A unique identifier for the item. */\n  id: Signal<string>;\n\n  /** The html element that should receive focus. */\n  element: Signal<HTMLElement>;\n}\n\n/** Represents the required inputs for a collection that contains focusable items. */\nexport interface ListFocusInputs<T extends ListFocusItem> {\n  /** The focus strategy used by the list. */\n  focusMode: Signal<'roving' | 'activedescendant'>;\n}\n\n/** Controls focus for a list of items. */\nexport class ListFocus<T extends ListFocusItem> {\n  /** The navigation controller of the parent list. */\n  navigation: ListNavigation<ListFocusItem>;\n\n  constructor(readonly inputs: ListFocusInputs<T> & {navigation: ListNavigation<T>}) {\n    this.navigation = inputs.navigation;\n  }\n\n  /** The id of the current active item. */\n  getActiveDescendant(): String | undefined {\n    if (this.inputs.focusMode() === 'roving') {\n      return undefined;\n    }\n    return this.navigation.inputs.items()[this.navigation.inputs.activeIndex()].id();\n  }\n\n  /** The tabindex for the list. */\n  getListTabindex(): -1 | 0 {\n    return this.inputs.focusMode() === 'activedescendant' ? 0 : -1;\n  }\n\n  /** Returns the tabindex for the given item. */\n  getItemTabindex(item: T): -1 | 0 {\n    if (this.inputs.focusMode() === 'activedescendant') {\n      return -1;\n    }\n    const index = this.navigation.inputs.items().indexOf(item);\n    return this.navigation.inputs.activeIndex() === index ? 0 : -1;\n  }\n\n  /** Focuses the current active item. */\n  focus() {\n    if (this.inputs.focusMode() === 'activedescendant') {\n      return;\n    }\n\n    const item = this.navigation.inputs.items()[this.navigation.inputs.activeIndex()];\n    item.element().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ModifierKey as Modifier} from '../behaviors/event-manager/event-manager';\nimport {KeyboardEventManager} from '../behaviors/event-manager/keyboard-event-manager';\nimport {PointerEventManager} from '../behaviors/event-manager/pointer-event-manager';\nimport {OptionPattern} from './option';\nimport {ListSelection, ListSelectionInputs} from '../behaviors/list-selection/list-selection';\nimport {ListTypeahead, ListTypeaheadInputs} from '../behaviors/list-typeahead/list-typeahead';\nimport {ListNavigation, ListNavigationInputs} from '../behaviors/list-navigation/list-navigation';\nimport {ListFocus, ListFocusInputs} from '../behaviors/list-focus/list-focus';\nimport {computed, Signal} from '@angular/core';\n\n/** The selection operations that the listbox can perform. */\ninterface SelectOptions {\n  select?: boolean;\n  toggle?: boolean;\n  toggleOne?: boolean;\n  selectOne?: boolean;\n  selectAll?: boolean;\n  selectFromAnchor?: boolean;\n  selectFromActive?: boolean;\n}\n\n/** Represents the required inputs for a listbox. */\nexport type ListboxInputs = ListNavigationInputs<OptionPattern> &\n  ListSelectionInputs<OptionPattern> &\n  ListTypeaheadInputs &\n  ListFocusInputs<OptionPattern> & {\n    disabled: Signal<boolean>;\n  };\n\n/** Controls the state of a listbox. */\nexport class ListboxPattern {\n  /** Controls navigation for the listbox. */\n  navigation: ListNavigation<OptionPattern>;\n\n  /** Controls selection for the listbox. */\n  selection: ListSelection<OptionPattern>;\n\n  /** Controls typeahead for the listbox. */\n  typeahead: ListTypeahead<OptionPattern>;\n\n  /** Controls focus for the listbox. */\n  focusManager: ListFocus<OptionPattern>;\n\n  /** Whether the list is vertically or horizontally oriented. */\n  orientation: Signal<'vertical' | 'horizontal'>;\n\n  /** Whether the listbox is disabled. */\n  disabled: Signal<boolean>;\n\n  /** The tabindex of the listbox. */\n  tabindex = computed(() => this.focusManager.getListTabindex());\n\n  /** The id of the current active item. */\n  activedescendant = computed(() => this.focusManager.getActiveDescendant());\n\n  /** Whether multiple items in the list can be selected at once. */\n  multiselectable: Signal<boolean>;\n\n  /** The number of items in the listbox. */\n  setsize = computed(() => this.navigation.inputs.items().length);\n\n  /** Whether the listbox selection follows focus. */\n  followFocus = computed(() => this.inputs.selectionMode() === 'follow');\n\n  /** The key used to navigate to the previous item in the list. */\n  prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next item in the list. */\n  nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The regexp used to decide if a key should trigger typeahead. */\n  typeaheadRegexp = /^.$/; // TODO: Ignore spaces?\n\n  /** The keydown event manager for the listbox. */\n  keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n\n    if (!this.followFocus()) {\n      manager\n        .on(this.prevKey, () => this.prev())\n        .on(this.nextKey, () => this.next())\n        .on('Home', () => this.first())\n        .on('End', () => this.last())\n        .on(this.typeaheadRegexp, e => this.search(e.key));\n    }\n\n    if (this.followFocus()) {\n      manager\n        .on(this.prevKey, () => this.prev({selectOne: true}))\n        .on(this.nextKey, () => this.next({selectOne: true}))\n        .on('Home', () => this.first({selectOne: true}))\n        .on('End', () => this.last({selectOne: true}))\n        .on(this.typeaheadRegexp, e => this.search(e.key, {selectOne: true}));\n    }\n\n    if (this.inputs.multiselectable()) {\n      manager\n        .on(Modifier.Shift, ' ', () => this._updateSelection({selectFromAnchor: true}))\n        .on(Modifier.Shift, 'Enter', () => this._updateSelection({selectFromAnchor: true}))\n        .on(Modifier.Shift, this.prevKey, () => this.prev({toggle: true}))\n        .on(Modifier.Shift, this.nextKey, () => this.next({toggle: true}))\n        .on(Modifier.Ctrl | Modifier.Shift, 'Home', () => this.first({selectFromActive: true}))\n        .on(Modifier.Ctrl | Modifier.Shift, 'End', () => this.last({selectFromActive: true}))\n        .on(Modifier.Ctrl, 'A', () => this._updateSelection({selectAll: true}));\n    }\n\n    if (!this.followFocus() && this.inputs.multiselectable()) {\n      manager.on(' ', () => this._updateSelection({toggle: true}));\n      manager.on('Enter', () => this._updateSelection({toggle: true}));\n    }\n\n    if (!this.followFocus() && !this.inputs.multiselectable()) {\n      manager.on(' ', () => this._updateSelection({toggleOne: true}));\n      manager.on('Enter', () => this._updateSelection({toggleOne: true}));\n    }\n\n    if (this.inputs.multiselectable() && this.followFocus()) {\n      manager\n        .on(Modifier.Ctrl, this.prevKey, () => this.prev())\n        .on(Modifier.Ctrl, this.nextKey, () => this.next())\n        .on(Modifier.Ctrl, 'Home', () => this.first()) // TODO: Not in spec but prob should be.\n        .on(Modifier.Ctrl, 'End', () => this.last()); // TODO: Not in spec but prob should be.\n    }\n\n    return manager;\n  });\n\n  /** The pointerdown event manager for the listbox. */\n  pointerdown = computed(() => {\n    const manager = new PointerEventManager();\n\n    if (this.inputs.multiselectable()) {\n      manager\n        .on(e => this.goto(e, {toggle: true}))\n        .on(Modifier.Shift, e => this.goto(e, {selectFromActive: true}));\n    } else {\n      manager.on(e => this.goto(e, {toggleOne: true}));\n    }\n\n    return manager;\n  });\n\n  constructor(readonly inputs: ListboxInputs) {\n    this.disabled = inputs.disabled;\n    this.orientation = inputs.orientation;\n    this.multiselectable = inputs.multiselectable;\n\n    this.navigation = new ListNavigation(inputs);\n    this.selection = new ListSelection({...inputs, navigation: this.navigation});\n    this.typeahead = new ListTypeahead({...inputs, navigation: this.navigation});\n    this.focusManager = new ListFocus({...inputs, navigation: this.navigation});\n  }\n\n  /** Handles keydown events for the listbox. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /** Navigates to the first option in the listbox. */\n  first(opts?: SelectOptions) {\n    this.navigation.first();\n    this.focusManager.focus();\n    this._updateSelection(opts);\n  }\n\n  /** Navigates to the last option in the listbox. */\n  last(opts?: SelectOptions) {\n    this.navigation.last();\n    this.focusManager.focus();\n    this._updateSelection(opts);\n  }\n\n  /** Navigates to the next option in the listbox. */\n  next(opts?: SelectOptions) {\n    this.navigation.next();\n    this.focusManager.focus();\n    this._updateSelection(opts);\n  }\n\n  /** Navigates to the previous option in the listbox. */\n  prev(opts?: SelectOptions) {\n    this.navigation.prev();\n    this.focusManager.focus();\n    this._updateSelection(opts);\n  }\n\n  /** Navigates to the given item in the listbox. */\n  goto(event: PointerEvent, opts?: SelectOptions) {\n    const item = this._getItem(event);\n\n    if (item) {\n      this.navigation.goto(item);\n      this.focusManager.focus();\n      this._updateSelection(opts);\n    }\n  }\n\n  /** Handles typeahead search navigation for the listbox. */\n  search(char: string, opts?: SelectOptions) {\n    this.typeahead.search(char);\n    this.focusManager.focus();\n    this._updateSelection(opts);\n  }\n\n  /** Handles updating selection for the listbox. */\n  private _updateSelection(opts?: SelectOptions) {\n    if (opts?.select) {\n      this.selection.select();\n    }\n    if (opts?.toggle) {\n      this.selection.toggle();\n    }\n    if (opts?.toggleOne) {\n      this.selection.toggleOne();\n    }\n    if (opts?.selectOne) {\n      this.selection.selectOne();\n    }\n    if (opts?.selectAll) {\n      this.selection.selectAll();\n    }\n    if (opts?.selectFromAnchor) {\n      this.selection.selectFromPrevSelectedItem();\n    }\n    if (opts?.selectFromActive) {\n      this.selection.selectFromActive();\n    }\n  }\n\n  private _getItem(e: PointerEvent) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const element = e.target.closest('[cdkoption]'); // TODO: Use a different identifier.\n    return this.inputs.items().find(i => i.element() === element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, Signal} from '@angular/core';\nimport {ListSelection, ListSelectionItem} from '../behaviors/list-selection/list-selection';\nimport {ListTypeaheadItem} from '../behaviors/list-typeahead/list-typeahead';\nimport {ListNavigation, ListNavigationItem} from '../behaviors/list-navigation/list-navigation';\nimport {ListFocus, ListFocusItem} from '../behaviors/list-focus/list-focus';\n\n/**\n * Represents the properties exposed by a listbox that need to be accessed by an option.\n * This exists to avoid circular dependency errors between the listbox and option.\n */\ninterface ListboxPattern {\n  focusManager: ListFocus<OptionPattern>;\n  selection: ListSelection<OptionPattern>;\n  navigation: ListNavigation<OptionPattern>;\n}\n\n/** Represents the required inputs for an option in a listbox. */\nexport interface OptionInputs\n  extends ListNavigationItem,\n    ListSelectionItem,\n    ListTypeaheadItem,\n    ListFocusItem {\n  listbox: Signal<ListboxPattern>;\n}\n\n/** Represents an option in a listbox. */\nexport class OptionPattern {\n  /** A unique identifier for the option. */\n  id: Signal<string>;\n\n  /** The position of the option in the list. */\n  index = computed(\n    () =>\n      this.listbox()\n        .navigation.inputs.items()\n        .findIndex(i => i.id() === this.id()) ?? -1,\n  );\n\n  /** Whether the option is selected. */\n  selected = computed(() => this.listbox().selection.inputs.selectedIds().includes(this.id()));\n\n  /** Whether the option is disabled. */\n  disabled: Signal<boolean>;\n\n  /** The text used by the typeahead search. */\n  searchTerm: Signal<string>;\n\n  /** A reference to the parent listbox. */\n  listbox: Signal<ListboxPattern>;\n\n  /** The tabindex of the option. */\n  tabindex = computed(() => this.listbox().focusManager.getItemTabindex(this));\n\n  /** The html element that should receive focus. */\n  element: Signal<HTMLElement>;\n\n  constructor(args: OptionInputs) {\n    this.id = args.id;\n    this.listbox = args.listbox;\n    this.element = args.element;\n    this.disabled = args.disabled;\n    this.searchTerm = args.searchTerm;\n  }\n}\n"],"names":["Modifier"],"mappings":"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"}