{"version":3,"file":"list-focus-P6xynDMg.mjs","sources":["../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/event-manager/event-manager.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/event-manager/keyboard-event-manager.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/event-manager/pointer-event-manager.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/list-selection/list-selection.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/list-navigation/list-navigation.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/list-focus/list-focus.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * An event that supports modifier keys.\n *\n * Matches the native KeyboardEvent, MouseEvent, and TouchEvent.\n */\nexport interface EventWithModifiers extends Event {\n  ctrlKey: boolean;\n  shiftKey: boolean;\n  altKey: boolean;\n  metaKey: boolean;\n}\n\n/**\n * Options that are applicable to all event handlers.\n *\n * This library has not yet had a need for stopPropagationImmediate.\n */\nexport interface EventHandlerOptions {\n  stopPropagation: boolean;\n  preventDefault: boolean;\n}\n\n/** A basic event handler. */\nexport type EventHandler<T extends Event> = (event: T) => void;\n\n/** A function that determines whether an event is to be handled. */\nexport type EventMatcher<T extends Event> = (event: T) => boolean;\n\n/** A config that specifies how to handle a particular event. */\nexport interface EventHandlerConfig<T extends Event> extends EventHandlerOptions {\n  matcher: EventMatcher<T>;\n  handler: EventHandler<T>;\n}\n\n/** Bit flag representation of the possible modifier keys that can be present on an event. */\nexport enum ModifierKey {\n  None = 0,\n  Ctrl = 0b1,\n  Shift = 0b10,\n  Alt = 0b100,\n  Meta = 0b1000,\n  Any = 'Any',\n}\n\nexport type ModifierInputs = ModifierKey | ModifierKey[];\n\n/**\n * Abstract base class for all event managers.\n *\n * Event managers are designed to normalize how event handlers are authored and create a safety net\n * for common event handling gotchas like remembering to call preventDefault or stopPropagation.\n */\nexport abstract class EventManager<T extends Event> {\n  protected configs: EventHandlerConfig<T>[] = [];\n  abstract options: EventHandlerOptions;\n\n  /** Runs the handlers that match with the given event. */\n  handle(event: T): void {\n    for (const config of this.configs) {\n      if (config.matcher(event)) {\n        config.handler(event);\n\n        if (config.preventDefault) {\n          event.preventDefault();\n        }\n\n        if (config.stopPropagation) {\n          event.stopPropagation();\n        }\n      }\n    }\n  }\n\n  /** Configures the event manager to handle specific events. (See subclasses for more). */\n  abstract on(...args: [...unknown[]]): this;\n}\n\n/** Gets bit flag representation of the modifier keys present on the given event. */\nexport function getModifiers(event: EventWithModifiers): number {\n  return (\n    (+event.ctrlKey && ModifierKey.Ctrl) |\n    (+event.shiftKey && ModifierKey.Shift) |\n    (+event.altKey && ModifierKey.Alt) |\n    (+event.metaKey && ModifierKey.Meta)\n  );\n}\n\n/**\n * Checks if the given event has modifiers that are an exact match for any of the given modifier\n * flag combinations.\n */\nexport function hasModifiers(event: EventWithModifiers, modifiers: ModifierInputs): boolean {\n  const eventModifiers = getModifiers(event);\n  const modifiersList = Array.isArray(modifiers) ? modifiers : [modifiers];\n\n  if (modifiersList.includes(ModifierKey.Any)) {\n    return true;\n  }\n\n  return modifiersList.some(modifiers => eventModifiers === modifiers);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SignalLike} from '../signal-like/signal-like';\nimport {\n  EventHandler,\n  EventHandlerOptions,\n  EventManager,\n  hasModifiers,\n  ModifierInputs,\n  ModifierKey,\n} from './event-manager';\n\n/**\n * Used to represent a keycode.\n *\n * This is used to match whether an events keycode should be handled. The ability to match using a\n * string, SignalLike, or Regexp gives us more flexibility when authoring event handlers.\n */\ntype KeyCode = string | SignalLike<string> | RegExp;\n\n/**\n * An event manager that is specialized for handling keyboard events. By default this manager stops\n * propagation and prevents default on all events it handles.\n */\nexport class KeyboardEventManager<T extends KeyboardEvent> extends EventManager<T> {\n  options: EventHandlerOptions = {\n    preventDefault: true,\n    stopPropagation: true,\n  };\n\n  /** Configures this event manager to handle events with a specific key and no modifiers. */\n  on(key: KeyCode, handler: EventHandler<T>): this;\n\n  /**  Configures this event manager to handle events with a specific modifer and key combination. */\n  on(modifiers: ModifierInputs, key: KeyCode, handler: EventHandler<T>): this;\n\n  on(...args: any[]) {\n    const {modifiers, key, handler} = this._normalizeInputs(...args);\n\n    this.configs.push({\n      handler: handler,\n      matcher: event => this._isMatch(event, key, modifiers),\n      ...this.options,\n    });\n\n    return this;\n  }\n\n  private _normalizeInputs(...args: any[]) {\n    const key = args.length === 3 ? args[1] : args[0];\n    const handler = args.length === 3 ? args[2] : args[1];\n    const modifiers = args.length === 3 ? args[0] : ModifierKey.None;\n\n    return {\n      key: key as KeyCode,\n      handler: handler as EventHandler<T>,\n      modifiers: modifiers as ModifierInputs,\n    };\n  }\n\n  private _isMatch(event: T, key: KeyCode, modifiers: ModifierInputs) {\n    if (!hasModifiers(event, modifiers)) {\n      return false;\n    }\n\n    if (key instanceof RegExp) {\n      return key.test(event.key);\n    }\n\n    const keyStr = typeof key === 'string' ? key : key();\n    return keyStr.toLowerCase() === event.key.toLowerCase();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  EventHandler,\n  EventHandlerOptions,\n  EventManager,\n  hasModifiers,\n  ModifierInputs,\n  ModifierKey,\n} from './event-manager';\n\n/**\n * The different mouse buttons that may appear on a pointer event.\n */\nexport enum MouseButton {\n  Main = 0,\n  Auxiliary = 1,\n  Secondary = 2,\n}\n\n/** An event manager that is specialized for handling pointer events. */\nexport class PointerEventManager<T extends PointerEvent> extends EventManager<T> {\n  options: EventHandlerOptions = {\n    preventDefault: false,\n    stopPropagation: false,\n  };\n\n  /**\n   * Configures this event manager to handle events with a specific modifer and mouse button\n   * combination.\n   */\n  on(button: MouseButton, modifiers: ModifierInputs, handler: EventHandler<T>): this;\n\n  /**\n   * Configures this event manager to handle events with a specific mouse button and no modifiers.\n   */\n  on(modifiers: ModifierInputs, handler: EventHandler<T>): this;\n\n  /**\n   * Configures this event manager to handle events with the main mouse button and no modifiers.\n   *\n   * @param handler The handler function\n   * @param options Options for whether to stop propagation or prevent default.\n   */\n  on(handler: EventHandler<T>): this;\n\n  on(...args: any[]) {\n    const {button, handler, modifiers} = this._normalizeInputs(...args);\n\n    this.configs.push({\n      handler,\n      matcher: event => this._isMatch(event, button, modifiers),\n      ...this.options,\n    });\n    return this;\n  }\n\n  private _normalizeInputs(...args: any[]) {\n    if (args.length === 3) {\n      return {\n        button: args[0] as MouseButton,\n        modifiers: args[1] as ModifierInputs,\n        handler: args[2] as EventHandler<T>,\n      };\n    }\n\n    if (typeof args[0] === 'number' && typeof args[1] === 'function') {\n      return {\n        button: MouseButton.Main,\n        modifiers: args[0] as ModifierInputs,\n        handler: args[1] as EventHandler<T>,\n      };\n    }\n\n    return {\n      button: MouseButton.Main,\n      modifiers: ModifierKey.None,\n      handler: args[0] as EventHandler<T>,\n    };\n  }\n\n  _isMatch(event: PointerEvent, button: MouseButton, modifiers: ModifierInputs) {\n    return button === (event.button ?? 0) && hasModifiers(event, modifiers);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../signal-like/signal-like';\nimport {ListNavigation, ListNavigationItem} from '../list-navigation/list-navigation';\n\n/** Represents an item in a collection, such as a listbox option, than can be selected. */\nexport interface ListSelectionItem<V> extends ListNavigationItem {\n  /** The value of the item. */\n  value: SignalLike<V>;\n\n  /** Whether an item is disabled. */\n  disabled: SignalLike<boolean>;\n}\n\n/** Represents the required inputs for a collection that contains selectable items. */\nexport interface ListSelectionInputs<T extends ListSelectionItem<V>, V> {\n  /** The items in the list. */\n  items: SignalLike<T[]>;\n\n  /** Whether multiple items in the list can be selected at once. */\n  multi: SignalLike<boolean>;\n\n  /** The current value of the list selection. */\n  value: WritableSignalLike<V[]>;\n\n  /** The selection strategy used by the list. */\n  selectionMode: SignalLike<'follow' | 'explicit'>;\n}\n\n/** Controls selection for a list of items. */\nexport class ListSelection<T extends ListSelectionItem<V>, V> {\n  /** The start index to use for range selection. */\n  rangeStartIndex = signal<number>(0);\n\n  /** The end index to use for range selection. */\n  rangeEndIndex = signal<number>(0);\n\n  /** The navigation controller of the parent list. */\n  navigation: ListNavigation<T>;\n\n  constructor(readonly inputs: ListSelectionInputs<T, V> & {navigation: ListNavigation<T>}) {\n    this.navigation = inputs.navigation;\n  }\n\n  /** Selects the item at the current active index. */\n  select(item?: T, opts = {anchor: true}) {\n    item = item ?? this.inputs.navigation.activeItem();\n\n    if (item.disabled() || this.inputs.value().includes(item.value())) {\n      return;\n    }\n\n    if (!this.inputs.multi()) {\n      this.deselectAll();\n    }\n\n    const index = this.inputs.items().findIndex(i => i === item);\n    if (opts.anchor) {\n      this.beginRangeSelection(index);\n    }\n    this.inputs.value.update(values => values.concat(item.value()));\n  }\n\n  /** Deselects the item at the current active index. */\n  deselect(item?: T) {\n    item = item ?? this.inputs.navigation.activeItem();\n\n    if (!item.disabled()) {\n      this.inputs.value.update(values => values.filter(value => value !== item.value()));\n    }\n  }\n\n  /** Toggles the item at the current active index. */\n  toggle() {\n    const item = this.inputs.navigation.activeItem();\n    this.inputs.value().includes(item.value()) ? this.deselect() : this.select();\n  }\n\n  /** Toggles only the item at the current active index. */\n  toggleOne() {\n    const item = this.inputs.navigation.activeItem();\n    this.inputs.value().includes(item.value()) ? this.deselect() : this.selectOne();\n  }\n\n  /** Selects all items in the list. */\n  selectAll() {\n    if (!this.inputs.multi()) {\n      return; // Should we log a warning?\n    }\n\n    for (const item of this.inputs.items()) {\n      this.select(item, {anchor: false});\n    }\n\n    this.beginRangeSelection();\n  }\n\n  /** Deselects all items in the list. */\n  deselectAll() {\n    for (const item of this.inputs.items()) {\n      this.deselect(item);\n    }\n  }\n\n  /**\n   * Selects all items in the list or deselects all\n   * items in the list if all items are already selected.\n   */\n  toggleAll() {\n    const selectableValues = this.inputs\n      .items()\n      .filter(i => !i.disabled())\n      .map(i => i.value());\n\n    selectableValues.every(i => this.inputs.value().includes(i))\n      ? this.deselectAll()\n      : this.selectAll();\n  }\n\n  /** Sets the selection to only the current active item. */\n  selectOne() {\n    this.deselectAll();\n    this.select();\n  }\n\n  /**\n   * Selects all items in the list up to the anchor item.\n   *\n   * Deselects all items that were previously within the\n   * selected range that are now outside of the selected range\n   */\n  selectRange(opts = {anchor: true}) {\n    const isStartOfRange = this.navigation.prevActiveIndex() === this.rangeStartIndex();\n\n    if (isStartOfRange && opts.anchor) {\n      this.beginRangeSelection(this.navigation.prevActiveIndex());\n    }\n\n    const itemsInRange = this._getItemsFromIndex(this.rangeStartIndex());\n    const itemsOutOfRange = this._getItemsFromIndex(this.rangeEndIndex()).filter(\n      i => !itemsInRange.includes(i),\n    );\n\n    for (const item of itemsOutOfRange) {\n      this.deselect(item);\n    }\n\n    for (const item of itemsInRange) {\n      this.select(item, {anchor: false});\n    }\n\n    if (itemsInRange.length) {\n      const item = itemsInRange.pop();\n      const index = this.inputs.items().findIndex(i => i === item);\n      this.rangeEndIndex.set(index);\n    }\n  }\n\n  /** Marks the given index as the start of a range selection. */\n  beginRangeSelection(index: number = this.navigation.inputs.activeIndex()) {\n    this.rangeStartIndex.set(index);\n    this.rangeEndIndex.set(index);\n  }\n\n  /** Returns the items in the list starting from the given index.  */\n  private _getItemsFromIndex(index: number) {\n    if (index === -1) {\n      return [];\n    }\n\n    const upper = Math.max(this.inputs.navigation.inputs.activeIndex(), index);\n    const lower = Math.min(this.inputs.navigation.inputs.activeIndex(), index);\n\n    const items = [];\n    for (let i = lower; i <= upper; i++) {\n      items.push(this.inputs.items()[i]);\n    }\n\n    if (this.inputs.navigation.inputs.activeIndex() < index) {\n      return items.reverse();\n    }\n\n    return items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../signal-like/signal-like';\n\n/** Represents an item in a collection, such as a listbox option, than can be navigated to. */\nexport interface ListNavigationItem {\n  /** Whether an item is disabled. */\n  disabled: SignalLike<boolean>;\n}\n\n/** Represents the required inputs for a collection that has navigable items. */\nexport interface ListNavigationInputs<T extends ListNavigationItem> {\n  /** Whether focus should wrap when navigating. */\n  wrap: SignalLike<boolean>;\n\n  /** The items in the list. */\n  items: SignalLike<T[]>;\n\n  /** Whether disabled items in the list should be skipped when navigating. */\n  skipDisabled: SignalLike<boolean>;\n\n  /** The current index that has been navigated to. */\n  activeIndex: WritableSignalLike<number>;\n\n  /** Whether the list is vertically or horizontally oriented. */\n  orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** The direction that text is read based on the users locale. */\n  textDirection: SignalLike<'rtl' | 'ltr'>;\n}\n\n/** Controls navigation for a list of items. */\nexport class ListNavigation<T extends ListNavigationItem> {\n  /** The last index that was active. */\n  prevActiveIndex = signal(0);\n\n  /** The current active item. */\n  activeItem = computed(() => this.inputs.items()[this.inputs.activeIndex()]);\n\n  constructor(readonly inputs: ListNavigationInputs<T>) {}\n\n  /** Navigates to the given item. */\n  goto(item?: T): boolean {\n    if (item && this.isFocusable(item)) {\n      this.prevActiveIndex.set(this.inputs.activeIndex());\n      const index = this.inputs.items().indexOf(item);\n      this.inputs.activeIndex.set(index);\n      return true;\n    }\n    return false;\n  }\n\n  /** Navigates to the next item in the list. */\n  next(): boolean {\n    return this._advance(1);\n  }\n\n  /** Navigates to the previous item in the list. */\n  prev(): boolean {\n    return this._advance(-1);\n  }\n\n  /** Navigates to the first item in the list. */\n  first(): boolean {\n    const item = this.inputs.items().find(i => this.isFocusable(i));\n    return item ? this.goto(item) : false;\n  }\n\n  /** Navigates to the last item in the list. */\n  last(): boolean {\n    const items = this.inputs.items();\n    for (let i = items.length - 1; i >= 0; i--) {\n      if (this.isFocusable(items[i])) {\n        return this.goto(items[i]);\n      }\n    }\n    return false;\n  }\n\n  /** Returns true if the given item can be navigated to. */\n  isFocusable(item: T): boolean {\n    return !item.disabled() || !this.inputs.skipDisabled();\n  }\n\n  /** Advances to the next or previous focusable item in the list based on the given delta. */\n  private _advance(delta: 1 | -1): boolean {\n    const items = this.inputs.items();\n    const itemCount = items.length;\n    const startIndex = this.inputs.activeIndex();\n    const step = (i: number) =>\n      this.inputs.wrap() ? (i + delta + itemCount) % itemCount : i + delta;\n\n    // If wrapping is enabled, this loop ultimately terminates when `i` gets back to `startIndex`\n    // in the case that all options are disabled. If wrapping is disabled, the loop terminates\n    // when the index goes out of bounds.\n    for (let i = step(startIndex); i !== startIndex && i < itemCount && i >= 0; i = step(i)) {\n      if (this.isFocusable(items[i])) {\n        return this.goto(items[i]);\n      }\n    }\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SignalLike} from '../signal-like/signal-like';\nimport {ListNavigation, ListNavigationItem} from '../list-navigation/list-navigation';\n\n/** Represents an item in a collection, such as a listbox option, than may receive focus. */\nexport interface ListFocusItem extends ListNavigationItem {\n  /** A unique identifier for the item. */\n  id: SignalLike<string>;\n\n  /** The html element that should receive focus. */\n  element: SignalLike<HTMLElement>;\n}\n\n/** Represents the required inputs for a collection that contains focusable items. */\nexport interface ListFocusInputs<T extends ListFocusItem> {\n  /** The focus strategy used by the list. */\n  focusMode: SignalLike<'roving' | 'activedescendant'>;\n}\n\n/** Controls focus for a list of items. */\nexport class ListFocus<T extends ListFocusItem> {\n  /** The navigation controller of the parent list. */\n  navigation: ListNavigation<ListFocusItem>;\n\n  constructor(readonly inputs: ListFocusInputs<T> & {navigation: ListNavigation<T>}) {\n    this.navigation = inputs.navigation;\n  }\n\n  /** The id of the current active item. */\n  getActiveDescendant(): string | undefined {\n    if (this.inputs.focusMode() === 'roving') {\n      return undefined;\n    }\n    if (this.navigation.inputs.items().length) {\n      return this.navigation.inputs.items()[this.navigation.inputs.activeIndex()].id();\n    }\n    return undefined;\n  }\n\n  /** The tabindex for the list. */\n  getListTabindex(): -1 | 0 {\n    return this.inputs.focusMode() === 'activedescendant' ? 0 : -1;\n  }\n\n  /** Returns the tabindex for the given item. */\n  getItemTabindex(item: T): -1 | 0 {\n    if (this.inputs.focusMode() === 'activedescendant') {\n      return -1;\n    }\n    const index = this.navigation.inputs.items().indexOf(item);\n    return this.navigation.inputs.activeIndex() === index ? 0 : -1;\n  }\n\n  /** Focuses the current active item. */\n  focus() {\n    if (this.inputs.focusMode() === 'activedescendant') {\n      return;\n    }\n\n    const item = this.navigation.inputs.items()[this.navigation.inputs.activeIndex()];\n    item.element().focus();\n  }\n}\n"],"names":[],"mappings":"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"}