{"version":3,"file":"_accordion-chunk.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/ui-patterns/accordion/accordion.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {\n  ExpansionItem,\n  ExpansionControl,\n  ListExpansion,\n  ListExpansionInputs,\n} from '../behaviors/expansion/expansion';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../behaviors/list-focus/list-focus';\nimport {\n  ListNavigation,\n  ListNavigationInputs,\n  ListNavigationItem,\n} from '../behaviors/list-navigation/list-navigation';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\n\n/** Inputs of the AccordionGroupPattern. */\nexport type AccordionGroupInputs = Omit<\n  ListNavigationInputs<AccordionTriggerPattern> &\n    ListFocusInputs<AccordionTriggerPattern> &\n    Omit<ListExpansionInputs, 'items'>,\n  'focusMode'\n>;\n\nconst focusMode = () => 'roving' as const;\n\nexport interface AccordionGroupPattern extends AccordionGroupInputs {}\n/** A pattern controls the nested Accordions. */\nexport class AccordionGroupPattern {\n  /** Controls navigation for the group. */\n  navigation: ListNavigation<AccordionTriggerPattern>;\n\n  /** Controls focus for the group. */\n  focusManager: ListFocus<AccordionTriggerPattern>;\n\n  /** Controls expansion for the group. */\n  expansionManager: ListExpansion;\n\n  constructor(readonly inputs: AccordionGroupInputs) {\n    this.wrap = inputs.wrap;\n    this.orientation = inputs.orientation;\n    this.textDirection = inputs.textDirection;\n    this.activeItem = inputs.activeItem;\n    this.disabled = inputs.disabled;\n    this.multiExpandable = inputs.multiExpandable;\n    this.items = inputs.items;\n    this.expandedIds = inputs.expandedIds;\n    this.skipDisabled = inputs.skipDisabled;\n    this.focusManager = new ListFocus({\n      ...inputs,\n      focusMode,\n    });\n    this.navigation = new ListNavigation({\n      ...inputs,\n      focusMode,\n      focusManager: this.focusManager,\n    });\n    this.expansionManager = new ListExpansion({\n      ...inputs,\n    });\n  }\n}\n\n/** Inputs for the AccordionTriggerPattern. */\nexport type AccordionTriggerInputs = Omit<ListNavigationItem & ListFocusItem, 'index'> &\n  Omit<ExpansionItem, 'expansionId' | 'expandable'> & {\n    /** A local unique identifier for the trigger. */\n    value: SignalLike<string>;\n\n    /** The parent accordion group that controls this trigger. */\n    accordionGroup: SignalLike<AccordionGroupPattern>;\n\n    /** The accordion panel controlled by this trigger. */\n    accordionPanel: SignalLike<AccordionPanelPattern | undefined>;\n  };\n\nexport interface AccordionTriggerPattern extends AccordionTriggerInputs {}\n/** A pattern controls the expansion state of an accordion. */\nexport class AccordionTriggerPattern {\n  /** Whether this tab has expandable content. */\n  expandable: SignalLike<boolean>;\n\n  /** The unique identifier used by the expansion behavior. */\n  expansionId: SignalLike<string>;\n\n  /** Whether an accordion is expanded. */\n  expanded: SignalLike<boolean>;\n\n  /** Controls the expansion state for the trigger. */\n  expansionControl: ExpansionControl;\n\n  /** Whether the trigger is active. */\n  active = computed(() => this.inputs.accordionGroup().activeItem() === this);\n\n  /** Id of the accordion panel controlled by the trigger. */\n  controls = computed(() => this.inputs.accordionPanel()?.id());\n\n  /** The tabindex of the trigger. */\n  tabindex = computed(() => (this.inputs.accordionGroup().focusManager.isFocusable(this) ? 0 : -1));\n\n  /** Whether the trigger is disabled. Disabling an accordion group disables all the triggers. */\n  disabled = computed(() => this.inputs.disabled() || this.inputs.accordionGroup().disabled());\n\n  /** The index of the trigger within its accordion group. */\n  index = computed(() => this.inputs.accordionGroup().items().indexOf(this));\n\n  constructor(readonly inputs: AccordionTriggerInputs) {\n    this.id = inputs.id;\n    this.element = inputs.element;\n    this.value = inputs.value;\n    this.accordionGroup = inputs.accordionGroup;\n    this.accordionPanel = inputs.accordionPanel;\n    this.expansionControl = new ExpansionControl({\n      ...inputs,\n      expansionId: inputs.value,\n      expandable: () => true,\n      expansionManager: inputs.accordionGroup().expansionManager,\n    });\n    this.expandable = this.expansionControl.isExpandable;\n    this.expansionId = this.expansionControl.expansionId;\n    this.expanded = this.expansionControl.isExpanded;\n  }\n\n  /** The key used to navigate to the previous accordion trigger. */\n  prevKey = computed(() => {\n    if (this.inputs.accordionGroup().orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.accordionGroup().textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next accordion trigger. */\n  nextKey = computed(() => {\n    if (this.inputs.accordionGroup().orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.accordionGroup().textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The keydown event manager for the accordion trigger. */\n  keydown = computed(() => {\n    return new KeyboardEventManager()\n      .on(this.prevKey, () => this.accordionGroup().navigation.prev())\n      .on(this.nextKey, () => this.accordionGroup().navigation.next())\n      .on('Home', () => this.accordionGroup().navigation.first())\n      .on('End', () => this.accordionGroup().navigation.last())\n      .on(' ', () => this.expansionControl.toggle())\n      .on('Enter', () => this.expansionControl.toggle());\n  });\n\n  /** The pointerdown event manager for the accordion trigger. */\n  pointerdown = computed(() => {\n    return new PointerEventManager().on(e => {\n      const item = this._getItem(e);\n\n      if (item) {\n        this.accordionGroup().navigation.goto(item);\n        this.expansionControl.toggle();\n      }\n    });\n  });\n\n  /** Handles keydown events on the trigger, delegating to the group if not disabled. */\n  onKeydown(event: KeyboardEvent): void {\n    this.keydown().handle(event);\n  }\n\n  /** Handles pointerdown events on the trigger, delegating to the group if not disabled. */\n  onPointerdown(event: PointerEvent): void {\n    this.pointerdown().handle(event);\n  }\n\n  /** Handles focus events on the trigger. This ensures the tabbing changes the active index. */\n  onFocus(event: FocusEvent): void {\n    const item = this._getItem(event);\n\n    if (item && this.inputs.accordionGroup().focusManager.isFocusable(item)) {\n      this.accordionGroup().focusManager.focus(item);\n    }\n  }\n\n  private _getItem(e: Event) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const element = e.target.closest('[role=\"button\"]');\n    return this.accordionGroup()\n      .items()\n      .find(i => i.element() === element);\n  }\n}\n\n/** Represents the required inputs for the AccordionPanelPattern. */\nexport interface AccordionPanelInputs {\n  /** A global unique identifier for the panel. */\n  id: SignalLike<string>;\n\n  /** A local unique identifier for the panel, matching its trigger's value. */\n  value: SignalLike<string>;\n\n  /** The parent accordion trigger that controls this panel. */\n  accordionTrigger: SignalLike<AccordionTriggerPattern | undefined>;\n}\n\nexport interface AccordionPanelPattern extends AccordionPanelInputs {}\n/** Represents an accordion panel. */\nexport class AccordionPanelPattern {\n  /** Whether the accordion panel is hidden. True if the associated trigger is not expanded. */\n  hidden: SignalLike<boolean>;\n\n  constructor(readonly inputs: AccordionPanelInputs) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.accordionTrigger = inputs.accordionTrigger;\n    this.hidden = computed(() => inputs.accordionTrigger()?.expanded() === false);\n  }\n}\n"],"names":[],"mappings":";;;;;AAgCA,MAAM,SAAS,GAAG,MAAM,QAAiB;AAGzC;MACa,qBAAqB,CAAA;AAUX,IAAA,MAAA;;AARrB,IAAA,UAAU;;AAGV,IAAA,YAAY;;AAGZ,IAAA,gBAAgB;AAEhB,IAAA,WAAA,CAAqB,MAA4B,EAAA;QAA5B,IAAM,CAAA,MAAA,GAAN,MAAM;AACzB,QAAA,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;AACvB,QAAA,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW;AACrC,QAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa;AACzC,QAAA,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU;AACnC,QAAA,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ;AAC/B,QAAA,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe;AAC7C,QAAA,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK;AACzB,QAAA,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW;AACrC,QAAA,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY;AACvC,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,SAAS,CAAC;AAChC,YAAA,GAAG,MAAM;YACT,SAAS;AACV,SAAA,CAAC;AACF,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,cAAc,CAAC;AACnC,YAAA,GAAG,MAAM;YACT,SAAS;YACT,YAAY,EAAE,IAAI,CAAC,YAAY;AAChC,SAAA,CAAC;AACF,QAAA,IAAI,CAAC,gBAAgB,GAAG,IAAI,aAAa,CAAC;AACxC,YAAA,GAAG,MAAM;AACV,SAAA,CAAC;;AAEL;AAgBD;MACa,uBAAuB,CAAA;AA4Bb,IAAA,MAAA;;AA1BrB,IAAA,UAAU;;AAGV,IAAA,WAAW;;AAGX,IAAA,QAAQ;;AAGR,IAAA,gBAAgB;;AAGhB,IAAA,MAAM,GAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,CAAC;;AAG3E,IAAA,QAAQ,GAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE,EAAE,EAAE,CAAC;;AAG7D,IAAA,QAAQ,GAAG,QAAQ,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAGjG,QAAQ,GAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,QAAQ,EAAE,CAAC;;IAG5F,KAAK,GAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAE1E,IAAA,WAAA,CAAqB,MAA8B,EAAA;QAA9B,IAAM,CAAA,MAAA,GAAN,MAAM;AACzB,QAAA,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE;AACnB,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;AAC7B,QAAA,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK;AACzB,QAAA,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc;AAC3C,QAAA,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc;AAC3C,QAAA,IAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC;AAC3C,YAAA,GAAG,MAAM;YACT,WAAW,EAAE,MAAM,CAAC,KAAK;AACzB,YAAA,UAAU,EAAE,MAAM,IAAI;AACtB,YAAA,gBAAgB,EAAE,MAAM,CAAC,cAAc,EAAE,CAAC,gBAAgB;AAC3D,SAAA,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY;QACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW;QACpD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU;;;AAIlD,IAAA,OAAO,GAAG,QAAQ,CAAC,MAAK;AACtB,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,WAAW,EAAE,KAAK,UAAU,EAAE;AAC7D,YAAA,OAAO,SAAS;;AAElB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,aAAa,EAAE,KAAK,KAAK,GAAG,YAAY,GAAG,WAAW;AAC5F,KAAC,CAAC;;AAGF,IAAA,OAAO,GAAG,QAAQ,CAAC,MAAK;AACtB,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,WAAW,EAAE,KAAK,UAAU,EAAE;AAC7D,YAAA,OAAO,WAAW;;AAEpB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,aAAa,EAAE,KAAK,KAAK,GAAG,WAAW,GAAG,YAAY;AAC5F,KAAC,CAAC;;AAGF,IAAA,OAAO,GAAG,QAAQ,CAAC,MAAK;QACtB,OAAO,IAAI,oBAAoB;AAC5B,aAAA,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE;AAC9D,aAAA,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE;AAC9D,aAAA,EAAE,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE;AACzD,aAAA,EAAE,CAAC,KAAK,EAAE,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE;AACvD,aAAA,EAAE,CAAC,GAAG,EAAE,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;AAC5C,aAAA,EAAE,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;AACtD,KAAC,CAAC;;AAGF,IAAA,WAAW,GAAG,QAAQ,CAAC,MAAK;QAC1B,OAAO,IAAI,mBAAmB,EAAE,CAAC,EAAE,CAAC,CAAC,IAAG;YACtC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAE7B,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,cAAc,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;AAC3C,gBAAA,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;;AAElC,SAAC,CAAC;AACJ,KAAC,CAAC;;AAGF,IAAA,SAAS,CAAC,KAAoB,EAAA;QAC5B,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;;;AAI9B,IAAA,aAAa,CAAC,KAAmB,EAAA;QAC/B,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;;;AAIlC,IAAA,OAAO,CAAC,KAAiB,EAAA;QACvB,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;AAEjC,QAAA,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;YACvE,IAAI,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;;;AAI1C,IAAA,QAAQ,CAAC,CAAQ,EAAA;QACvB,IAAI,EAAE,CAAC,CAAC,MAAM,YAAY,WAAW,CAAC,EAAE;YACtC;;QAGF,MAAM,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC;QACnD,OAAO,IAAI,CAAC,cAAc;AACvB,aAAA,KAAK;AACL,aAAA,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,KAAK,OAAO,CAAC;;AAExC;AAeD;MACa,qBAAqB,CAAA;AAIX,IAAA,MAAA;;AAFrB,IAAA,MAAM;AAEN,IAAA,WAAA,CAAqB,MAA4B,EAAA;QAA5B,IAAM,CAAA,MAAA,GAAN,MAAM;AACzB,QAAA,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE;AACnB,QAAA,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK;AACzB,QAAA,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB;AAC/C,QAAA,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,MAAM,CAAC,gBAAgB,EAAE,EAAE,QAAQ,EAAE,KAAK,KAAK,CAAC;;AAEhF;;;;"}