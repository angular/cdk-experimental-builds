{"version":3,"file":"option-BMjCFPaL.mjs","sources":["../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/list-typeahead/list-typeahead.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/listbox/listbox.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/listbox/option.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../signal-like/signal-like';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\n\n/**\n * Represents an item in a collection, such as a listbox option, than can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadItem extends ListFocusItem {\n  /** The text used by the typeahead search. */\n  searchTerm: SignalLike<string>;\n}\n\n/**\n * Represents the required inputs for a collection that contains items that can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadInputs<T extends ListTypeaheadItem> extends ListFocusInputs<T> {\n  /** The amount of time before the typeahead search is reset. */\n  typeaheadDelay: SignalLike<number>;\n}\n\n/** Controls typeahead for a list of items. */\nexport class ListTypeahead<T extends ListTypeaheadItem> {\n  /** A reference to the timeout for resetting the typeahead search. */\n  timeout?: ReturnType<typeof setTimeout> | undefined;\n\n  /** The focus controller of the parent list. */\n  focusManager: ListFocus<T>;\n\n  /** Whether the user is actively typing a typeahead search query. */\n  isTyping = computed(() => this._query().length > 0);\n\n  /** Keeps track of the characters that typeahead search is being called with. */\n  private _query = signal('');\n\n  /** The index where that the typeahead search was initiated from. */\n  private _startIndex = signal<number | undefined>(undefined);\n\n  constructor(readonly inputs: ListTypeaheadInputs<T> & {focusManager: ListFocus<T>}) {\n    this.focusManager = inputs.focusManager;\n  }\n\n  /** Performs a typeahead search, appending the given character to the search string. */\n  search(char: string): boolean {\n    if (char.length !== 1) {\n      return false;\n    }\n\n    if (!this.isTyping() && char === ' ') {\n      return false;\n    }\n\n    if (this._startIndex() === undefined) {\n      this._startIndex.set(this.focusManager.inputs.activeIndex());\n    }\n\n    clearTimeout(this.timeout);\n    this._query.update(q => q + char.toLowerCase());\n    const item = this._getItem();\n\n    if (item) {\n      this.focusManager.focus(item);\n    }\n\n    this.timeout = setTimeout(() => {\n      this._query.set('');\n      this._startIndex.set(undefined);\n    }, this.inputs.typeaheadDelay() * 1000);\n\n    return true;\n  }\n\n  /**\n   * Returns the first item whose search term matches the\n   * current query starting from the the current anchor index.\n   */\n  private _getItem() {\n    let items = this.focusManager.inputs.items();\n    const after = items.slice(this._startIndex()! + 1);\n    const before = items.slice(0, this._startIndex()!);\n    items = after.concat(before);\n    items.push(this.inputs.items()[this._startIndex()!]);\n\n    const focusableItems = [];\n    for (const item of items) {\n      if (this.focusManager.isFocusable(item)) {\n        focusableItems.push(item);\n      }\n    }\n\n    return focusableItems.find(i => i.searchTerm().toLowerCase().startsWith(this._query()));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ModifierKey as Modifier} from '../behaviors/event-manager/event-manager';\nimport {KeyboardEventManager} from '../behaviors/event-manager/keyboard-event-manager';\nimport {PointerEventManager} from '../behaviors/event-manager/pointer-event-manager';\nimport {OptionPattern} from './option';\nimport {ListSelection, ListSelectionInputs} from '../behaviors/list-selection/list-selection';\nimport {ListTypeahead, ListTypeaheadInputs} from '../behaviors/list-typeahead/list-typeahead';\nimport {ListNavigation, ListNavigationInputs} from '../behaviors/list-navigation/list-navigation';\nimport {ListFocus, ListFocusInputs} from '../behaviors/list-focus/list-focus';\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\n\n/** The selection operations that the listbox can perform. */\ninterface SelectOptions {\n  toggle?: boolean;\n  selectOne?: boolean;\n  selectRange?: boolean;\n  anchor?: boolean;\n}\n\n/** Represents the required inputs for a listbox. */\nexport type ListboxInputs<V> = ListNavigationInputs<OptionPattern<V>> &\n  ListSelectionInputs<OptionPattern<V>, V> &\n  ListTypeaheadInputs<OptionPattern<V>> &\n  ListFocusInputs<OptionPattern<V>> & {\n    readonly: SignalLike<boolean>;\n  };\n\n/** Controls the state of a listbox. */\nexport class ListboxPattern<V> {\n  /** Controls navigation for the listbox. */\n  navigation: ListNavigation<OptionPattern<V>>;\n\n  /** Controls selection for the listbox. */\n  selection: ListSelection<OptionPattern<V>, V>;\n\n  /** Controls typeahead for the listbox. */\n  typeahead: ListTypeahead<OptionPattern<V>>;\n\n  /** Controls focus for the listbox. */\n  focusManager: ListFocus<OptionPattern<V>>;\n\n  /** Whether the list is vertically or horizontally oriented. */\n  orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** Whether the listbox is disabled. */\n  disabled = computed(() => this.focusManager.isListDisabled());\n\n  /** Whether the listbox is readonly. */\n  readonly: SignalLike<boolean>;\n\n  /** The tabindex of the listbox. */\n  tabindex = computed(() => this.focusManager.getListTabindex());\n\n  /** The id of the current active item. */\n  activedescendant = computed(() => this.focusManager.getActiveDescendant());\n\n  /** Whether multiple items in the list can be selected at once. */\n  multi: SignalLike<boolean>;\n\n  /** The number of items in the listbox. */\n  setsize = computed(() => this.navigation.inputs.items().length);\n\n  /** Whether the listbox selection follows focus. */\n  followFocus = computed(() => this.inputs.selectionMode() === 'follow');\n\n  /** Whether the listbox should wrap. Used to disable wrapping while range selecting. */\n  wrap = signal(true);\n\n  /** The key used to navigate to the previous item in the list. */\n  prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next item in the list. */\n  nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  dynamicSpaceKey = computed(() => (this.typeahead.isTyping() ? '' : ' '));\n\n  /** The regexp used to decide if a key should trigger typeahead. */\n  typeaheadRegexp = /^.$/; // TODO: Ignore spaces?\n\n  /**\n   * The uncommitted index for selecting a range of options.\n   *\n   * NOTE: This is subtly distinct from the \"rangeStartIndex\" in the ListSelection behavior.\n   * The anchorIndex does not necessarily represent the start of a range, but represents the most\n   * recent index where the user showed intent to begin a range selection. Usually, this is wherever\n   * the user most recently pressed the \"Shift\" key, but if the user presses shift + space to select\n   * from the anchor, the user is not intending to start a new range from this index.\n   *\n   * In other words, \"rangeStartIndex\" is only set when a user commits to starting a range selection\n   * while \"anchorIndex\" is set whenever a user indicates they may be starting a range selection.\n   */\n  anchorIndex = signal(0);\n\n  /** The keydown event manager for the listbox. */\n  keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n\n    if (this.readonly()) {\n      return manager\n        .on(this.prevKey, () => this.prev())\n        .on(this.nextKey, () => this.next())\n        .on('Home', () => this.first())\n        .on('End', () => this.last())\n        .on(this.typeaheadRegexp, e => this.search(e.key));\n    }\n\n    if (!this.followFocus()) {\n      manager\n        .on(this.prevKey, () => this.prev())\n        .on(this.nextKey, () => this.next())\n        .on('Home', () => this.first())\n        .on('End', () => this.last())\n        .on(this.typeaheadRegexp, e => this.search(e.key));\n    }\n\n    if (this.followFocus()) {\n      manager\n        .on(this.prevKey, () => this.prev({selectOne: true}))\n        .on(this.nextKey, () => this.next({selectOne: true}))\n        .on('Home', () => this.first({selectOne: true}))\n        .on('End', () => this.last({selectOne: true}))\n        .on(this.typeaheadRegexp, e => this.search(e.key, {selectOne: true}));\n    }\n\n    if (this.inputs.multi()) {\n      manager\n        .on(Modifier.Any, 'Shift', () => this.anchorIndex.set(this.inputs.activeIndex()))\n        .on(Modifier.Shift, this.prevKey, () => this.prev({selectRange: true}))\n        .on(Modifier.Shift, this.nextKey, () => this.next({selectRange: true}))\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'Home', () =>\n          this.first({selectRange: true, anchor: false}),\n        )\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'End', () =>\n          this.last({selectRange: true, anchor: false}),\n        )\n        .on(Modifier.Shift, 'Enter', () =>\n          this._updateSelection({selectRange: true, anchor: false}),\n        )\n        .on(Modifier.Shift, this.dynamicSpaceKey, () =>\n          this._updateSelection({selectRange: true, anchor: false}),\n        );\n    }\n\n    if (!this.followFocus() && this.inputs.multi()) {\n      manager\n        .on(this.dynamicSpaceKey, () => this.selection.toggle())\n        .on('Enter', () => this.selection.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => this.selection.toggleAll());\n    }\n\n    if (!this.followFocus() && !this.inputs.multi()) {\n      manager.on(this.dynamicSpaceKey, () => this.selection.toggleOne());\n      manager.on('Enter', () => this.selection.toggleOne());\n    }\n\n    if (this.inputs.multi() && this.followFocus()) {\n      manager\n        .on([Modifier.Ctrl, Modifier.Meta], this.prevKey, () => this.prev())\n        .on([Modifier.Ctrl, Modifier.Meta], this.nextKey, () => this.next())\n        .on([Modifier.Ctrl, Modifier.Meta], ' ', () => this.selection.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Enter', () => this.selection.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Home', () => this.first())\n        .on([Modifier.Ctrl, Modifier.Meta], 'End', () => this.last())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => {\n          this.selection.toggleAll();\n          this.selection.select(); // Ensure the currect option remains selected.\n        });\n    }\n\n    return manager;\n  });\n\n  /** The pointerdown event manager for the listbox. */\n  pointerdown = computed(() => {\n    const manager = new PointerEventManager();\n\n    if (this.readonly()) {\n      return manager.on(e => this.goto(e));\n    }\n\n    if (this.multi()) {\n      manager.on(Modifier.Shift, e => this.goto(e, {selectRange: true}));\n    }\n\n    if (!this.multi() && this.followFocus()) {\n      return manager.on(e => this.goto(e, {selectOne: true}));\n    }\n\n    if (!this.multi() && !this.followFocus()) {\n      return manager.on(e => this.goto(e, {toggle: true}));\n    }\n\n    if (this.multi() && this.followFocus()) {\n      return manager\n        .on(e => this.goto(e, {selectOne: true}))\n        .on(Modifier.Ctrl, e => this.goto(e, {toggle: true}));\n    }\n\n    if (this.multi() && !this.followFocus()) {\n      return manager.on(e => this.goto(e, {toggle: true}));\n    }\n\n    return manager;\n  });\n\n  constructor(readonly inputs: ListboxInputs<V>) {\n    this.readonly = inputs.readonly;\n    this.orientation = inputs.orientation;\n    this.multi = inputs.multi;\n\n    this.focusManager = new ListFocus(inputs);\n    this.selection = new ListSelection({...inputs, focusManager: this.focusManager});\n    this.typeahead = new ListTypeahead({...inputs, focusManager: this.focusManager});\n    this.navigation = new ListNavigation({\n      ...inputs,\n      focusManager: this.focusManager,\n      wrap: computed(() => this.wrap() && this.inputs.wrap()),\n    });\n  }\n\n  /** Handles keydown events for the listbox. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /** Navigates to the first option in the listbox. */\n  first(opts?: SelectOptions) {\n    this._navigate(opts, () => this.navigation.first());\n  }\n\n  /** Navigates to the last option in the listbox. */\n  last(opts?: SelectOptions) {\n    this._navigate(opts, () => this.navigation.last());\n  }\n\n  /** Navigates to the next option in the listbox. */\n  next(opts?: SelectOptions) {\n    this._navigate(opts, () => this.navigation.next());\n  }\n\n  /** Navigates to the previous option in the listbox. */\n  prev(opts?: SelectOptions) {\n    this._navigate(opts, () => this.navigation.prev());\n  }\n\n  /** Navigates to the given item in the listbox. */\n  goto(event: PointerEvent, opts?: SelectOptions) {\n    const item = this._getItem(event);\n    this._navigate(opts, () => this.navigation.goto(item));\n  }\n\n  /** Handles typeahead search navigation for the listbox. */\n  search(char: string, opts?: SelectOptions) {\n    this._navigate(opts, () => this.typeahead.search(char));\n  }\n\n  /**\n   * Sets the listbox to it's default initial state.\n   *\n   * Sets the active index of the listbox to the first focusable selected\n   * item if one exists. Otherwise, sets focus to the first focusable item.\n   *\n   * This method should be called once the listbox and it's options are properly initialized,\n   * meaning the ListboxPattern and OptionPatterns should have references to each other before this\n   * is called.\n   */\n  setDefaultState() {\n    let firstItem: OptionPattern<V> | null = null;\n\n    for (const item of this.inputs.items()) {\n      if (this.focusManager.isFocusable(item)) {\n        if (!firstItem) {\n          firstItem = item;\n        }\n        if (item.selected()) {\n          this.inputs.activeIndex.set(item.index());\n          return;\n        }\n      }\n    }\n\n    if (firstItem) {\n      this.inputs.activeIndex.set(firstItem.index());\n    }\n  }\n\n  /**\n   * Safely performs a navigation operation.\n   *\n   * Handles conditionally disabling wrapping for when a navigation\n   * operation is occurring while the user is selecting a range of options.\n   *\n   * Handles boilerplate calling of focus & selection operations. Also ensures these\n   * additional operations are only called if the navigation operation moved focus to a new option.\n   */\n  private _navigate(opts: SelectOptions = {}, operation: () => boolean) {\n    if (opts?.selectRange) {\n      this.wrap.set(false);\n      this.selection.rangeStartIndex.set(this.anchorIndex());\n    }\n\n    const moved = operation();\n\n    if (moved) {\n      this._updateSelection(opts);\n    }\n\n    this.wrap.set(true);\n  }\n\n  /** Handles updating selection for the listbox. */\n  private _updateSelection(opts: SelectOptions = {anchor: true}) {\n    if (opts.toggle) {\n      this.selection.toggle();\n    }\n    if (opts.selectOne) {\n      this.selection.selectOne();\n    }\n    if (opts.selectRange) {\n      this.selection.selectRange();\n    }\n    if (!opts.anchor) {\n      this.anchorIndex.set(this.selection.rangeStartIndex());\n    }\n  }\n\n  private _getItem(e: PointerEvent) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const element = e.target.closest('[role=\"option\"]');\n    return this.inputs.items().find(i => i.element() === element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {ListSelection, ListSelectionItem} from '../behaviors/list-selection/list-selection';\nimport {ListTypeaheadItem} from '../behaviors/list-typeahead/list-typeahead';\nimport {ListNavigation, ListNavigationItem} from '../behaviors/list-navigation/list-navigation';\nimport {ListFocus, ListFocusItem} from '../behaviors/list-focus/list-focus';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\n\n/**\n * Represents the properties exposed by a listbox that need to be accessed by an option.\n * This exists to avoid circular dependency errors between the listbox and option.\n */\ninterface ListboxPattern<V> {\n  focusManager: ListFocus<OptionPattern<V>>;\n  selection: ListSelection<OptionPattern<V>, V>;\n  navigation: ListNavigation<OptionPattern<V>>;\n}\n\n/** Represents the required inputs for an option in a listbox. */\nexport interface OptionInputs<V>\n  extends ListNavigationItem,\n    ListSelectionItem<V>,\n    ListTypeaheadItem,\n    ListFocusItem {\n  listbox: SignalLike<ListboxPattern<V> | undefined>;\n}\n\n/** Represents an option in a listbox. */\nexport class OptionPattern<V> {\n  /** A unique identifier for the option. */\n  id: SignalLike<string>;\n\n  /** The value of the option. */\n  value: SignalLike<V>;\n\n  /** The position of the option in the list. */\n  index = computed(\n    () =>\n      this.listbox()\n        ?.navigation.inputs.items()\n        .findIndex(i => i.id() === this.id()) ?? -1,\n  );\n\n  /** Whether the option is selected. */\n  selected = computed(() => this.listbox()?.selection.inputs.value().includes(this.value()));\n\n  /** Whether the option is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The text used by the typeahead search. */\n  searchTerm: SignalLike<string>;\n\n  /** A reference to the parent listbox. */\n  listbox: SignalLike<ListboxPattern<V> | undefined>;\n\n  /** The tabindex of the option. */\n  tabindex = computed(() => this.listbox()?.focusManager.getItemTabindex(this));\n\n  /** The html element that should receive focus. */\n  element: SignalLike<HTMLElement>;\n\n  constructor(args: OptionInputs<V>) {\n    this.id = args.id;\n    this.value = args.value;\n    this.listbox = args.listbox;\n    this.element = args.element;\n    this.disabled = args.disabled;\n    this.searchTerm = args.searchTerm;\n  }\n}\n"],"names":["Modifier"],"mappings":"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"}