{"version":3,"file":"popover-edit.mjs","sources":["../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/constants.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/edit-event-dispatcher.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/edit-ref.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/focus-dispatcher.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/form-value-container.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/lens-directives.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/edit-services.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/focus-escape-notifier.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/table-directives.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/popover-edit/popover-edit-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Selector for finding table cells. */\nexport const CELL_SELECTOR = '.cdk-cell, .mat-cell, td';\n\n/** Selector for finding editable table cells. */\nexport const EDITABLE_CELL_SELECTOR = '.cdk-popover-edit-cell, .mat-popover-edit-cell';\n\n/** Selector for finding table rows. */\nexport const ROW_SELECTOR = '.cdk-row, .mat-row, tr';\n\n/** Selector for finding the table element. */\nexport const TABLE_SELECTOR = 'table, cdk-table, mat-table';\n\n/** CSS class added to the edit lens pane. */\nexport const EDIT_PANE_CLASS = 'cdk-edit-pane';\n\n/** Selector for finding the edit lens pane. */\nexport const EDIT_PANE_SELECTOR = `.${EDIT_PANE_CLASS}, .mat-edit-pane`;\n\n/** Selector for table rows that should be skipped when moving focus. */\nexport const SKIP_ROW_FOCUS_SELECTOR = '.cdk-popover-edit-skip-focus, .mat-popover-edit-skip-focus';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, inject} from '@angular/core';\nimport {combineLatest, MonoTypeOperatorFunction, Observable, pipe, Subject} from 'rxjs';\nimport {\n  audit,\n  auditTime,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  skip,\n  startWith,\n  shareReplay,\n} from 'rxjs/operators';\n\nimport {CELL_SELECTOR, ROW_SELECTOR} from './constants';\nimport {closest} from './polyfill';\n\n/** The delay applied to mouse events before hiding or showing hover content. */\nconst MOUSE_EVENT_DELAY_MS = 40;\n\n/** The delay for reacting to focus/blur changes. */\nconst FOCUS_DELAY = 0;\n\n/**\n * The possible states for hover content:\n * OFF - Not rendered.\n * FOCUSABLE - Rendered in the dom and styled for its contents to be focusable but invisible.\n * ON - Rendered and fully visible.\n */\nexport enum HoverContentState {\n  OFF = 0,\n  FOCUSABLE,\n  ON,\n}\n\n// Note: this class is generic, rather than referencing EditRef directly, in order to avoid\n// circular imports. If we were to reference it here, importing the registry into the\n// class that is registering itself will introduce a circular import.\n\n/**\n * Service for sharing delegated events and state for triggering table edits.\n */\n@Injectable()\nexport class EditEventDispatcher<R> {\n  private readonly _ngZone = inject(NgZone);\n\n  /** A subject that indicates which table cell is currently editing (unless it is disabled). */\n  readonly editing = new Subject<Element | null>();\n\n  /** A subject that indicates which table row is currently hovered. */\n  readonly hovering = new Subject<Element | null>();\n\n  /** A subject that indicates which table row currently contains focus. */\n  readonly focused = new Subject<Element | null>();\n\n  /** A subject that indicates all elements in the table matching ROW_SELECTOR. */\n  readonly allRows = new Subject<NodeList>();\n\n  /** A subject that emits mouse move events from the table indicating the targeted row. */\n  readonly mouseMove = new Subject<Element | null>();\n\n  // TODO: Use WeakSet once IE11 support is dropped.\n  /**\n   * Tracks the currently disabled editable cells - edit calls will be ignored\n   * for these cells.\n   */\n  readonly disabledCells = new WeakMap<Element, boolean>();\n\n  /** The EditRef for the currently active edit lens (if any). */\n  get editRef(): R | null {\n    return this._editRef;\n  }\n  private _editRef: R | null = null;\n\n  // Optimization: Precompute common pipeable operators used per row/cell.\n  private readonly _distinctUntilChanged = distinctUntilChanged<\n    Element | HoverContentState | boolean | null\n  >();\n  private readonly _startWithNull = startWith<Element | null>(null);\n  private readonly _distinctShare = pipe(\n    this._distinctUntilChanged as MonoTypeOperatorFunction<HoverContentState>,\n    shareReplay(1),\n  );\n  private readonly _startWithNullDistinct = pipe(\n    this._startWithNull,\n    this._distinctUntilChanged as MonoTypeOperatorFunction<Element | null>,\n  );\n\n  readonly editingAndEnabled = this.editing.pipe(\n    filter(cell => cell == null || !this.disabledCells.has(cell)),\n    shareReplay(1),\n  );\n\n  /** An observable that emits the row containing focus or an active edit. */\n  readonly editingOrFocused = combineLatest([\n    this.editingAndEnabled.pipe(\n      map(cell => closest(cell, ROW_SELECTOR)),\n      this._startWithNull,\n    ),\n    this.focused.pipe(this._startWithNull),\n  ]).pipe(\n    map(([editingRow, focusedRow]) => focusedRow || editingRow),\n    this._distinctUntilChanged as MonoTypeOperatorFunction<Element | null>,\n    auditTime(FOCUS_DELAY), // Use audit to skip over blur events to the next focused element.\n    this._distinctUntilChanged as MonoTypeOperatorFunction<Element | null>,\n    shareReplay(1),\n  );\n\n  /** Tracks rows that contain hover content with a reference count. */\n  private _rowsWithHoverContent = new WeakMap<Element, number>();\n\n  /** The table cell that has an active edit lens (or null). */\n  private _currentlyEditing: Element | null = null;\n\n  /** The combined set of row hover content states organized by row. */\n  private readonly _hoveredContentStateDistinct = combineLatest([\n    this._getFirstRowWithHoverContent(),\n    this._getLastRowWithHoverContent(),\n    this.editingOrFocused,\n    this.hovering.pipe(\n      distinctUntilChanged(),\n      audit(row =>\n        this.mouseMove.pipe(\n          filter(mouseMoveRow => row === mouseMoveRow),\n          this._startWithNull,\n          debounceTime(MOUSE_EVENT_DELAY_MS),\n        ),\n      ),\n      this._startWithNullDistinct,\n    ),\n  ]).pipe(\n    skip(1), // Skip the initial emission of [null, null, null, null].\n    map(computeHoverContentState),\n    distinctUntilChanged(areMapEntriesEqual),\n    // Optimization: Enter the zone before shareReplay so that we trigger a single\n    // ApplicationRef.tick for all row updates.\n    this._enterZone(),\n    shareReplay(1),\n  );\n\n  private readonly _editingAndEnabledDistinct = this.editingAndEnabled.pipe(\n    distinctUntilChanged(),\n    this._enterZone(),\n    shareReplay(1),\n  );\n\n  // Optimization: Share row events observable with subsequent callers.\n  // At startup, calls will be sequential by row.\n  private _lastSeenRow: Element | null = null;\n  private _lastSeenRowHoverOrFocus: Observable<HoverContentState> | null = null;\n\n  constructor() {\n    this._editingAndEnabledDistinct.subscribe(cell => {\n      this._currentlyEditing = cell;\n    });\n  }\n\n  /**\n   * Gets an Observable that emits true when the specified element's cell\n   * is editing and false when not.\n   */\n  editingCell(element: Element | EventTarget): Observable<boolean> {\n    let cell: Element | null = null;\n\n    return this._editingAndEnabledDistinct.pipe(\n      map(editCell => editCell === (cell || (cell = closest(element, CELL_SELECTOR)))),\n      this._distinctUntilChanged as MonoTypeOperatorFunction<boolean>,\n    );\n  }\n\n  /**\n   * Stops editing for the specified cell. If the specified cell is not the current\n   * edit cell, does nothing.\n   */\n  doneEditingCell(element: Element | EventTarget): void {\n    const cell = closest(element, CELL_SELECTOR);\n\n    if (this._currentlyEditing === cell) {\n      this.editing.next(null);\n    }\n  }\n\n  /** Sets the currently active EditRef. */\n  setActiveEditRef(ref: R) {\n    this._editRef = ref;\n  }\n\n  /** Unset the currently active EditRef, if the specified editRef is active. */\n  unsetActiveEditRef(ref: R) {\n    if (this._editRef !== ref) {\n      return;\n    }\n\n    this._editRef = null;\n  }\n\n  /** Adds the specified table row to be tracked for first/last row comparisons. */\n  registerRowWithHoverContent(row: Element): void {\n    this._rowsWithHoverContent.set(row, (this._rowsWithHoverContent.get(row) || 0) + 1);\n  }\n\n  /**\n   * Reference decrements and ultimately removes the specified table row from first/last row\n   * comparisons.\n   */\n  deregisterRowWithHoverContent(row: Element): void {\n    const refCount = this._rowsWithHoverContent.get(row) || 0;\n\n    if (refCount <= 1) {\n      this._rowsWithHoverContent.delete(row);\n    } else {\n      this._rowsWithHoverContent.set(row, refCount - 1);\n    }\n  }\n\n  /**\n   * Gets an Observable that emits true when the specified element's row\n   * contains the focused element or is being hovered over and false when not.\n   * Hovering is defined as when the mouse has momentarily stopped moving over the cell.\n   */\n  hoverOrFocusOnRow(row: Element): Observable<HoverContentState> {\n    if (row !== this._lastSeenRow) {\n      this._lastSeenRow = row;\n      this._lastSeenRowHoverOrFocus = this._hoveredContentStateDistinct.pipe(\n        map(state => state.get(row) || HoverContentState.OFF),\n        this._distinctShare,\n      );\n    }\n\n    return this._lastSeenRowHoverOrFocus!;\n  }\n\n  /**\n   * RxJS operator that enters the Angular zone, used to reduce boilerplate in\n   * re-entering the zone for stream pipelines.\n   */\n  private _enterZone<T>(): MonoTypeOperatorFunction<T> {\n    return (source: Observable<T>) =>\n      new Observable<T>(observer =>\n        source.subscribe({\n          next: value => this._ngZone.run(() => observer.next(value)),\n          error: err => observer.error(err),\n          complete: () => observer.complete(),\n        }),\n      );\n  }\n\n  private _getFirstRowWithHoverContent(): Observable<Element | null> {\n    return this._mapAllRowsToSingleRow(rows => {\n      for (let i = 0, row; (row = rows[i]); i++) {\n        if (this._rowsWithHoverContent.has(row as Element)) {\n          return row as Element;\n        }\n      }\n      return null;\n    });\n  }\n\n  private _getLastRowWithHoverContent(): Observable<Element | null> {\n    return this._mapAllRowsToSingleRow(rows => {\n      for (let i = rows.length - 1, row; (row = rows[i]); i--) {\n        if (this._rowsWithHoverContent.has(row as Element)) {\n          return row as Element;\n        }\n      }\n      return null;\n    });\n  }\n\n  private _mapAllRowsToSingleRow(\n    mapper: (rows: NodeList) => Element | null,\n  ): Observable<Element | null> {\n    return this.allRows.pipe(map(mapper), this._startWithNullDistinct);\n  }\n}\n\nfunction computeHoverContentState([\n  firstRow,\n  lastRow,\n  activeRow,\n  hoverRow,\n]: (Element | null)[]): Map<Element, HoverContentState> {\n  const hoverContentState = new Map<Element, HoverContentState>();\n\n  // Add focusable rows.\n  for (const focussableRow of [\n    firstRow,\n    lastRow,\n    activeRow && activeRow.previousElementSibling,\n    activeRow && activeRow.nextElementSibling,\n  ]) {\n    if (focussableRow) {\n      hoverContentState.set(focussableRow as Element, HoverContentState.FOCUSABLE);\n    }\n  }\n\n  // Add/overwrite with fully visible rows.\n  for (const onRow of [activeRow, hoverRow]) {\n    if (onRow) {\n      hoverContentState.set(onRow, HoverContentState.ON);\n    }\n  }\n\n  return hoverContentState;\n}\n\nfunction areMapEntriesEqual<K, V>(a: Map<K, V>, b: Map<K, V>): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  // TODO: use Map.prototype.entries once we're off IE11.\n  for (const aKey of Array.from(a.keys())) {\n    if (b.get(aKey) !== a.get(aKey)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, OnDestroy, afterNextRender, inject, Injector} from '@angular/core';\nimport {ControlContainer} from '@angular/forms';\nimport {Observable, Subject} from 'rxjs';\n\nimport {EditEventDispatcher} from './edit-event-dispatcher';\n\n/**\n * Used for communication between the form within the edit lens and the\n * table that launched it. Provided by CdkEditControl within the lens.\n */\n@Injectable()\nexport class EditRef<FormValue> implements OnDestroy {\n  private readonly _form = inject(ControlContainer, {self: true});\n  private readonly _editEventDispatcher =\n    inject<EditEventDispatcher<EditRef<FormValue>>>(EditEventDispatcher);\n\n  /** Emits the final value of this edit instance before closing. */\n  private readonly _finalValueSubject = new Subject<FormValue>();\n  readonly finalValue: Observable<FormValue> = this._finalValueSubject;\n\n  /** Emits when the user tabs out of this edit lens before closing. */\n  private readonly _blurredSubject = new Subject<void>();\n  readonly blurred: Observable<void> = this._blurredSubject;\n\n  /** The value to set the form back to on revert. */\n  private _revertFormValue: FormValue;\n\n  private _injector = inject(Injector);\n\n  constructor() {\n    this._editEventDispatcher.setActiveEditRef(this);\n  }\n\n  /**\n   * Called by the host directive's OnInit hook. Reads the initial state of the\n   * form and overrides it with persisted state from previous openings, if\n   * applicable.\n   */\n  init(previousFormValue: FormValue | undefined): void {\n    // Wait for the next render before caching the initial value.\n    // This ensures that all form controls have been initialized.\n    afterNextRender(\n      () => {\n        this.updateRevertValue();\n        if (previousFormValue) {\n          this.reset(previousFormValue);\n        }\n      },\n      {injector: this._injector},\n    );\n  }\n\n  ngOnDestroy(): void {\n    this._editEventDispatcher.unsetActiveEditRef(this);\n    this._finalValueSubject.next(this._form.value);\n    this._finalValueSubject.complete();\n  }\n\n  /** Whether the attached form is in a valid state. */\n  isValid(): boolean | null {\n    return this._form.valid;\n  }\n\n  /** Set the form's current value as what it will be set to on revert/reset. */\n  updateRevertValue(): void {\n    this._revertFormValue = this._form.value;\n  }\n\n  /** Tells the table to close the edit popup. */\n  close(): void {\n    this._editEventDispatcher.editing.next(null);\n  }\n\n  /** Notifies the active edit that the user has moved focus out of the lens. */\n  blur(): void {\n    this._blurredSubject.next();\n  }\n\n  /**\n   * Resets the form value to the specified value or the previously set\n   * revert value.\n   */\n  reset(value?: FormValue): void {\n    this._form.reset(value || this._revertFormValue);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, UP_ARROW, RIGHT_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {Injectable, inject} from '@angular/core';\nimport {PartialObserver} from 'rxjs';\n\nimport {\n  EDITABLE_CELL_SELECTOR,\n  ROW_SELECTOR,\n  SKIP_ROW_FOCUS_SELECTOR,\n  TABLE_SELECTOR,\n} from './constants';\nimport {closest} from './polyfill';\n\n/**\n * Service responsible for moving cell focus around in response to keyboard events.\n * May be overridden to customize the keyboard behavior of popover edit.\n */\n@Injectable({providedIn: 'root'})\nexport class FocusDispatcher {\n  protected readonly directionality = inject(Directionality);\n\n  /** Observes keydown events triggered from the table. */\n  readonly keyObserver: PartialObserver<KeyboardEvent>;\n\n  constructor() {\n    this.keyObserver = {next: event => this.handleKeyboardEvent(event)};\n  }\n\n  /**\n   * Moves focus to earlier or later cells (in dom order) by offset cells relative to\n   * currentCell.\n   */\n  moveFocusHorizontally(currentCell: HTMLElement, offset: number): void {\n    const cells = Array.from(\n      closest(currentCell, TABLE_SELECTOR)!.querySelectorAll(EDITABLE_CELL_SELECTOR),\n    ) as HTMLElement[];\n    const currentIndex = cells.indexOf(currentCell);\n    const newIndex = currentIndex + offset;\n\n    if (cells[newIndex]) {\n      cells[newIndex].focus();\n    }\n  }\n\n  /** Moves focus to up or down by row by offset cells relative to currentCell. */\n  moveFocusVertically(currentCell: HTMLElement, offset: number): void {\n    const currentRow = closest(currentCell, ROW_SELECTOR)!;\n    const rows = Array.from(closest(currentRow, TABLE_SELECTOR)!.querySelectorAll(ROW_SELECTOR));\n    const currentRowIndex = rows.indexOf(currentRow);\n    const currentIndexWithinRow = Array.from(\n      currentRow.querySelectorAll(EDITABLE_CELL_SELECTOR),\n    ).indexOf(currentCell);\n\n    let newRowIndex = currentRowIndex + offset;\n    while (rows[newRowIndex]?.matches(SKIP_ROW_FOCUS_SELECTOR)) {\n      newRowIndex = newRowIndex + (offset > 0 ? 1 : -1);\n    }\n\n    if (rows[newRowIndex]) {\n      const rowToFocus = Array.from(\n        rows[newRowIndex].querySelectorAll(EDITABLE_CELL_SELECTOR),\n      ) as HTMLElement[];\n\n      if (rowToFocus[currentIndexWithinRow]) {\n        rowToFocus[currentIndexWithinRow].focus();\n      }\n    }\n  }\n\n  /** Translates arrow keydown events into focus move operations. */\n  protected handleKeyboardEvent(event: KeyboardEvent): void {\n    const cell = closest(event.target, EDITABLE_CELL_SELECTOR) as HTMLElement | null;\n\n    if (!cell) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case UP_ARROW:\n        this.moveFocusVertically(cell, -1);\n        break;\n      case DOWN_ARROW:\n        this.moveFocusVertically(cell, 1);\n        break;\n      case LEFT_ARROW:\n        this.moveFocusHorizontally(cell, this.directionality.value === 'ltr' ? -1 : 1);\n        break;\n      case RIGHT_ARROW:\n        this.moveFocusHorizontally(cell, this.directionality.value === 'ltr' ? 1 : -1);\n        break;\n      default:\n        // If the keyboard event is not handled, return now so that we don't `preventDefault`.\n        return;\n    }\n\n    event.preventDefault();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport interface Entry<FormValue> {\n  value?: FormValue;\n}\n\n/**\n * A convenience class for preserving unsaved form state while an edit lens is closed.\n *\n * Example usage:\n * class MyComponent {\n *   readonly nameEditValues = new FormValueContainer&lt;Item, {name: string}&gt;();\n * }\n *\n * &lt;form cdkEditControl [(cdkEditControlPreservedFormValue)]=\"nameEditValues.for(item).value\"&gt;\n */\nexport class FormValueContainer<Key extends object, FormValue> {\n  private _formValues = new WeakMap<Key, Entry<FormValue>>();\n\n  for(key: Key): Entry<FormValue> {\n    const _formValues = this._formValues;\n\n    let entry = _formValues.get(key);\n    if (!entry) {\n      // Expose entry as an object so that we can [(two-way)] bind to its value member\n      entry = {};\n      _formValues.set(key, entry);\n    }\n\n    return entry;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Subject} from 'rxjs';\nimport {Directive, ElementRef, EventEmitter, OnDestroy, OnInit, Input, inject} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {EDIT_PANE_SELECTOR} from './constants';\nimport {closest} from './polyfill';\nimport {EditRef} from './edit-ref';\n\n/** Options for what do to when the user clicks outside of an edit lens. */\nexport type PopoverEditClickOutBehavior = 'close' | 'submit' | 'noop';\n\n/**\n * A directive that attaches to a form within the edit lens.\n * It coordinates the form state with the table-wide edit system and handles\n * closing the edit lens when the form is submitted or the user clicks\n * out.\n */\n@Directive({\n  selector: 'form[cdkEditControl]',\n  inputs: [\n    {name: 'clickOutBehavior', alias: 'cdkEditControlClickOutBehavior'},\n    {name: 'preservedFormValue', alias: 'cdkEditControlPreservedFormValue'},\n    {name: 'ignoreSubmitUnlessValid', alias: 'cdkEditControlIgnoreSubmitUnlessValid'},\n  ],\n  outputs: ['preservedFormValueChange: cdkEditControlPreservedFormValueChange'],\n  providers: [EditRef],\n  host: {\n    '(ngSubmit)': 'handleFormSubmit()',\n    '(document:click)': 'handlePossibleClickOut($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n})\nexport class CdkEditControl<FormValue> implements OnDestroy, OnInit {\n  protected readonly elementRef = inject(ElementRef);\n  readonly editRef = inject<EditRef<FormValue>>(EditRef);\n\n  protected readonly destroyed = new Subject<void>();\n\n  /**\n   * Specifies what should happen when the user clicks outside of the edit lens.\n   * The default behavior is to close the lens without submitting the form.\n   */\n  clickOutBehavior: PopoverEditClickOutBehavior = 'close';\n\n  /**\n   * A two-way binding for storing unsubmitted form state. If not provided\n   * then form state will be discarded on close. The PeristBy directive is offered\n   * as a convenient shortcut for these bindings.\n   */\n  preservedFormValue?: FormValue;\n  readonly preservedFormValueChange = new EventEmitter<FormValue>();\n\n  /**\n   * Determines whether the lens will close on form submit if the form is not in a valid\n   * state. By default the lens will remain open.\n   */\n  ignoreSubmitUnlessValid = true;\n\n  ngOnInit(): void {\n    this.editRef.init(this.preservedFormValue);\n    this.editRef.finalValue.subscribe(this.preservedFormValueChange);\n    this.editRef.blurred.subscribe(() => this._handleBlur());\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  /**\n   * Called when the form submits. If ignoreSubmitUnlessValid is true, checks\n   * the form for validity before proceeding.\n   * Updates the revert state with the latest submitted value then closes the edit.\n   */\n  handleFormSubmit(): void {\n    if (this.ignoreSubmitUnlessValid && !this.editRef.isValid()) {\n      return;\n    }\n\n    this.editRef.updateRevertValue();\n    this.editRef.close();\n  }\n\n  /** Called on Escape keyup. Closes the edit. */\n  close(): void {\n    // todo - allow this behavior to be customized as well, such as calling\n    // reset before close\n    this.editRef.close();\n  }\n\n  /**\n   * Called on click anywhere in the document.\n   * If the click was outside of the lens, trigger the specified click out behavior.\n   */\n  handlePossibleClickOut(evt: Event): void {\n    if (closest(evt.target, EDIT_PANE_SELECTOR)) {\n      return;\n    }\n    switch (this.clickOutBehavior) {\n      case 'submit':\n        // Manually cause the form to submit before closing.\n        this._triggerFormSubmit();\n        this.editRef.close();\n        break;\n      case 'close':\n        this.editRef.close();\n        break;\n      default:\n        break;\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    if (event.key === 'Escape' && !hasModifierKey(event)) {\n      this.close();\n      event.preventDefault();\n    }\n  }\n\n  /** Triggers submit on tab out if clickOutBehavior is 'submit'. */\n  private _handleBlur(): void {\n    if (this.clickOutBehavior === 'submit') {\n      // Manually cause the form to submit before closing.\n      this._triggerFormSubmit();\n    }\n  }\n\n  private _triggerFormSubmit() {\n    this.elementRef.nativeElement!.dispatchEvent(new Event('submit'));\n  }\n}\n\n/** Reverts the form to its initial or previously submitted state on click. */\n@Directive({\n  selector: 'button[cdkEditRevert]',\n  host: {\n    'type': 'button',\n    '(click)': 'revertEdit()',\n  },\n})\nexport class CdkEditRevert<FormValue> {\n  protected readonly editRef = inject<EditRef<FormValue>>(EditRef);\n\n  /** Type of the button. Defaults to `button` to avoid accident form submits. */\n  @Input() type: string = 'button';\n\n  revertEdit(): void {\n    this.editRef.reset();\n  }\n}\n\n/** Closes the lens on click. */\n@Directive({\n  selector: '[cdkEditClose]',\n  host: {\n    '(click)': 'closeEdit()',\n    '(keydown.enter)': 'closeEdit()',\n    '(keydown.space)': 'closeEdit()',\n  },\n})\nexport class CdkEditClose<FormValue> {\n  protected readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected readonly editRef = inject<EditRef<FormValue>>(EditRef);\n\n  constructor() {\n    const nativeElement = this.elementRef.nativeElement;\n\n    // Prevent accidental form submits.\n    if (nativeElement.nodeName === 'BUTTON' && !nativeElement.getAttribute('type')) {\n      nativeElement.setAttribute('type', 'button');\n    }\n  }\n\n  closeEdit(): void {\n    // Note that we use `click` here, rather than a keyboard event, because some screen readers\n    // will emit a fake click event instead of an enter keyboard event on buttons. For the keyboard\n    // events we use `keydown`, rather than `keyup`, because we use `keydown` to open the overlay\n    // as well. If we were to use `keyup`, the user could end up opening and closing within\n    // the same event sequence if focus was moved quickly.\n    this.editRef.close();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, inject} from '@angular/core';\nimport {FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\nimport {EditEventDispatcher} from './edit-event-dispatcher';\nimport {FocusDispatcher} from './focus-dispatcher';\nimport {EditRef} from './edit-ref';\n\n/**\n * Optimization\n * Collects multiple Injectables into a singleton shared across the table. By reducing the\n * number of services injected into each CdkPopoverEdit, this saves about 0.023ms of cpu time\n * and 56 bytes of memory per instance.\n */\n@Injectable()\nexport class EditServices {\n  readonly directionality = inject(Directionality);\n  readonly editEventDispatcher = inject<EditEventDispatcher<EditRef<unknown>>>(EditEventDispatcher);\n  readonly focusDispatcher = inject(FocusDispatcher);\n  readonly focusTrapFactory = inject(FocusTrapFactory);\n  readonly ngZone = inject(NgZone);\n  readonly scrollDispatcher = inject(ScrollDispatcher);\n  readonly viewportRuler = inject(ViewportRuler);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, inject, DOCUMENT} from '@angular/core';\n\nimport {FocusTrap, InteractivityChecker} from '@angular/cdk/a11y';\nimport {Observable, Subject} from 'rxjs';\n\n/** Value indicating whether focus left the target area before or after the enclosed elements. */\nexport enum FocusEscapeNotifierDirection {\n  START,\n  END,\n}\n\n/**\n * Like FocusTrap, but rather than trapping focus within a dom region, notifies subscribers when\n * focus leaves the region.\n */\nexport class FocusEscapeNotifier extends FocusTrap {\n  private readonly _escapeSubject = new Subject<FocusEscapeNotifierDirection>();\n\n  constructor(\n    element: HTMLElement,\n    checker: InteractivityChecker,\n    ngZone: NgZone,\n    document: Document,\n  ) {\n    super(element, checker, ngZone, document, true /* deferAnchors */);\n\n    // The focus trap adds \"anchors\" at the beginning and end of a trapped region that redirect\n    // focus. We override that redirect behavior here with simply emitting on a stream.\n    this.startAnchorListener = () => {\n      this._escapeSubject.next(FocusEscapeNotifierDirection.START);\n      return true;\n    };\n    this.endAnchorListener = () => {\n      this._escapeSubject.next(FocusEscapeNotifierDirection.END);\n      return true;\n    };\n\n    this.attachAnchors();\n  }\n\n  escapes(): Observable<FocusEscapeNotifierDirection> {\n    return this._escapeSubject;\n  }\n}\n\n/** Factory that allows easy instantiation of focus escape notifiers. */\n@Injectable({providedIn: 'root'})\nexport class FocusEscapeNotifierFactory {\n  private _checker = inject(InteractivityChecker);\n  private _ngZone = inject(NgZone);\n  private _document = inject(DOCUMENT);\n\n  /**\n   * Creates a focus escape notifier region around the given element.\n   * @param element The element around which focus will be monitored.\n   * @returns The created focus escape notifier instance.\n   */\n  create(element: HTMLElement): FocusEscapeNotifier {\n    return new FocusEscapeNotifier(element, this._checker, this._ngZone, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {FocusTrap} from '@angular/cdk/a11y';\nimport {\n  createFlexibleConnectedPositionStrategy,\n  createOverlayRef,\n  createRepositionScrollStrategy,\n  OverlayRef,\n  OverlaySizeConfig,\n  PositionStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  afterNextRender,\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  inject,\n  Injector,\n  ListenerOptions,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  mapTo,\n  share,\n  startWith,\n  takeUntil,\n  throttleTime,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport {CELL_SELECTOR, EDIT_PANE_CLASS, EDIT_PANE_SELECTOR, ROW_SELECTOR} from './constants';\nimport {EditEventDispatcher, HoverContentState} from './edit-event-dispatcher';\nimport {EditRef} from './edit-ref';\nimport {EditServices} from './edit-services';\nimport {FocusDispatcher} from './focus-dispatcher';\nimport {\n  FocusEscapeNotifier,\n  FocusEscapeNotifierDirection,\n  FocusEscapeNotifierFactory,\n} from './focus-escape-notifier';\nimport {closest} from './polyfill';\n\n/**\n * Describes the number of columns before and after the originating cell that the\n * edit popup should span. In left to right locales, before means left and after means\n * right. In right to left locales before means right and after means left.\n */\nexport interface CdkPopoverEditColspan {\n  before?: number;\n  after?: number;\n}\n\n/** Used for rate-limiting mousemove events. */\nconst MOUSE_MOVE_THROTTLE_TIME_MS = 10;\n\nfunction hasRowElement(nl: NodeList) {\n  for (let i = 0; i < nl.length; i++) {\n    const el = nl[i];\n    if (!(el instanceof HTMLElement)) {\n      continue;\n    }\n    if (el.matches(ROW_SELECTOR)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isRowMutation(mutation: MutationRecord): boolean {\n  return hasRowElement(mutation.addedNodes) || hasRowElement(mutation.removedNodes);\n}\n\n/**\n * A directive that must be attached to enable editability on a table.\n * It is responsible for setting up delegated event handlers and providing the\n * EditEventDispatcher service for use by the other edit directives.\n */\n@Directive({\n  selector: 'table[editable], cdk-table[editable], mat-table[editable]',\n  providers: [EditEventDispatcher, EditServices],\n})\nexport class CdkEditable implements AfterViewInit, OnDestroy {\n  protected readonly elementRef = inject(ElementRef);\n  protected readonly editEventDispatcher =\n    inject<EditEventDispatcher<EditRef<unknown>>>(EditEventDispatcher);\n  protected readonly focusDispatcher = inject(FocusDispatcher);\n  protected readonly ngZone = inject(NgZone);\n  private readonly _renderer = inject(Renderer2);\n\n  protected readonly destroyed = new Subject<void>();\n\n  private _rowsRendered = new Subject();\n\n  private _rowMutationObserver = globalThis.MutationObserver\n    ? new globalThis.MutationObserver(mutations => {\n        if (mutations.some(isRowMutation)) {\n          this._rowsRendered.next();\n        }\n      })\n    : null;\n\n  constructor() {\n    // TODO: consider a design where instead of polling for row changes we just use\n    // afterRenderEffect + a signal of the rows.\n    afterNextRender(() => {\n      this._rowsRendered.next();\n      this._rowMutationObserver?.observe(this.elementRef.nativeElement, {\n        childList: true,\n        subtree: true,\n      });\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this._listenForTableEvents();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n    this._rowMutationObserver?.disconnect();\n  }\n\n  private _observableFromEvent<T extends Event>(\n    element: Element,\n    name: string,\n    options?: ListenerOptions,\n  ) {\n    return new Observable<T>(subscriber => {\n      const handler = (event: T) => subscriber.next(event);\n      const cleanup = this._renderer.listen(element, name, handler, options);\n      return () => {\n        cleanup();\n        subscriber.complete();\n      };\n    });\n  }\n\n  private _listenForTableEvents(): void {\n    const element = this.elementRef.nativeElement;\n    const toClosest = (selector: string) =>\n      map((event: UIEvent) => closest(event.target, selector));\n\n    this.ngZone.runOutsideAngular(() => {\n      // Track mouse movement over the table to hide/show hover content.\n      this._observableFromEvent<MouseEvent>(element, 'mouseover')\n        .pipe(toClosest(ROW_SELECTOR), takeUntil(this.destroyed))\n        .subscribe(this.editEventDispatcher.hovering);\n      this._observableFromEvent<MouseEvent>(element, 'mouseleave')\n        .pipe(mapTo(null), takeUntil(this.destroyed))\n        .subscribe(this.editEventDispatcher.hovering);\n      this._observableFromEvent<MouseEvent>(element, 'mousemove')\n        .pipe(\n          throttleTime(MOUSE_MOVE_THROTTLE_TIME_MS),\n          toClosest(ROW_SELECTOR),\n          takeUntil(this.destroyed),\n        )\n        .subscribe(this.editEventDispatcher.mouseMove);\n\n      // Track focus within the table to hide/show/make focusable hover content.\n      this._observableFromEvent<FocusEvent>(element, 'focus', {capture: true})\n        .pipe(toClosest(ROW_SELECTOR), share(), takeUntil(this.destroyed))\n        .subscribe(this.editEventDispatcher.focused);\n\n      merge(\n        this._observableFromEvent(element, 'blur', {capture: true}),\n        this._observableFromEvent<KeyboardEvent>(element, 'keydown').pipe(\n          filter(event => event.key === 'Escape'),\n        ),\n      )\n        .pipe(mapTo(null), share(), takeUntil(this.destroyed))\n        .subscribe(this.editEventDispatcher.focused);\n\n      // Keep track of rows within the table. This is used to know which rows with hover content\n      // are first or last in the table. They are kept focusable in case focus enters from above\n      // or below the table.\n      this._rowsRendered\n        .pipe(\n          // Avoid some timing inconsistencies since Angular v19.\n          // TODO: see if we can remove this now that we're using MutationObserver.\n          debounceTime(0),\n          // Optimization: ignore dom changes while focus is within the table as we already\n          // ensure that rows above and below the focused/active row are tabbable.\n          withLatestFrom(this.editEventDispatcher.editingOrFocused),\n          filter(([_, activeRow]) => activeRow == null),\n          map(() => element.querySelectorAll(ROW_SELECTOR)),\n          share(),\n          takeUntil(this.destroyed),\n        )\n        .subscribe(this.editEventDispatcher.allRows);\n\n      this._observableFromEvent<KeyboardEvent>(element, 'keydown')\n        .pipe(\n          filter(event => event.key === 'Enter'),\n          toClosest(CELL_SELECTOR),\n          takeUntil(this.destroyed),\n        )\n        .subscribe(this.editEventDispatcher.editing);\n\n      // Keydown must be used here or else key auto-repeat does not work properly on some platforms.\n      this._observableFromEvent<KeyboardEvent>(element, 'keydown')\n        .pipe(takeUntil(this.destroyed))\n        .subscribe(this.focusDispatcher.keyObserver);\n    });\n  }\n}\n\nconst POPOVER_EDIT_HOST_BINDINGS = {\n  '[attr.tabindex]': 'disabled ? null : 0',\n  'class': 'cdk-popover-edit-cell',\n  '[attr.aria-haspopup]': '!disabled',\n};\n\nconst POPOVER_EDIT_INPUTS = [\n  {name: 'template', alias: 'cdkPopoverEdit'},\n  {name: 'context', alias: 'cdkPopoverEditContext'},\n  {name: 'colspan', alias: 'cdkPopoverEditColspan'},\n  {name: 'disabled', alias: 'cdkPopoverEditDisabled'},\n  {name: 'ariaLabel', alias: 'cdkPopoverEditAriaLabel'},\n];\n\n/**\n * Attaches an ng-template to a cell and shows it when instructed to by the\n * EditEventDispatcher service.\n * Makes the cell focusable.\n */\n@Directive({\n  selector: '[cdkPopoverEdit]:not([cdkPopoverEditTabOut])',\n  host: POPOVER_EDIT_HOST_BINDINGS,\n  inputs: POPOVER_EDIT_INPUTS,\n})\nexport class CdkPopoverEdit<C> implements AfterViewInit, OnDestroy {\n  protected readonly services = inject(EditServices);\n  protected readonly elementRef = inject(ElementRef);\n  protected readonly viewContainerRef = inject(ViewContainerRef);\n  private _injector = inject(Injector);\n\n  /** The edit lens template shown over the cell on edit. */\n  template: TemplateRef<any> | null = null;\n\n  /**\n   * Implicit context to pass along to the template. Can be omitted if the template\n   * is defined within the cell.\n   */\n  context?: C;\n\n  /** Aria label to set on the popover dialog element. */\n  ariaLabel?: string;\n\n  /**\n   * Specifies that the popup should cover additional table cells before and/or after\n   * this one.\n   */\n  get colspan(): CdkPopoverEditColspan {\n    return this._colspan;\n  }\n  set colspan(value: CdkPopoverEditColspan) {\n    this._colspan = value;\n\n    // Recompute positioning when the colspan changes.\n    if (this.overlayRef) {\n      this.overlayRef.updatePositionStrategy(this._getPositionStrategy());\n\n      if (this.overlayRef.hasAttached()) {\n        this._updateOverlaySize();\n      }\n    }\n  }\n  private _colspan: CdkPopoverEditColspan = {};\n\n  /** Whether popover edit is disabled for this cell. */\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n\n    if (value) {\n      this.services.editEventDispatcher.doneEditingCell(this.elementRef.nativeElement!);\n      this.services.editEventDispatcher.disabledCells.set(this.elementRef.nativeElement!, true);\n    } else {\n      this.services.editEventDispatcher.disabledCells.delete(this.elementRef.nativeElement!);\n    }\n  }\n  private _disabled = false;\n\n  protected focusTrap?: FocusTrap;\n  protected overlayRef?: OverlayRef;\n  protected readonly destroyed = new Subject<void>();\n\n  ngAfterViewInit(): void {\n    this._startListeningToEditEvents();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n\n    if (this.focusTrap) {\n      this.focusTrap.destroy();\n      this.focusTrap = undefined;\n    }\n\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n    }\n  }\n\n  protected initFocusTrap(): void {\n    this.focusTrap = this.services.focusTrapFactory.create(this.overlayRef!.overlayElement);\n  }\n\n  protected closeEditOverlay(): void {\n    this.services.editEventDispatcher.doneEditingCell(this.elementRef.nativeElement!);\n  }\n\n  protected panelClass(): string {\n    return EDIT_PANE_CLASS;\n  }\n\n  private _startListeningToEditEvents(): void {\n    this.services.editEventDispatcher\n      .editingCell(this.elementRef.nativeElement!)\n      .pipe(takeUntil(this.destroyed))\n      .subscribe(open => {\n        if (open && this.template) {\n          if (!this.overlayRef) {\n            this._createEditOverlay();\n          }\n\n          this._showEditOverlay();\n        } else if (this.overlayRef) {\n          this._maybeReturnFocusToCell();\n\n          this.overlayRef.detach();\n        }\n      });\n  }\n\n  private _createEditOverlay(): void {\n    this.overlayRef = createOverlayRef(this._injector, {\n      disposeOnNavigation: true,\n      panelClass: this.panelClass(),\n      positionStrategy: this._getPositionStrategy(),\n      scrollStrategy: createRepositionScrollStrategy(this._injector),\n      direction: this.services.directionality,\n    });\n\n    this.initFocusTrap();\n    this.overlayRef.overlayElement.setAttribute('role', 'dialog');\n    if (this.ariaLabel) {\n      this.overlayRef.overlayElement.setAttribute('aria-label', this.ariaLabel);\n    }\n\n    this.overlayRef.detachments().subscribe(() => this.closeEditOverlay());\n  }\n\n  private _showEditOverlay(): void {\n    this.overlayRef!.attach(\n      new TemplatePortal(this.template!, this.viewContainerRef, {$implicit: this.context}),\n    );\n\n    // We have to defer trapping focus, because doing so too early can cause the form inside\n    // the overlay to be submitted immediately if it was opened on an Enter keydown event.\n    this.services.ngZone.runOutsideAngular(() => {\n      setTimeout(() => {\n        this.focusTrap!.focusInitialElement();\n      });\n    });\n\n    // Update the size of the popup initially and on subsequent changes to\n    // scroll position and viewport size.\n    merge(this.services.scrollDispatcher.scrolled(), this.services.viewportRuler.change())\n      .pipe(startWith(null), takeUntil(merge(this.overlayRef!.detachments(), this.destroyed)))\n      .subscribe(() => {\n        this._updateOverlaySize();\n      });\n  }\n\n  private _getOverlayCells(): HTMLElement[] {\n    const cell = closest(this.elementRef.nativeElement!, CELL_SELECTOR) as HTMLElement;\n\n    if (!this._colspan.before && !this._colspan.after) {\n      return [cell];\n    }\n\n    const row = closest(this.elementRef.nativeElement!, ROW_SELECTOR)!;\n    const rowCells = Array.from(row.querySelectorAll(CELL_SELECTOR)) as HTMLElement[];\n    const ownIndex = rowCells.indexOf(cell);\n\n    return rowCells.slice(\n      ownIndex - (this._colspan.before || 0),\n      ownIndex + (this._colspan.after || 0) + 1,\n    );\n  }\n\n  private _getPositionStrategy(): PositionStrategy {\n    const cells = this._getOverlayCells();\n    return createFlexibleConnectedPositionStrategy(this._injector, cells[0])\n      .withGrowAfterOpen()\n      .withPush()\n      .withViewportMargin(16)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'top',\n        },\n      ]);\n  }\n\n  private _updateOverlaySize(): void {\n    this.overlayRef!.updateSize(this._sizeConfigForCells(this._getOverlayCells()));\n  }\n\n  private _maybeReturnFocusToCell(): void {\n    if (closest(document.activeElement, EDIT_PANE_SELECTOR) === this.overlayRef!.overlayElement) {\n      this.elementRef.nativeElement!.focus();\n    }\n  }\n\n  private _sizeConfigForCells(cells: HTMLElement[]): OverlaySizeConfig {\n    if (cells.length === 0) {\n      return {};\n    }\n\n    if (cells.length === 1) {\n      return {width: cells[0].getBoundingClientRect().width};\n    }\n\n    let firstCell, lastCell;\n    if (this.services.directionality.value === 'ltr') {\n      firstCell = cells[0];\n      lastCell = cells[cells.length - 1];\n    } else {\n      lastCell = cells[0];\n      firstCell = cells[cells.length - 1];\n    }\n\n    return {width: lastCell.getBoundingClientRect().right - firstCell.getBoundingClientRect().left};\n  }\n}\n\n/**\n * Attaches an ng-template to a cell and shows it when instructed to by the\n * EditEventDispatcher service.\n * Makes the cell focusable.\n */\n@Directive({\n  selector: '[cdkPopoverEdit][cdkPopoverEditTabOut]',\n  host: POPOVER_EDIT_HOST_BINDINGS,\n  inputs: POPOVER_EDIT_INPUTS,\n})\nexport class CdkPopoverEditTabOut<C> extends CdkPopoverEdit<C> {\n  protected readonly focusEscapeNotifierFactory = inject(FocusEscapeNotifierFactory);\n\n  protected override focusTrap?: FocusEscapeNotifier = undefined;\n\n  protected override initFocusTrap(): void {\n    this.focusTrap = this.focusEscapeNotifierFactory.create(this.overlayRef!.overlayElement);\n\n    this.focusTrap\n      .escapes()\n      .pipe(takeUntil(this.destroyed))\n      .subscribe(direction => {\n        this.services.editEventDispatcher.editRef?.blur();\n        this.services.focusDispatcher.moveFocusHorizontally(\n          closest(this.elementRef.nativeElement!, CELL_SELECTOR) as HTMLElement,\n          direction === FocusEscapeNotifierDirection.START ? -1 : 1,\n        );\n\n        this.closeEditOverlay();\n      });\n  }\n}\n\n/**\n * A structural directive that shows its contents when the table row containing\n * it is hovered or when an element in the row has focus.\n */\n@Directive({\n  selector: '[cdkRowHoverContent]',\n})\nexport class CdkRowHoverContent implements AfterViewInit, OnDestroy {\n  protected readonly services = inject(EditServices);\n  protected readonly elementRef = inject(ElementRef);\n  protected readonly templateRef = inject<TemplateRef<any>>(TemplateRef);\n  protected readonly viewContainerRef = inject(ViewContainerRef);\n\n  protected readonly destroyed = new Subject<void>();\n  protected viewRef: EmbeddedViewRef<any> | null = null;\n\n  private _row?: Element;\n\n  ngAfterViewInit(): void {\n    this._row = closest(this.elementRef.nativeElement!, ROW_SELECTOR)!;\n\n    this.services.editEventDispatcher.registerRowWithHoverContent(this._row);\n    this._listenForHoverAndFocusEvents();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n\n    if (this.viewRef) {\n      this.viewRef.destroy();\n    }\n\n    if (this._row) {\n      this.services.editEventDispatcher.deregisterRowWithHoverContent(this._row);\n    }\n  }\n\n  /**\n   * Called immediately after the hover content is created and added to the dom.\n   * In the CDK version, this is a noop but subclasses such as MatRowHoverContent use this\n   * to prepare/style the inserted element.\n   */\n  protected initElement(_: HTMLElement): void {}\n\n  /**\n   * Called when the hover content needs to be focusable to preserve a reasonable tab ordering\n   * but should not yet be shown.\n   */\n  protected makeElementHiddenButFocusable(element: HTMLElement): void {\n    element.style.opacity = '0';\n  }\n\n  /**\n   * Called when the hover content needs to be focusable to preserve a reasonable tab ordering\n   * but should not yet be shown.\n   */\n  protected makeElementVisible(element: HTMLElement): void {\n    element.style.opacity = '';\n  }\n\n  private _listenForHoverAndFocusEvents(): void {\n    this.services.editEventDispatcher\n      .hoverOrFocusOnRow(this._row!)\n      .pipe(takeUntil(this.destroyed))\n      .subscribe(eventState => {\n        // When in FOCUSABLE state, add the hover content to the dom but make it transparent so\n        // that it is in the tab order relative to the currently focused row.\n\n        if (eventState === HoverContentState.ON || eventState === HoverContentState.FOCUSABLE) {\n          if (!this.viewRef) {\n            this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, {});\n            this.initElement(this.viewRef.rootNodes[0] as HTMLElement);\n            this.viewRef.markForCheck();\n          } else if (this.viewContainerRef.indexOf(this.viewRef) === -1) {\n            this.viewContainerRef.insert(this.viewRef!);\n            this.viewRef.markForCheck();\n          }\n\n          if (eventState === HoverContentState.ON) {\n            this.makeElementVisible(this.viewRef.rootNodes[0] as HTMLElement);\n          } else {\n            this.makeElementHiddenButFocusable(this.viewRef.rootNodes[0] as HTMLElement);\n          }\n        } else if (this.viewRef) {\n          this.viewContainerRef.detach(this.viewContainerRef.indexOf(this.viewRef));\n        }\n      });\n  }\n}\n\n/**\n * Opens the closest edit popover to this element, whether it's associated with this exact\n * element or an ancestor element.\n */\n@Directive({\n  selector: '[cdkEditOpen]',\n  host: {\n    '(click)': 'openEdit($event)',\n  },\n})\nexport class CdkEditOpen {\n  protected readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected readonly editEventDispatcher =\n    inject<EditEventDispatcher<EditRef<unknown>>>(EditEventDispatcher);\n\n  constructor() {\n    const elementRef = this.elementRef;\n\n    const nativeElement = elementRef.nativeElement;\n\n    // Prevent accidental form submits.\n    if (nativeElement.nodeName === 'BUTTON' && !nativeElement.getAttribute('type')) {\n      nativeElement.setAttribute('type', 'button');\n    }\n  }\n\n  openEdit(evt: Event): void {\n    this.editEventDispatcher.editing.next(closest(this.elementRef.nativeElement!, CELL_SELECTOR));\n    evt.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {\n  CdkPopoverEdit,\n  CdkPopoverEditTabOut,\n  CdkRowHoverContent,\n  CdkEditable,\n  CdkEditOpen,\n} from './table-directives';\nimport {CdkEditControl, CdkEditRevert, CdkEditClose} from './lens-directives';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkPopoverEdit,\n  CdkPopoverEditTabOut,\n  CdkRowHoverContent,\n  CdkEditControl,\n  CdkEditRevert,\n  CdkEditClose,\n  CdkEditable,\n  CdkEditOpen,\n];\n\n@NgModule({\n  imports: [OverlayModule, ...EXPORTED_DECLARATIONS],\n  exports: EXPORTED_DECLARATIONS,\n})\nexport class CdkPopoverEditModule {}\n"],"names":[],"mappings":"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"}