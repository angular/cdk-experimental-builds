{"version":3,"file":"selection.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/selection/selection-set.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/selection/selection.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/selection/select-all.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/selection/selection-toggle.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/selection/selection-column.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/selection/row-selection.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk-experimental/selection/selection-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TrackByFunction} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Maintains a set of selected values. One or more values can be added to or removed from the\n * selection.\n */\ninterface TrackBySelection<T> {\n  isSelected(value: SelectableWithIndex<T>): boolean;\n  select(...values: SelectableWithIndex<T>[]): void;\n  deselect(...values: SelectableWithIndex<T>[]): void;\n  changed: Subject<SelectionChange<T>>;\n}\n\n/**\n * A selectable value with an optional index. The index is required when the selection is used with\n * `trackBy`.\n */\nexport interface SelectableWithIndex<T> {\n  value: T;\n  index?: number;\n}\n\n/**\n * Represents the change in the selection set.\n */\nexport interface SelectionChange<T> {\n  before: SelectableWithIndex<T>[];\n  after: SelectableWithIndex<T>[];\n}\n\n/**\n * Maintains a set of selected items. Support selecting and deselecting items, and checking if a\n * value is selected.\n * When constructed with a `trackByFn`, all the items will be identified by applying the `trackByFn`\n * on them. Because `trackByFn` requires the index of the item to be passed in, the `index` field is\n * expected to be set when calling `isSelected`, `select` and `deselect`.\n */\nexport class SelectionSet<T> implements TrackBySelection<T> {\n  private _selectionMap = new Map<T | ReturnType<TrackByFunction<T>>, SelectableWithIndex<T>>();\n  changed = new Subject<SelectionChange<T>>();\n\n  constructor(\n    private _multiple = false,\n    private _trackByFn?: TrackByFunction<T>,\n  ) {}\n\n  isSelected(value: SelectableWithIndex<T>): boolean {\n    return this._selectionMap.has(this._getTrackedByValue(value));\n  }\n\n  select(...selects: SelectableWithIndex<T>[]) {\n    if (!this._multiple && selects.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('SelectionSet: not multiple selection');\n    }\n\n    const before = this._getCurrentSelection();\n\n    if (!this._multiple) {\n      this._selectionMap.clear();\n    }\n\n    const toSelect: SelectableWithIndex<T>[] = [];\n    for (const select of selects) {\n      if (this.isSelected(select)) {\n        continue;\n      }\n\n      toSelect.push(select);\n      this._markSelected(this._getTrackedByValue(select), select);\n    }\n\n    const after = this._getCurrentSelection();\n\n    this.changed.next({before, after});\n  }\n\n  deselect(...selects: SelectableWithIndex<T>[]) {\n    if (!this._multiple && selects.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('SelectionSet: not multiple selection');\n    }\n\n    const before = this._getCurrentSelection();\n    const toDeselect: SelectableWithIndex<T>[] = [];\n\n    for (const select of selects) {\n      if (!this.isSelected(select)) {\n        continue;\n      }\n\n      toDeselect.push(select);\n      this._markDeselected(this._getTrackedByValue(select));\n    }\n\n    const after = this._getCurrentSelection();\n    this.changed.next({before, after});\n  }\n\n  private _markSelected(key: T | ReturnType<TrackByFunction<T>>, toSelect: SelectableWithIndex<T>) {\n    this._selectionMap.set(key, toSelect);\n  }\n\n  private _markDeselected(key: T | ReturnType<TrackByFunction<T>>) {\n    this._selectionMap.delete(key);\n  }\n\n  private _getTrackedByValue(select: SelectableWithIndex<T>) {\n    if (!this._trackByFn) {\n      return select.value;\n    }\n\n    if (select.index == null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('SelectionSet: index required when trackByFn is used.');\n    }\n\n    return this._trackByFn(select.index!, select.value);\n  }\n\n  private _getCurrentSelection(): SelectableWithIndex<T>[] {\n    return Array.from(this._selectionMap.values());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CollectionViewer, DataSource, isDataSource, ListRange} from '@angular/cdk/collections';\nimport {\n  AfterContentChecked,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TrackByFunction,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {SelectableWithIndex, SelectionChange, SelectionSet} from './selection-set';\n\n/**\n * Manages the selection states of the items and provides methods to check and update the selection\n * states.\n * It must be applied to the parent element if `cdkSelectionToggle`, `cdkSelectAll`,\n * `cdkRowSelection` and `cdkSelectionColumn` are applied.\n */\n@Directive({\n  selector: '[cdkSelection]',\n  exportAs: 'cdkSelection',\n})\nexport class CdkSelection<T> implements OnInit, AfterContentChecked, CollectionViewer, OnDestroy {\n  viewChange: Observable<ListRange>;\n\n  @Input()\n  get dataSource(): TableDataSource<T> {\n    return this._dataSource;\n  }\n  set dataSource(dataSource: TableDataSource<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: TableDataSource<T>;\n\n  @Input('trackBy') trackByFn: TrackByFunction<T>;\n\n  /** Whether to support multiple selection */\n  @Input('cdkSelectionMultiple')\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(multiple: BooleanInput) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  protected _multiple: boolean;\n\n  /** Emits when selection changes. */\n  @Output('cdkSelectionChange') readonly change = new EventEmitter<SelectionChange<T>>();\n\n  /** Latest data provided by the data source. */\n  private _data: T[] | readonly T[];\n\n  /** Subscription that listens for the data provided by the data source.  */\n  private _renderChangeSubscription: Subscription | null;\n\n  private _destroyed = new Subject<void>();\n\n  private _selection: SelectionSet<T>;\n\n  private _switchDataSource(dataSource: TableDataSource<T>) {\n    this._data = [];\n\n    // TODO: Move this logic to a shared function in `cdk/collections`.\n    if (isDataSource(this._dataSource)) {\n      this._dataSource.disconnect(this);\n    }\n\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    this._dataSource = dataSource;\n  }\n\n  private _observeRenderChanges() {\n    if (!this._dataSource) {\n      return;\n    }\n\n    let dataStream: Observable<readonly T[]> | undefined;\n\n    if (isDataSource(this._dataSource)) {\n      dataStream = this._dataSource.connect(this);\n    } else if (this._dataSource instanceof Observable) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = observableOf(this._dataSource);\n    }\n\n    if (dataStream == null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Unknown data source');\n    }\n\n    this._renderChangeSubscription = dataStream!\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(data => {\n        this._data = data || [];\n      });\n  }\n\n  ngOnInit() {\n    this._selection = new SelectionSet<T>(this._multiple, this.trackByFn);\n    this._selection.changed.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      this._updateSelectAllState();\n      this.change.emit(change);\n    });\n  }\n\n  ngAfterContentChecked() {\n    if (this._dataSource && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    if (isDataSource(this._dataSource)) {\n      this._dataSource.disconnect(this);\n    }\n  }\n\n  /** Toggles selection for a given value. `index` is required if `trackBy` is used. */\n  toggleSelection(value: T, index?: number) {\n    if (!!this.trackByFn && index == null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkSelection: index required when trackBy is used');\n    }\n\n    if (this.isSelected(value, index)) {\n      this._selection.deselect({value, index});\n    } else {\n      this._selection.select({value, index});\n    }\n  }\n\n  /**\n   * Toggles select-all. If no value is selected, select all values. If all values or some of the\n   * values are selected, de-select all values.\n   */\n  toggleSelectAll() {\n    if (!this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkSelection: multiple selection not enabled');\n    }\n\n    if (this.selectAllState === 'none') {\n      this._selectAll();\n    } else {\n      this._clearAll();\n    }\n  }\n\n  /** Checks whether a value is selected. `index` is required if `trackBy` is used. */\n  isSelected(value: T, index?: number) {\n    if (!!this.trackByFn && index == null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkSelection: index required when trackBy is used');\n    }\n\n    return this._selection.isSelected({value, index});\n  }\n\n  /** Checks whether all values are selected. */\n  isAllSelected() {\n    return this._data.every((value, index) => this._selection.isSelected({value, index}));\n  }\n\n  /** Checks whether partially selected. */\n  isPartialSelected() {\n    return (\n      !this.isAllSelected() &&\n      this._data.some((value, index) => this._selection.isSelected({value, index}))\n    );\n  }\n\n  private _selectAll() {\n    const toSelect: SelectableWithIndex<T>[] = [];\n    this._data.forEach((value, index) => {\n      toSelect.push({value, index});\n    });\n\n    this._selection.select(...toSelect);\n  }\n\n  private _clearAll() {\n    const toDeselect: SelectableWithIndex<T>[] = [];\n    this._data.forEach((value, index) => {\n      toDeselect.push({value, index});\n    });\n\n    this._selection.deselect(...toDeselect);\n  }\n\n  private _updateSelectAllState() {\n    if (this.isAllSelected()) {\n      this.selectAllState = 'all';\n    } else if (this.isPartialSelected()) {\n      this.selectAllState = 'partial';\n    } else {\n      this.selectAllState = 'none';\n    }\n  }\n\n  selectAllState: SelectAllState = 'none';\n}\n\ntype SelectAllState = 'all' | 'none' | 'partial';\ntype TableDataSource<T> = DataSource<T> | Observable<readonly T[]> | readonly T[];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, OnDestroy, OnInit, inject} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Observable, of as observableOf, Subject} from 'rxjs';\nimport {switchMap, takeUntil} from 'rxjs/operators';\n\nimport {CdkSelection} from './selection';\n\n/**\n * Makes the element a select-all toggle.\n *\n * Must be used within a parent `CdkSelection` directive. It toggles the selection states\n * of all the selection toggles connected with the `CdkSelection` directive.\n * If the element implements `ControlValueAccessor`, e.g. `MatCheckbox`, the directive\n * automatically connects it with the select-all state provided by the `CdkSelection` directive. If\n * not, use `checked$` to get the checked state, `indeterminate$` to get the indeterminate state,\n * and `toggle()` to change the selection state.\n */\n@Directive({\n  selector: '[cdkSelectAll]',\n  exportAs: 'cdkSelectAll',\n})\nexport class CdkSelectAll<T> implements OnDestroy, OnInit {\n  private readonly _selection = inject<CdkSelection<T>>(CdkSelection, {optional: true})!;\n  private readonly _controlValueAccessor = inject(NG_VALUE_ACCESSOR, {optional: true, self: true});\n\n  /**\n   * The checked state of the toggle.\n   * Resolves to `true` if all the values are selected, `false` if no value is selected.\n   */\n  readonly checked: Observable<boolean>;\n\n  /**\n   * The indeterminate state of the toggle.\n   * Resolves to `true` if part (not all) of the values are selected, `false` if all values or no\n   * value at all are selected.\n   */\n  readonly indeterminate: Observable<boolean>;\n\n  /**\n   * Toggles the select-all state.\n   * @param event The click event if the toggle is triggered by a (mouse or keyboard) click. If\n   *     using with a native `<input type=\"checkbox\">`, the parameter is required for the\n   *     indeterminate state to work properly.\n   */\n  toggle(event?: MouseEvent) {\n    // This is needed when applying the directive on a native <input type=\"checkbox\">\n    // checkbox. The default behavior needs to be prevented in order to support the indeterminate\n    // state. The timeout is also needed so the checkbox can show the latest state.\n    if (event) {\n      event.preventDefault();\n    }\n\n    setTimeout(() => {\n      this._selection.toggleSelectAll();\n    });\n  }\n\n  private readonly _destroyed = new Subject<void>();\n\n  constructor() {\n    const _selection = this._selection;\n\n    this.checked = _selection.change.pipe(\n      switchMap(() => observableOf(_selection.isAllSelected())),\n    );\n\n    this.indeterminate = _selection.change.pipe(\n      switchMap(() => observableOf(_selection.isPartialSelected())),\n    );\n  }\n\n  ngOnInit() {\n    this._assertValidParentSelection();\n    this._configureControlValueAccessor();\n  }\n\n  private _configureControlValueAccessor() {\n    if (this._controlValueAccessor && this._controlValueAccessor.length) {\n      this._controlValueAccessor[0].registerOnChange((e: unknown) => {\n        if (e === true || e === false) {\n          this.toggle();\n        }\n      });\n      this.checked.pipe(takeUntil(this._destroyed)).subscribe(state => {\n        this._controlValueAccessor![0].writeValue(state);\n      });\n    }\n  }\n\n  private _assertValidParentSelection() {\n    if (!this._selection && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkSelectAll: missing CdkSelection in the parent');\n    }\n\n    if (!this._selection.multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkSelectAll: CdkSelection must have cdkSelectionMultiple set to true');\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Directive, Input, OnDestroy, OnInit, inject} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Observable, of as observableOf, Subject} from 'rxjs';\nimport {distinctUntilChanged, switchMap, takeUntil} from 'rxjs/operators';\n\nimport {CdkSelection} from './selection';\n\n/**\n * Makes the element a selection toggle.\n *\n * Must be used within a parent `CdkSelection` directive.\n * Must be provided with the value. If `trackBy` is used on `CdkSelection`, the index of the value\n * is required. If the element implements `ControlValueAccessor`, e.g. `MatCheckbox`, the directive\n * automatically connects it with the selection state provided by the `CdkSelection` directive. If\n * not, use `checked$` to get the checked state of the value, and `toggle()` to change the selection\n * state.\n */\n@Directive({\n  selector: '[cdkSelectionToggle]',\n  exportAs: 'cdkSelectionToggle',\n})\nexport class CdkSelectionToggle<T> implements OnDestroy, OnInit {\n  private _selection = inject<CdkSelection<T>>(CdkSelection, {optional: true})!;\n  private _controlValueAccessors = inject(NG_VALUE_ACCESSOR, {optional: true, self: true});\n\n  /** The value that is associated with the toggle */\n  @Input('cdkSelectionToggleValue') value: T;\n\n  /** The index of the value in the list. Required when used with `trackBy` */\n  @Input('cdkSelectionToggleIndex')\n  get index(): number | undefined {\n    return this._index;\n  }\n  set index(index: NumberInput) {\n    this._index = coerceNumberProperty(index);\n  }\n  protected _index?: number;\n\n  /** The checked state of the selection toggle */\n  readonly checked: Observable<boolean>;\n\n  /** Toggles the selection */\n  toggle() {\n    this._selection.toggleSelection(this.value, this.index);\n  }\n\n  private _destroyed = new Subject<void>();\n\n  constructor() {\n    const _selection = this._selection;\n\n    this.checked = _selection.change.pipe(\n      switchMap(() => observableOf(this._isSelected())),\n      distinctUntilChanged(),\n    );\n  }\n\n  ngOnInit() {\n    this._assertValidParentSelection();\n    this._configureControlValueAccessor();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  private _assertValidParentSelection() {\n    if (!this._selection && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkSelectAll: missing CdkSelection in the parent');\n    }\n  }\n\n  private _configureControlValueAccessor() {\n    if (this._controlValueAccessors && this._controlValueAccessors.length) {\n      this._controlValueAccessors[0].registerOnChange((e: unknown) => {\n        if (typeof e === 'boolean') {\n          this.toggle();\n        }\n      });\n\n      this.checked.pipe(takeUntil(this._destroyed)).subscribe(state => {\n        this._controlValueAccessors![0].writeValue(state);\n      });\n    }\n  }\n\n  private _isSelected(): boolean {\n    return this._selection.isSelected(this.value, this.index);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef, CdkTable} from '@angular/cdk/table';\nimport {\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  inject,\n} from '@angular/core';\n\nimport {CdkSelection} from './selection';\nimport {AsyncPipe} from '@angular/common';\nimport {CdkSelectionToggle} from './selection-toggle';\nimport {CdkSelectAll} from './select-all';\n\n/**\n * Column that adds row selecting checkboxes and a select-all checkbox if `cdkSelectionMultiple` is\n * `true`.\n *\n * Must be used within a parent `CdkSelection` directive.\n */\n@Component({\n  selector: 'cdk-selection-column',\n  template: `\n    <ng-container cdkColumnDef>\n      <th cdkHeaderCell *cdkHeaderCellDef>\n        @if (selection && selection.multiple) {\n          <input type=\"checkbox\"\n              cdkSelectAll\n              #allToggler=\"cdkSelectAll\"\n              [checked]=\"allToggler.checked | async\"\n              [indeterminate]=\"allToggler.indeterminate | async\"\n              (click)=\"allToggler.toggle($event)\">\n        }\n      </th>\n      <td cdkCell *cdkCellDef=\"let row; let i = $index\">\n        <input type=\"checkbox\"\n            #toggler=\"cdkSelectionToggle\"\n            cdkSelectionToggle\n            [cdkSelectionToggleValue]=\"row\"\n            [cdkSelectionToggleIndex]=\"i\"\n            (click)=\"toggler.toggle()\"\n            [checked]=\"toggler.checked | async\">\n      </td>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  imports: [\n    CdkColumnDef,\n    CdkHeaderCellDef,\n    CdkSelectAll,\n    CdkCellDef,\n    CdkSelectionToggle,\n    AsyncPipe,\n  ],\n})\nexport class CdkSelectionColumn<T> implements OnInit, OnDestroy {\n  private _table = inject<CdkTable<T>>(CdkTable, {optional: true});\n  readonly selection = inject<CdkSelection<T>>(CdkSelection, {optional: true});\n\n  /** Column name that should be used to reference this column. */\n  @Input('cdkSelectionColumnName')\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    this._name = name;\n\n    this._syncColumnDefName();\n  }\n  private _name: string;\n\n  @ViewChild(CdkColumnDef, {static: true}) private readonly _columnDef: CdkColumnDef;\n  @ViewChild(CdkCellDef, {static: true}) private readonly _cell: CdkCellDef;\n  @ViewChild(CdkHeaderCellDef, {static: true}) private readonly _headerCell: CdkHeaderCellDef;\n\n  ngOnInit() {\n    if (!this.selection && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkSelectionColumn: missing CdkSelection in the parent');\n    }\n\n    this._syncColumnDefName();\n\n    if (this._table) {\n      this._columnDef.cell = this._cell;\n      this._columnDef.headerCell = this._headerCell;\n      this._table.addColumnDef(this._columnDef);\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('CdkSelectionColumn: missing parent table');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this._columnDef);\n    }\n  }\n\n  private _syncColumnDefName() {\n    if (this._columnDef) {\n      this._columnDef.name = this._name;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Directive, Input, inject} from '@angular/core';\n\nimport {CdkSelection} from './selection';\n\n/**\n * Applies `cdk-selected` class and `aria-selected` to an element.\n *\n * Must be used within a parent `CdkSelection` directive.\n * Must be provided with the value. The index is required if `trackBy` is used on the `CdkSelection`\n * directive.\n */\n@Directive({\n  selector: '[cdkRowSelection]',\n  host: {\n    '[class.cdk-selected]': '_selection.isSelected(this.value, this.index)',\n    '[attr.aria-selected]': '_selection.isSelected(this.value, this.index)',\n  },\n})\nexport class CdkRowSelection<T> {\n  readonly _selection = inject<CdkSelection<T>>(CdkSelection);\n\n  // We need an initializer here to avoid a TS error.\n  @Input('cdkRowSelectionValue') value: T = undefined!;\n\n  @Input('cdkRowSelectionIndex')\n  get index(): number | undefined {\n    return this._index;\n  }\n  set index(index: NumberInput) {\n    this._index = coerceNumberProperty(index);\n  }\n  protected _index?: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {NgModule} from '@angular/core';\n\nimport {CdkRowSelection} from './row-selection';\nimport {CdkSelectAll} from './select-all';\nimport {CdkSelection} from './selection';\nimport {CdkSelectionColumn} from './selection-column';\nimport {CdkSelectionToggle} from './selection-toggle';\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CdkSelection,\n    CdkSelectionToggle,\n    CdkSelectAll,\n    CdkSelectionColumn,\n    CdkRowSelection,\n  ],\n  exports: [CdkSelection, CdkSelectionToggle, CdkSelectAll, CdkSelectionColumn, CdkRowSelection],\n})\nexport class CdkSelectionModule {}\n"],"names":["_multiple","_trackByFn","isSelected","value","_selectionMap","has","_getTrackedByValue","selects","length","ngDevMode","Error","before","_getCurrentSelection","select","_markSelected","after","changed","next","_dataSource","dataSource","_switchDataSource","trackByFn","multiple","coerceBooleanProperty","EventEmitter","_renderChangeSubscription","_destroyed","Subject","_selection","isDataSource","disconnect","unsubscribe","_observeRenderChanges","Observable","dataStream","Array","isArray","observableOf","takeUntil","data","ngOnInit","pipe","subscribe","change","_updateSelectAllState","emit","ngOnDestroy","complete","toggleSelection","index","_clearAll","isAllSelected","_data","every","Input","type","Output","checked","toggle","event","toggleSelectAll","constructor","switchMap","isPartialSelected","_assertValidParentSelection","_controlValueAccessor","e","writeValue","state","_index","coerceNumberProperty","_configureControlValueAccessor","_controlValueAccessors","registerOnChange","_table","inject","CdkTable","optional","selection","_columnDef","name","_name","ɵfac","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","CdkSelectionColumn","deps","target","ɵɵFactoryTarget","Component","CdkRowSelection","isStandalone","selector","inputs","host","properties","decorators","CdkSelectionModule","NgModule","ɵɵngDeclareNgModule","imports","CdkTableModule","exports","CdkSelection","CdkSelectionToggle","CdkSelectAll"],"mappings":"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"}