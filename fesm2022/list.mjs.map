{"version":3,"file":"list.mjs","sources":["../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/list-selection/list-selection.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/list-typeahead/list-typeahead.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk-experimental/ui-patterns/behaviors/list/list.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../signal-like/signal-like';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\n\n/** Represents an item in a collection, such as a listbox option, than can be selected. */\nexport interface ListSelectionItem<V> extends ListFocusItem {\n  /** The value of the item. */\n  value: SignalLike<V>;\n}\n\n/** Represents the required inputs for a collection that contains selectable items. */\nexport interface ListSelectionInputs<T extends ListSelectionItem<V>, V> extends ListFocusInputs<T> {\n  /** Whether multiple items in the list can be selected at once. */\n  multi: SignalLike<boolean>;\n\n  /** The current value of the list selection. */\n  value: WritableSignalLike<V[]>;\n\n  /** The selection strategy used by the list. */\n  selectionMode: SignalLike<'follow' | 'explicit'>;\n}\n\n/** Controls selection for a list of items. */\nexport class ListSelection<T extends ListSelectionItem<V>, V> {\n  /** The start index to use for range selection. */\n  rangeStartIndex = signal<number>(0);\n\n  /** The end index to use for range selection. */\n  rangeEndIndex = signal<number>(0);\n\n  /** The currently selected items. */\n  selectedItems = computed(() =>\n    this.inputs.items().filter(item => this.inputs.value().includes(item.value())),\n  );\n\n  constructor(readonly inputs: ListSelectionInputs<T, V> & {focusManager: ListFocus<T>}) {}\n\n  /** Selects the item at the current active index. */\n  select(item?: ListSelectionItem<V>, opts = {anchor: true}) {\n    item = item ?? (this.inputs.focusManager.activeItem() as ListSelectionItem<V>);\n\n    if (item.disabled() || this.inputs.value().includes(item.value())) {\n      return;\n    }\n\n    if (!this.inputs.multi()) {\n      this.deselectAll();\n    }\n\n    const index = this.inputs.items().findIndex(i => i === item);\n    if (opts.anchor) {\n      this.beginRangeSelection(index);\n    }\n    this.inputs.value.update(values => values.concat(item.value()));\n  }\n\n  /** Deselects the item at the current active index. */\n  deselect(item?: T) {\n    item = item ?? this.inputs.focusManager.activeItem();\n\n    if (!item.disabled()) {\n      this.inputs.value.update(values => values.filter(value => value !== item.value()));\n    }\n  }\n\n  /** Toggles the item at the current active index. */\n  toggle() {\n    const item = this.inputs.focusManager.activeItem();\n    this.inputs.value().includes(item.value()) ? this.deselect() : this.select();\n  }\n\n  /** Toggles only the item at the current active index. */\n  toggleOne() {\n    const item = this.inputs.focusManager.activeItem();\n    this.inputs.value().includes(item.value()) ? this.deselect() : this.selectOne();\n  }\n\n  /** Selects all items in the list. */\n  selectAll() {\n    if (!this.inputs.multi()) {\n      return; // Should we log a warning?\n    }\n\n    for (const item of this.inputs.items()) {\n      this.select(item, {anchor: false});\n    }\n\n    this.beginRangeSelection();\n  }\n\n  /** Deselects all items in the list. */\n  deselectAll() {\n    for (const item of this.inputs.items()) {\n      this.deselect(item);\n    }\n  }\n\n  /**\n   * Selects all items in the list or deselects all\n   * items in the list if all items are already selected.\n   */\n  toggleAll() {\n    const selectableValues = this.inputs\n      .items()\n      .filter(i => !i.disabled())\n      .map(i => i.value());\n\n    selectableValues.every(i => this.inputs.value().includes(i))\n      ? this.deselectAll()\n      : this.selectAll();\n  }\n\n  /** Sets the selection to only the current active item. */\n  selectOne() {\n    if (this.inputs.focusManager.activeItem().disabled()) {\n      return;\n    }\n\n    this.deselectAll();\n\n    if (this.inputs.value().length > 0 && !this.inputs.multi()) {\n      return;\n    }\n\n    this.select();\n  }\n\n  /**\n   * Selects all items in the list up to the anchor item.\n   *\n   * Deselects all items that were previously within the\n   * selected range that are now outside of the selected range\n   */\n  selectRange(opts = {anchor: true}) {\n    const isStartOfRange = this.inputs.focusManager.prevActiveIndex() === this.rangeStartIndex();\n\n    if (isStartOfRange && opts.anchor) {\n      this.beginRangeSelection(this.inputs.focusManager.prevActiveIndex());\n    }\n\n    const itemsInRange = this._getItemsFromIndex(this.rangeStartIndex());\n    const itemsOutOfRange = this._getItemsFromIndex(this.rangeEndIndex()).filter(\n      i => !itemsInRange.includes(i),\n    );\n\n    for (const item of itemsOutOfRange) {\n      this.deselect(item);\n    }\n\n    for (const item of itemsInRange) {\n      this.select(item, {anchor: false});\n    }\n\n    if (itemsInRange.length) {\n      const item = itemsInRange.pop();\n      const index = this.inputs.items().findIndex(i => i === item);\n      this.rangeEndIndex.set(index);\n    }\n  }\n\n  /** Marks the given index as the start of a range selection. */\n  beginRangeSelection(index: number = this.inputs.activeIndex()) {\n    this.rangeStartIndex.set(index);\n    this.rangeEndIndex.set(index);\n  }\n\n  /** Returns the items in the list starting from the given index.  */\n  private _getItemsFromIndex(index: number) {\n    if (index === -1) {\n      return [];\n    }\n\n    const upper = Math.max(this.inputs.activeIndex(), index);\n    const lower = Math.min(this.inputs.activeIndex(), index);\n\n    const items = [];\n    for (let i = lower; i <= upper; i++) {\n      items.push(this.inputs.items()[i]);\n    }\n\n    if (this.inputs.activeIndex() < index) {\n      return items.reverse();\n    }\n\n    return items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../signal-like/signal-like';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\n\n/**\n * Represents an item in a collection, such as a listbox option, than can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadItem extends ListFocusItem {\n  /** The text used by the typeahead search. */\n  searchTerm: SignalLike<string>;\n}\n\n/**\n * Represents the required inputs for a collection that contains items that can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadInputs<T extends ListTypeaheadItem> extends ListFocusInputs<T> {\n  /** The amount of time before the typeahead search is reset. */\n  typeaheadDelay: SignalLike<number>;\n}\n\n/** Controls typeahead for a list of items. */\nexport class ListTypeahead<T extends ListTypeaheadItem> {\n  /** A reference to the timeout for resetting the typeahead search. */\n  timeout?: ReturnType<typeof setTimeout> | undefined;\n\n  /** The focus controller of the parent list. */\n  focusManager: ListFocus<T>;\n\n  /** Whether the user is actively typing a typeahead search query. */\n  isTyping = computed(() => this._query().length > 0);\n\n  /** Keeps track of the characters that typeahead search is being called with. */\n  private _query = signal('');\n\n  /** The index where that the typeahead search was initiated from. */\n  private _startIndex = signal<number | undefined>(undefined);\n\n  constructor(readonly inputs: ListTypeaheadInputs<T> & {focusManager: ListFocus<T>}) {\n    this.focusManager = inputs.focusManager;\n  }\n\n  /** Performs a typeahead search, appending the given character to the search string. */\n  search(char: string): boolean {\n    if (char.length !== 1) {\n      return false;\n    }\n\n    if (!this.isTyping() && char === ' ') {\n      return false;\n    }\n\n    if (this._startIndex() === undefined) {\n      this._startIndex.set(this.focusManager.inputs.activeIndex());\n    }\n\n    clearTimeout(this.timeout);\n    this._query.update(q => q + char.toLowerCase());\n    const item = this._getItem();\n\n    if (item) {\n      this.focusManager.focus(item);\n    }\n\n    this.timeout = setTimeout(() => {\n      this._query.set('');\n      this._startIndex.set(undefined);\n    }, this.inputs.typeaheadDelay() * 1000);\n\n    return true;\n  }\n\n  /**\n   * Returns the first item whose search term matches the\n   * current query starting from the the current anchor index.\n   */\n  private _getItem() {\n    let items = this.focusManager.inputs.items();\n    const after = items.slice(this._startIndex()! + 1);\n    const before = items.slice(0, this._startIndex()!);\n    items = after.concat(before);\n    items.push(this.inputs.items()[this._startIndex()!]);\n\n    const focusableItems = [];\n    for (const item of items) {\n      if (this.focusManager.isFocusable(item)) {\n        focusableItems.push(item);\n      }\n    }\n\n    return focusableItems.find(i => i.searchTerm().toLowerCase().startsWith(this._query()));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\nimport {\n  ListNavigation,\n  ListNavigationInputs,\n  ListNavigationItem,\n} from '../list-navigation/list-navigation';\nimport {\n  ListSelection,\n  ListSelectionInputs,\n  ListSelectionItem,\n} from '../list-selection/list-selection';\nimport {\n  ListTypeahead,\n  ListTypeaheadInputs,\n  ListTypeaheadItem,\n} from '../list-typeahead/list-typeahead';\n\n/** The selection operations that the list can perform. */\ninterface SelectOptions {\n  toggle?: boolean;\n  select?: boolean;\n  selectOne?: boolean;\n  selectRange?: boolean;\n  anchor?: boolean;\n}\n\n/** Represents an item in the list. */\nexport type ListItem<V> = ListTypeaheadItem &\n  ListNavigationItem &\n  ListSelectionItem<V> &\n  ListFocusItem;\n\n/** The necessary inputs for the list behavior. */\nexport type ListInputs<T extends ListItem<V>, V> = ListFocusInputs<T> &\n  ListNavigationInputs<T> &\n  ListSelectionInputs<T, V> &\n  ListTypeaheadInputs<T>;\n\n/** Controls the state of a list. */\nexport class List<T extends ListItem<V>, V> {\n  /** Controls navigation for the list. */\n  navigationBehavior: ListNavigation<T>;\n\n  /** Controls selection for the list. */\n  selectionBehavior: ListSelection<T, V>;\n\n  /** Controls typeahead for the list. */\n  typeaheadBehavior: ListTypeahead<T>;\n\n  /** Controls focus for the list. */\n  focusBehavior: ListFocus<T>;\n\n  /** Whether the list is disabled. */\n  disabled = computed(() => this.focusBehavior.isListDisabled());\n\n  /** The id of the current active item. */\n  activedescendant = computed(() => this.focusBehavior.getActiveDescendant());\n\n  /** The tabindex of the list. */\n  tabindex = computed(() => this.focusBehavior.getListTabindex());\n\n  /** The currently active item in the list. */\n  activeItem = computed(() => this.focusBehavior.activeItem());\n\n  /**\n   * The uncommitted index for selecting a range of options.\n   *\n   * NOTE: This is subtly distinct from the \"rangeStartIndex\" in the ListSelection behavior.\n   * The anchorIndex does not necessarily represent the start of a range, but represents the most\n   * recent index where the user showed intent to begin a range selection. Usually, this is wherever\n   * the user most recently pressed the \"Shift\" key, but if the user presses shift + space to select\n   * from the anchor, the user is not intending to start a new range from this index.\n   *\n   * In other words, \"rangeStartIndex\" is only set when a user commits to starting a range selection\n   * while \"anchorIndex\" is set whenever a user indicates they may be starting a range selection.\n   */\n  private _anchorIndex = signal(0);\n\n  /** Whether the list should wrap. Used to disable wrapping while range selecting. */\n  private _wrap = signal(true);\n\n  constructor(readonly inputs: ListInputs<T, V>) {\n    this.focusBehavior = new ListFocus(inputs);\n    this.selectionBehavior = new ListSelection({...inputs, focusManager: this.focusBehavior});\n    this.typeaheadBehavior = new ListTypeahead({...inputs, focusManager: this.focusBehavior});\n    this.navigationBehavior = new ListNavigation({\n      ...inputs,\n      focusManager: this.focusBehavior,\n      wrap: computed(() => this._wrap() && this.inputs.wrap()),\n    });\n  }\n\n  /** Returns the tabindex for the given item. */\n  getItemTabindex(item: T) {\n    return this.focusBehavior.getItemTabindex(item);\n  }\n\n  /** Navigates to the first option in the list. */\n  first(opts?: SelectOptions) {\n    this._navigate(opts, () => this.navigationBehavior.first());\n  }\n\n  /** Navigates to the last option in the list. */\n  last(opts?: SelectOptions) {\n    this._navigate(opts, () => this.navigationBehavior.last());\n  }\n\n  /** Navigates to the next option in the list. */\n  next(opts?: SelectOptions) {\n    this._navigate(opts, () => this.navigationBehavior.next());\n  }\n\n  /** Navigates to the previous option in the list. */\n  prev(opts?: SelectOptions) {\n    this._navigate(opts, () => this.navigationBehavior.prev());\n  }\n\n  /** Navigates to the given item in the list. */\n  goto(item: T, opts?: SelectOptions) {\n    this._navigate(opts, () => this.navigationBehavior.goto(item));\n  }\n\n  /** Marks the given index as the potential start of a range selection. */\n  anchor(index: number) {\n    this._anchorIndex.set(index);\n  }\n\n  /** Handles typeahead search navigation for the list. */\n  search(char: string, opts?: SelectOptions) {\n    this._navigate(opts, () => this.typeaheadBehavior.search(char));\n  }\n\n  /** Checks if the list is currently typing for typeahead search. */\n  isTyping() {\n    return this.typeaheadBehavior.isTyping();\n  }\n\n  /** Selects the currently active item in the list. */\n  select() {\n    this.selectionBehavior.select();\n  }\n\n  /** Sets the selection to only the current active item. */\n  selectOne() {\n    this.selectionBehavior.selectOne();\n  }\n\n  /** Deselects the currently active item in the list. */\n  deselect() {\n    this.selectionBehavior.deselect();\n  }\n\n  /** Deselects all items in the list. */\n  deselectAll() {\n    this.selectionBehavior.deselectAll();\n  }\n\n  /** Toggles the currently active item in the list. */\n  toggle() {\n    this.selectionBehavior.toggle();\n  }\n\n  /** Toggles the currently active item in the list, deselecting all other items. */\n  toggleOne() {\n    this.selectionBehavior.toggleOne();\n  }\n\n  /** Toggles the selection of all items in the list. */\n  toggleAll() {\n    this.selectionBehavior.toggleAll();\n  }\n\n  /** Checks if the given item is able to receive focus. */\n  isFocusable(item: T) {\n    return this.focusBehavior.isFocusable(item);\n  }\n\n  /** Handles updating selection for the list. */\n  updateSelection(opts: SelectOptions = {anchor: true}) {\n    if (opts.toggle) {\n      this.selectionBehavior.toggle();\n    }\n    if (opts.select) {\n      this.selectionBehavior.select();\n    }\n    if (opts.selectOne) {\n      this.selectionBehavior.selectOne();\n    }\n    if (opts.selectRange) {\n      this.selectionBehavior.selectRange();\n    }\n    if (!opts.anchor) {\n      this.anchor(this.selectionBehavior.rangeStartIndex());\n    }\n  }\n\n  /**\n   * Safely performs a navigation operation.\n   *\n   * Handles conditionally disabling wrapping for when a navigation\n   * operation is occurring while the user is selecting a range of options.\n   *\n   * Handles boilerplate calling of focus & selection operations. Also ensures these\n   * additional operations are only called if the navigation operation moved focus to a new option.\n   */\n  private _navigate(opts: SelectOptions = {}, operation: () => boolean) {\n    if (opts?.selectRange) {\n      this._wrap.set(false);\n      this.selectionBehavior.rangeStartIndex.set(this._anchorIndex());\n    }\n\n    const moved = operation();\n\n    if (moved) {\n      this.updateSelection(opts);\n    }\n\n    this._wrap.set(true);\n  }\n}\n"],"names":[],"mappings":"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"}