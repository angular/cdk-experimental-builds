{"version":3,"file":"column-resize.js","sources":["../../../../../../src/cdk-experimental/column-resize/selectors.ts","../../../../../../src/cdk-experimental/column-resize/column-resize.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-notifier.ts","../../../../../../src/cdk-experimental/column-resize/event-dispatcher.ts","../../../../../../src/cdk-experimental/column-resize/resize-strategy.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/constants.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/column-resize.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/column-resize-flex.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/default-enabled-column-resize.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-directives/default-enabled-column-resize-flex.ts","../../../../../../src/cdk-experimental/column-resize/column-resize-module.ts","../../../../../../src/cdk-experimental/column-resize/column-size-store.ts","../../../../../../src/cdk-experimental/column-resize/resize-ref.ts","../../../../../../src/cdk-experimental/column-resize/resizable.ts","../../../../../../src/cdk-experimental/column-resize/overlay-handle.ts","../../../../../../src/cdk-experimental/column-resize/public-api.ts","../../../../../../src/cdk-experimental/column-resize/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO: Figure out how to remove `mat-` classes from the CDK part of the\n// column resize implementation.\n\nexport const HEADER_CELL_SELECTOR = '.cdk-header-cell, .mat-header-cell';\n\nexport const HEADER_ROW_SELECTOR = '.cdk-header-row, .mat-header-row';\n\nexport const RESIZE_OVERLAY_SELECTOR = '.mat-column-resize-overlay-thumb';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterViewInit, Directive, ElementRef, NgZone, OnDestroy} from '@angular/core';\nimport {fromEvent, merge, ReplaySubject} from 'rxjs';\nimport {filter, map, mapTo, pairwise, startWith, take, takeUntil} from 'rxjs/operators';\n\nimport {_closest, _matches} from '@angular/cdk-experimental/popover-edit';\n\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from './column-resize-notifier';\nimport {HEADER_CELL_SELECTOR, RESIZE_OVERLAY_SELECTOR} from './selectors';\nimport {HeaderRowEventDispatcher} from './event-dispatcher';\n\nconst HOVER_OR_ACTIVE_CLASS = 'cdk-column-resize-hover-or-active';\nconst WITH_RESIZED_COLUMN_CLASS = 'cdk-column-resize-with-resized-column';\n\nlet nextId = 0;\n\n/**\n * Base class for ColumnResize directives which attach to mat-table elements to\n * provide common events and services for column resizing.\n */\n@Directive()\nexport abstract class ColumnResize implements AfterViewInit, OnDestroy {\n  protected readonly destroyed = new ReplaySubject<void>();\n\n  /* Publicly accessible interface for triggering and being notified of resizes. */\n  abstract readonly columnResizeNotifier: ColumnResizeNotifier;\n\n  /* ElementRef that this directive is attached to. Exposed For use by column-level directives */\n  abstract readonly elementRef: ElementRef<HTMLElement>;\n\n  protected abstract readonly eventDispatcher: HeaderRowEventDispatcher;\n  protected abstract readonly ngZone: NgZone;\n  protected abstract readonly notifier: ColumnResizeNotifierSource;\n\n  /** Unique ID for this table instance. */\n  protected readonly selectorId = `${++nextId}`;\n\n  /** The id attribute of the table, if specified. */\n  id?: string;\n\n  ngAfterViewInit() {\n    this.elementRef.nativeElement!.classList.add(this.getUniqueCssClass());\n\n    this._listenForRowHoverEvents();\n    this._listenForResizeActivity();\n    this._listenForHoverActivity();\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  /** Gets the unique CSS class name for this table instance. */\n  getUniqueCssClass() {\n    return `cdk-column-resize-${this.selectorId}`;\n  }\n\n  /** Called when a column in the table is resized. Applies a css class to the table element. */\n  setResized() {\n    this.elementRef.nativeElement!.classList.add(WITH_RESIZED_COLUMN_CLASS);\n  }\n\n  private _listenForRowHoverEvents() {\n    this.ngZone.runOutsideAngular(() => {\n      const element = this.elementRef.nativeElement!;\n\n      fromEvent<MouseEvent>(element, 'mouseover').pipe(\n          map(event => _closest(event.target, HEADER_CELL_SELECTOR)),\n          takeUntil(this.destroyed),\n          ).subscribe(this.eventDispatcher.headerCellHovered);\n      fromEvent<MouseEvent>(element, 'mouseleave').pipe(\n          filter(event => !!event.relatedTarget &&\n              !_matches(event.relatedTarget as Element, RESIZE_OVERLAY_SELECTOR)),\n          mapTo(null),\n          takeUntil(this.destroyed),\n          ).subscribe(this.eventDispatcher.headerCellHovered);\n    });\n  }\n\n  private _listenForResizeActivity() {\n    merge(\n        this.eventDispatcher.overlayHandleActiveForCell.pipe(mapTo(undefined)),\n        this.notifier.triggerResize.pipe(mapTo(undefined)),\n        this.notifier.resizeCompleted.pipe(mapTo(undefined))\n    ).pipe(\n        takeUntil(this.destroyed),\n        take(1),\n    ).subscribe(() => {\n      this.setResized();\n    });\n  }\n\n  private _listenForHoverActivity() {\n    this.eventDispatcher.headerRowHoveredOrActiveDistinct.pipe(\n        startWith(null),\n        pairwise(),\n        takeUntil(this.destroyed),\n    ).subscribe(([previousRow, hoveredRow]) => {\n      if (hoveredRow) {\n        hoveredRow.classList.add(HOVER_OR_ACTIVE_CLASS);\n      }\n      if (previousRow) {\n        previousRow.classList.remove(HOVER_OR_ACTIVE_CLASS);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** Indicates the width of a column. */\nexport interface ColumnSize {\n  /** The ID/name of the column, as defined in CdkColumnDef. */\n  readonly columnId: string;\n\n  /** The width in pixels of the column. */\n  readonly size: number;\n\n  /** The width in pixels of the column prior to this update, if known. */\n  readonly previousSize?: number;\n}\n\n/** Interface describing column size changes. */\nexport interface ColumnSizeAction extends ColumnSize {\n  /**\n   * Whether the resize action should be applied instantaneously. False for events triggered during\n   * a UI-triggered resize (such as with the mouse) until the mouse button is released. True\n   * for all programatically triggered resizes.\n   */\n  readonly completeImmediately?: boolean;\n}\n\n/**\n * Originating source of column resize events within a table.\n * @docs-private\n */\n@Injectable()\nexport class ColumnResizeNotifierSource {\n  /** Emits when an in-progress resize is canceled. */\n  readonly resizeCanceled = new Subject<ColumnSizeAction>();\n\n  /** Emits when a resize is applied. */\n  readonly resizeCompleted = new Subject<ColumnSize>();\n\n  /** Triggers a resize action. */\n  readonly triggerResize = new Subject<ColumnSizeAction>();\n}\n\n/** Service for triggering column resizes imperatively or being notified of them. */\n@Injectable()\nexport class ColumnResizeNotifier {\n  /** Emits whenever a column is resized. */\n  readonly resizeCompleted: Observable<ColumnSize> = this._source.resizeCompleted.asObservable();\n\n  constructor(private readonly _source: ColumnResizeNotifierSource) {}\n\n  /** Instantly resizes the specified column. */\n  resize(columnId: string, size: number): void {\n    this._source.triggerResize.next({columnId, size, completeImmediately: true});\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone} from '@angular/core';\nimport {combineLatest, MonoTypeOperatorFunction, Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged, map, share, skip, startWith} from 'rxjs/operators';\n\nimport {_closest} from '@angular/cdk-experimental/popover-edit';\n\nimport {HEADER_ROW_SELECTOR} from './selectors';\n\n/** Coordinates events between the column resize directives. */\n@Injectable()\nexport class HeaderRowEventDispatcher {\n  /**\n   * Emits the currently hovered header cell or null when no header cells are hovered.\n   * Exposed publicly for events to feed in, but subscribers should use headerCellHoveredDistinct,\n   * defined below.\n   */\n  readonly headerCellHovered = new Subject<Element|null>();\n\n  /**\n   * Emits the header cell for which a user-triggered resize is active or null\n   * when no resize is in progress.\n   */\n  readonly overlayHandleActiveForCell = new Subject<Element|null>();\n\n  constructor(private readonly _ngZone: NgZone) {}\n\n  /** Distinct and shared version of headerCellHovered. */\n  readonly headerCellHoveredDistinct = this.headerCellHovered.pipe(\n      distinctUntilChanged(),\n      share(),\n  );\n\n  /**\n   * Emits the header that is currently hovered or hosting an active resize event (with active\n   * taking precedence).\n   */\n  readonly headerRowHoveredOrActiveDistinct = combineLatest(\n      this.headerCellHoveredDistinct.pipe(\n          map(cell => _closest(cell, HEADER_ROW_SELECTOR)),\n          startWith(null),\n          distinctUntilChanged(),\n       ),\n      this.overlayHandleActiveForCell.pipe(\n          map(cell => _closest(cell, HEADER_ROW_SELECTOR)),\n          startWith(null),\n          distinctUntilChanged(),\n      ),\n  ).pipe(\n      skip(1), // Ignore initial [null, null] emission.\n      map(([hovered, active]) => active || hovered),\n      distinctUntilChanged(),\n      share(),\n  );\n\n  private readonly _headerRowHoveredOrActiveDistinctReenterZone =\n      this.headerRowHoveredOrActiveDistinct.pipe(\n          this._enterZone(),\n          share(),\n      );\n\n  // Optimization: Share row events observable with subsequent callers.\n  // At startup, calls will be sequential by row (and typically there's only one).\n  private _lastSeenRow: Element|null = null;\n  private _lastSeenRowHover: Observable<boolean>|null = null;\n\n  /**\n   * Emits whether the specified row should show its overlay controls.\n   * Emission occurs within the NgZone.\n   */\n  resizeOverlayVisibleForHeaderRow(row: Element): Observable<boolean> {\n    if (row !== this._lastSeenRow) {\n      this._lastSeenRow = row;\n      this._lastSeenRowHover = this._headerRowHoveredOrActiveDistinctReenterZone.pipe(\n        map(hoveredRow => hoveredRow === row),\n        distinctUntilChanged(),\n        share(),\n      );\n    }\n\n    return this._lastSeenRowHover!;\n  }\n\n  private _enterZone<T>(): MonoTypeOperatorFunction<T> {\n    return (source: Observable<T>) =>\n        new Observable<T>((observer) => source.subscribe({\n          next: (value) => this._ngZone.run(() => observer.next(value)),\n          error: (err) => observer.error(err),\n          complete: () => observer.complete()\n        }));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, OnDestroy, Provider} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\nimport {ColumnResize} from './column-resize';\n\n/**\n * Provides an implementation for resizing a column.\n * The details of how resizing works for tables for flex mat-tables are quite different.\n */\n@Injectable()\nexport abstract class ResizeStrategy {\n  protected abstract readonly columnResize: ColumnResize;\n\n  /** Updates the width of the specified column. */\n  abstract applyColumnSize(\n      cssFriendlyColumnName: string,\n      columnHeader: HTMLElement,\n      sizeInPx: number,\n      previousSizeInPx?: number): void;\n\n  /** Applies a minimum width to the specified column, updating its current width as needed. */\n  abstract applyMinColumnSize(\n      cssFriendlyColumnName: string,\n      columnHeader: HTMLElement,\n      minSizeInPx: number): void;\n\n  /** Applies a maximum width to the specified column, updating its current width as needed. */\n  abstract applyMaxColumnSize(\n      cssFriendlyColumnName: string,\n      columnHeader: HTMLElement,\n      minSizeInPx: number): void;\n\n  /** Adjusts the width of the table element by the specified delta. */\n  protected updateTableWidth(delta: number): void {\n    const table = this.columnResize.elementRef.nativeElement;\n    const tableWidth = getElementWidth(table);\n\n    table.style.width = coerceCssPixelValue(tableWidth + delta);\n  }\n}\n\n/**\n * The optimially performing resize strategy for &lt;table&gt; elements with table-layout: fixed.\n * Tested against and outperformed:\n *   CSS selector\n *   CSS selector w/ CSS variable\n *   Updating all cell nodes\n */\n@Injectable()\nexport class TableLayoutFixedResizeStrategy extends ResizeStrategy {\n  constructor(protected readonly columnResize: ColumnResize) {\n    super();\n  }\n\n  applyColumnSize(_: string, columnHeader: HTMLElement, sizeInPx: number,\n      previousSizeInPx?: number): void {\n    const delta = sizeInPx - (previousSizeInPx ?? getElementWidth(columnHeader));\n\n    columnHeader.style.width = coerceCssPixelValue(sizeInPx);\n\n    this.updateTableWidth(delta);\n  }\n\n  applyMinColumnSize(_: string, columnHeader: HTMLElement, sizeInPx: number): void {\n    const currentWidth = getElementWidth(columnHeader);\n    const newWidth = Math.max(currentWidth, sizeInPx);\n\n    this.applyColumnSize(_, columnHeader, newWidth, currentWidth);\n  }\n\n  applyMaxColumnSize(_: string, columnHeader: HTMLElement, sizeInPx: number): void {\n    const currentWidth = getElementWidth(columnHeader);\n    const newWidth = Math.min(currentWidth, sizeInPx);\n\n    this.applyColumnSize(_, columnHeader, newWidth, currentWidth);\n  }\n}\n\n/**\n * The optimally performing resize strategy for flex mat-tables.\n * Tested against and outperformed:\n *   CSS selector w/ CSS variable\n *   Updating all mat-cell nodes\n */\n@Injectable()\nexport class CdkFlexTableResizeStrategy extends ResizeStrategy implements OnDestroy {\n  private readonly _document: Document;\n  private readonly _columnIndexes = new Map<string, number>();\n  private readonly _columnProperties = new Map<string, Map<string, string>>();\n\n  private _styleElement?: HTMLStyleElement;\n  private _indexSequence = 0;\n\n  protected readonly defaultMinSize = 0;\n  protected readonly defaultMaxSize = Number.MAX_SAFE_INTEGER;\n\n  constructor(\n      protected readonly columnResize: ColumnResize,\n      @Inject(DOCUMENT) document: any) {\n    super();\n    this._document = document;\n  }\n\n  applyColumnSize(cssFriendlyColumnName: string, columnHeader: HTMLElement,\n      sizeInPx: number, previousSizeInPx?: number): void {\n    // Optimization: Check applied width first as we probably set it already before reading\n    // offsetWidth which triggers layout.\n    const delta = sizeInPx - (previousSizeInPx ??\n        (this._getAppliedWidth(cssFriendlyColumnName) || columnHeader.offsetWidth));\n\n    const cssSize = coerceCssPixelValue(sizeInPx);\n\n    this._applyProperty(cssFriendlyColumnName, 'flex', `0 0.01 ${cssSize}`);\n    this.updateTableWidth(delta);\n  }\n\n  applyMinColumnSize(cssFriendlyColumnName: string, _: HTMLElement, sizeInPx: number): void {\n    const cssSize = coerceCssPixelValue(sizeInPx);\n\n    this._applyProperty(cssFriendlyColumnName, 'min-width', cssSize,\n        sizeInPx !== this.defaultMinSize);\n  }\n\n  applyMaxColumnSize(cssFriendlyColumnName: string, _: HTMLElement, sizeInPx: number): void {\n    const cssSize = coerceCssPixelValue(sizeInPx);\n\n    this._applyProperty(cssFriendlyColumnName, 'max-width', cssSize,\n        sizeInPx !== this.defaultMaxSize);\n  }\n\n  protected getColumnCssClass(cssFriendlyColumnName: string): string {\n    return `cdk-column-${cssFriendlyColumnName}`;\n  }\n\n  ngOnDestroy(): void {\n    // TODO: Use remove() once we're off IE11.\n    if (this._styleElement && this._styleElement.parentNode) {\n      this._styleElement.parentNode.removeChild(this._styleElement);\n      this._styleElement = undefined;\n    }\n  }\n\n  private _getPropertyValue(cssFriendlyColumnName: string, key: string): string|undefined {\n    const properties = this._getColumnPropertiesMap(cssFriendlyColumnName);\n    return properties.get(key);\n  }\n\n  private _getAppliedWidth(cssFriendslyColumnName: string): number {\n    return coercePixelsFromFlexValue(this._getPropertyValue(cssFriendslyColumnName, 'flex'));\n  }\n\n  private _applyProperty(\n      cssFriendlyColumnName: string,\n      key: string,\n      value: string,\n      enable = true): void {\n    const properties = this._getColumnPropertiesMap(cssFriendlyColumnName);\n\n    if (enable) {\n      properties.set(key, value);\n    } else {\n      properties.delete(key);\n    }\n    this._applySizeCss(cssFriendlyColumnName);\n  }\n\n  private _getStyleSheet(): CSSStyleSheet {\n    if (!this._styleElement) {\n      this._styleElement = this._document.createElement('style');\n      this._styleElement.appendChild(this._document.createTextNode(''));\n      this._document.head.appendChild(this._styleElement);\n    }\n\n    return this._styleElement.sheet as CSSStyleSheet;\n  }\n\n  private _getColumnPropertiesMap(cssFriendlyColumnName: string): Map<string, string> {\n    let properties = this._columnProperties.get(cssFriendlyColumnName);\n    if (properties === undefined) {\n      properties = new Map<string, string>();\n      this._columnProperties.set(cssFriendlyColumnName, properties);\n    }\n    return properties;\n  }\n\n  private _applySizeCss(cssFriendlyColumnName: string) {\n    const properties = this._getColumnPropertiesMap(cssFriendlyColumnName);\n    const propertyKeys = Array.from(properties.keys());\n\n    let index = this._columnIndexes.get(cssFriendlyColumnName);\n    if (index === undefined) {\n      if (!propertyKeys.length) {\n        // Nothing to set or unset.\n        return;\n      }\n\n      index = this._indexSequence++;\n      this._columnIndexes.set(cssFriendlyColumnName, index);\n    } else {\n      this._getStyleSheet().deleteRule(index);\n    }\n\n    const columnClassName = this.getColumnCssClass(cssFriendlyColumnName);\n    const tableClassName = this.columnResize.getUniqueCssClass();\n\n    const selector = `.${tableClassName} .${columnClassName}`;\n    const body = propertyKeys.map(key => `${key}:${properties.get(key)}`).join(';');\n\n    this._getStyleSheet().insertRule(`${selector} {${body}}`, index!);\n  }\n}\n\n/** Converts CSS pixel values to numbers, eg \"123px\" to 123. Returns NaN for non pixel values. */\nfunction coercePixelsFromCssValue(cssValue: string): number {\n  return Number(cssValue.match(/(\\d+)px/)?.[1]);\n}\n\n/** Gets the style.width pixels on the specified element if present, otherwise its offsetWidth. */\nfunction getElementWidth(element: HTMLElement) {\n  // Optimization: Check style.width first as we probably set it already before reading\n  // offsetWidth which triggers layout.\n  return coercePixelsFromCssValue(element.style.width) || element.offsetWidth;\n}\n\n/**\n * Converts CSS flex values as set in CdkFlexTableResizeStrategy to numbers,\n * eg \"0 0.01 123px\" to 123.\n */\nfunction coercePixelsFromFlexValue(flexValue: string|undefined): number {\n  return Number(flexValue?.match(/0 0\\.01 (\\d+)px/)?.[1]);\n}\n\nexport const TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER: Provider = {\n  provide: ResizeStrategy,\n  useClass: TableLayoutFixedResizeStrategy,\n};\nexport const FLEX_RESIZE_STRATEGY_PROVIDER: Provider = {\n  provide: ResizeStrategy,\n  useClass: CdkFlexTableResizeStrategy,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Provider} from '@angular/core';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n  FLEX_RESIZE_STRATEGY_PROVIDER,\n} from '../resize-strategy';\n\nconst PROVIDERS: Provider[] = [\n  ColumnResizeNotifier,\n  HeaderRowEventDispatcher,\n  ColumnResizeNotifierSource,\n];\n\nexport const TABLE_PROVIDERS: Provider[] = [\n  ...PROVIDERS,\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n];\nexport const FLEX_PROVIDERS: Provider[] = [...PROVIDERS, FLEX_RESIZE_STRATEGY_PROVIDER];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\nimport {ColumnResize} from '../column-resize';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {TABLE_PROVIDERS} from './constants';\n\n/**\n * Explicitly enables column resizing for a table-based cdk-table.\n * Individual columns must be annotated specifically.\n */\n@Directive({\n  selector: 'table[cdk-table][columnResize]',\n  providers: [\n    ...TABLE_PROVIDERS,\n    {provide: ColumnResize, useExisting: CdkColumnResize},\n  ],\n})\nexport class CdkColumnResize extends ColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\nimport {ColumnResize} from '../column-resize';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {FLEX_PROVIDERS} from './constants';\n\n/**\n * Explicitly enables column resizing for a flexbox-based cdk-table.\n * Individual columns must be annotated specifically.\n */\n@Directive({\n  selector: 'cdk-table[columnResize]',\n  providers: [\n    ...FLEX_PROVIDERS,\n    {provide: ColumnResize, useExisting: CdkColumnResizeFlex},\n  ],\n})\nexport class CdkColumnResizeFlex extends ColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\nimport {ColumnResize} from '../column-resize';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {TABLE_PROVIDERS} from './constants';\n\n/**\n * Implicitly enables column resizing for a table-based cdk-table.\n * Individual columns will be resizable unless opted out.\n */\n@Directive({\n  selector: 'table[cdk-table]',\n  providers: [\n    ...TABLE_PROVIDERS,\n    {provide: ColumnResize, useExisting: CdkDefaultEnabledColumnResize},\n  ],\n})\nexport class CdkDefaultEnabledColumnResize extends ColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\nimport {ColumnResize} from '../column-resize';\nimport {ColumnResizeNotifier, ColumnResizeNotifierSource} from '../column-resize-notifier';\nimport {HeaderRowEventDispatcher} from '../event-dispatcher';\nimport {FLEX_PROVIDERS} from './constants';\n\n/**\n * Implicitly enables column resizing for a flex cdk-table.\n * Individual columns will be resizable unless opted out.\n */\n@Directive({\n  selector: 'cdk-table',\n  providers: [\n    ...FLEX_PROVIDERS,\n    {provide: ColumnResize, useExisting: CdkDefaultEnabledColumnResizeFlex},\n  ],\n})\nexport class CdkDefaultEnabledColumnResizeFlex extends ColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkColumnResize} from './column-resize-directives/column-resize';\nimport {CdkColumnResizeFlex} from './column-resize-directives/column-resize-flex';\nimport {\n  CdkDefaultEnabledColumnResize\n} from './column-resize-directives/default-enabled-column-resize';\nimport {\n  CdkDefaultEnabledColumnResizeFlex\n} from './column-resize-directives/default-enabled-column-resize-flex';\n\n/**\n * One of two NgModules for use with CdkColumnResize.\n * When using this module, columns are resizable by default.\n */\n@NgModule({\n  declarations: [CdkDefaultEnabledColumnResize, CdkDefaultEnabledColumnResizeFlex],\n  exports: [CdkDefaultEnabledColumnResize, CdkDefaultEnabledColumnResizeFlex],\n})\nexport class CdkColumnResizeDefaultEnabledModule {}\n\n/**\n * One of two NgModules for use with CdkColumnResize.\n * When using this module, columns are not resizable by default.\n */\n@NgModule({\n  declarations: [CdkColumnResize, CdkColumnResizeFlex],\n  exports: [CdkColumnResize, CdkColumnResizeFlex],\n})\nexport class CdkColumnResizeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * Can be provided by the host application to enable persistence of column resize state.\n */\n@Injectable()\nexport abstract class ColumnSizeStore {\n  /** Returns the persisted size of the specified column in the specified table. */\n  abstract getSize(tableId: string, columnId: string): number;\n\n  /** Persists the size of the specified column in the specified table. */\n  abstract setSize(tableId: string, columnId: string): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {OverlayRef} from '@angular/cdk/overlay';\n\n/** Tracks state of resize events in progress. */\nexport class ResizeRef {\n  constructor(\n      readonly origin: ElementRef,\n      readonly overlayRef: OverlayRef,\n      readonly minWidthPx: number,\n      readonly maxWidthPx: number, ) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  Injector,\n  NgZone,\n  OnDestroy,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, PortalInjector} from '@angular/cdk/portal';\nimport {Overlay, OverlayRef} from '@angular/cdk/overlay';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {merge, ReplaySubject} from 'rxjs';\nimport {filter, takeUntil} from 'rxjs/operators';\n\nimport {_closest} from '@angular/cdk-experimental/popover-edit';\n\nimport {HEADER_ROW_SELECTOR} from './selectors';\nimport {ResizeOverlayHandle} from './overlay-handle';\nimport {ColumnResize} from './column-resize';\nimport {ColumnSizeAction, ColumnResizeNotifierSource} from './column-resize-notifier';\nimport {HeaderRowEventDispatcher} from './event-dispatcher';\nimport {ResizeRef} from './resize-ref';\nimport {ResizeStrategy} from './resize-strategy';\n\nconst OVERLAY_ACTIVE_CLASS = 'cdk-resizable-overlay-thumb-active';\n\n/**\n * Base class for Resizable directives which are applied to column headers to make those columns\n * resizable.\n */\n@Directive()\nexport abstract class Resizable<HandleComponent extends ResizeOverlayHandle>\n    implements AfterViewInit, OnDestroy {\n  protected minWidthPxInternal: number = 0;\n  protected maxWidthPxInternal: number = Number.MAX_SAFE_INTEGER;\n\n  protected inlineHandle?: HTMLElement;\n  protected overlayRef?: OverlayRef;\n  protected readonly destroyed = new ReplaySubject<void>();\n\n  protected abstract readonly columnDef: CdkColumnDef;\n  protected abstract readonly columnResize: ColumnResize;\n  protected abstract readonly directionality: Directionality;\n  protected abstract readonly document: Document;\n  protected abstract readonly elementRef: ElementRef;\n  protected abstract readonly eventDispatcher: HeaderRowEventDispatcher;\n  protected abstract readonly injector: Injector;\n  protected abstract readonly ngZone: NgZone;\n  protected abstract readonly overlay: Overlay;\n  protected abstract readonly resizeNotifier: ColumnResizeNotifierSource;\n  protected abstract readonly resizeStrategy: ResizeStrategy;\n  protected abstract readonly viewContainerRef: ViewContainerRef;\n\n  /** The minimum width to allow the column to be sized to. */\n  get minWidthPx(): number {\n    return this.minWidthPxInternal;\n  }\n  set minWidthPx(value: number) {\n    this.minWidthPxInternal = value;\n\n    if (this.elementRef.nativeElement) {\n      this.columnResize.setResized();\n      this._applyMinWidthPx();\n    }\n  }\n\n  /** The maximum width to allow the column to be sized to. */\n  get maxWidthPx(): number {\n    return this.maxWidthPxInternal;\n  }\n  set maxWidthPx(value: number) {\n    this.maxWidthPxInternal = value;\n\n    if (this.elementRef.nativeElement) {\n      this.columnResize.setResized();\n      this._applyMaxWidthPx();\n    }\n  }\n\n  ngAfterViewInit() {\n    this._listenForRowHoverEvents();\n    this._listenForResizeEvents();\n    this._appendInlineHandle();\n    this._applyMinWidthPx();\n    this._applyMaxWidthPx();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n\n    if (this.inlineHandle) {\n      this.elementRef.nativeElement!.removeChild(this.inlineHandle);\n    }\n\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n    }\n  }\n\n  protected abstract getInlineHandleCssClassName(): string;\n\n  protected abstract getOverlayHandleComponentType(): Type<HandleComponent>;\n\n  private _createOverlayForHandle(): OverlayRef {\n    // Use of overlays allows us to properly capture click events spanning parts\n    // of two table cells and is also useful for displaying a resize thumb\n    // over both cells and extending it down the table as needed.\n\n    const isRtl = this.directionality.value === 'rtl';\n    const positionStrategy = this.overlay.position()\n        .flexibleConnectedTo(this.elementRef.nativeElement!)\n        .withFlexibleDimensions(false)\n        .withGrowAfterOpen(false)\n        .withPush(false)\n        .withDefaultOffsetX(isRtl ? 1 : 0)\n        .withPositions([{\n          originX: isRtl ? 'start' : 'end',\n          originY: 'top',\n          overlayX: 'center',\n          overlayY: 'top',\n        }]);\n\n    return this.overlay.create({\n      // Always position the overlay based on left-indexed coordinates.\n      direction: 'ltr',\n      disposeOnNavigation: true,\n      positionStrategy,\n      scrollStrategy: this.overlay.scrollStrategies.reposition(),\n      width: '16px',\n    });\n  }\n\n  private _listenForRowHoverEvents(): void {\n    const element = this.elementRef.nativeElement!;\n    const takeUntilDestroyed = takeUntil<boolean>(this.destroyed);\n\n\n    this.eventDispatcher.resizeOverlayVisibleForHeaderRow(_closest(element, HEADER_ROW_SELECTOR)!)\n        .pipe(takeUntilDestroyed).subscribe(hoveringRow => {\n      if (hoveringRow) {\n        if (!this.overlayRef) {\n          this.overlayRef = this._createOverlayForHandle();\n        }\n\n        this._showHandleOverlay();\n      } else if (this.overlayRef) {\n        // todo - can't detach during an active resize - need to work that out\n        this.overlayRef.detach();\n      }\n    });\n  }\n\n  private _listenForResizeEvents() {\n    const takeUntilDestroyed = takeUntil<ColumnSizeAction>(this.destroyed);\n\n    merge(\n        this.resizeNotifier.resizeCanceled,\n        this.resizeNotifier.triggerResize,\n    ).pipe(\n        takeUntilDestroyed,\n        filter(columnSize => columnSize.columnId === this.columnDef.name),\n    ).subscribe(({size, previousSize, completeImmediately}) => {\n      this.elementRef.nativeElement!.classList.add(OVERLAY_ACTIVE_CLASS);\n      this._applySize(size, previousSize);\n\n      if (completeImmediately) {\n        this._completeResizeOperation();\n      }\n    });\n\n    merge(\n        this.resizeNotifier.resizeCanceled,\n        this.resizeNotifier.resizeCompleted,\n    ).pipe(takeUntilDestroyed).subscribe(columnSize => {\n      this._cleanUpAfterResize(columnSize);\n    });\n  }\n\n  private _completeResizeOperation(): void {\n    this.ngZone.run(() => {\n      this.resizeNotifier.resizeCompleted.next({\n        columnId: this.columnDef.name,\n        size: this.elementRef.nativeElement!.offsetWidth,\n      });\n    });\n  }\n\n  private _cleanUpAfterResize(columnSize: ColumnSizeAction): void {\n    this.elementRef.nativeElement!.classList.remove(OVERLAY_ACTIVE_CLASS);\n\n    if (this.overlayRef && this.overlayRef.hasAttached()) {\n      this._updateOverlayHandleHeight();\n      this.overlayRef.updatePosition();\n\n      if (columnSize.columnId === this.columnDef.name) {\n        this.inlineHandle!.focus();\n      }\n    }\n  }\n\n  private _createHandlePortal(): ComponentPortal<HandleComponent> {\n    const injector = new PortalInjector(this.injector, new WeakMap([[\n      ResizeRef,\n      new ResizeRef(this.elementRef, this.overlayRef!, this.minWidthPx, this.maxWidthPx),\n    ]]));\n    return new ComponentPortal(this.getOverlayHandleComponentType(),\n        this.viewContainerRef, injector);\n  }\n\n  private _showHandleOverlay(): void {\n    this._updateOverlayHandleHeight();\n    this.overlayRef!.attach(this._createHandlePortal());\n  }\n\n  private _updateOverlayHandleHeight() {\n    this.overlayRef!.updateSize({height: this.elementRef.nativeElement!.offsetHeight});\n  }\n\n  private _applySize(sizeInPixels: number, previousSize?: number): void {\n    const sizeToApply = Math.min(Math.max(sizeInPixels, this.minWidthPx, 0), this.maxWidthPx);\n\n    this.resizeStrategy.applyColumnSize(this.columnDef.cssClassFriendlyName,\n        this.elementRef.nativeElement!, sizeToApply, previousSize);\n  }\n\n  private _applyMinWidthPx(): void {\n    this.resizeStrategy.applyMinColumnSize(this.columnDef.cssClassFriendlyName,\n        this.elementRef.nativeElement, this.minWidthPx);\n  }\n\n  private _applyMaxWidthPx(): void {\n    this.resizeStrategy.applyMaxColumnSize(this.columnDef.cssClassFriendlyName,\n        this.elementRef.nativeElement, this.maxWidthPx);\n  }\n\n  private _appendInlineHandle(): void {\n    this.inlineHandle = this.document.createElement('div');\n    this.inlineHandle.tabIndex = 0;\n    this.inlineHandle.className = this.getInlineHandleCssClassName();\n\n    // TODO: Apply correct aria role (probably slider) after a11y spec questions resolved.\n\n    this.elementRef.nativeElement!.appendChild(this.inlineHandle);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterViewInit, Directive, ElementRef, OnDestroy, NgZone} from '@angular/core';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {fromEvent, ReplaySubject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  pairwise,\n  startWith,\n  takeUntil,\n} from 'rxjs/operators';\n\nimport {_closest} from '@angular/cdk-experimental/popover-edit';\n\nimport {HEADER_CELL_SELECTOR} from './selectors';\nimport {ColumnResizeNotifierSource} from './column-resize-notifier';\nimport {HeaderRowEventDispatcher} from './event-dispatcher';\nimport {ResizeRef} from './resize-ref';\n\n// TODO: Take another look at using cdk drag drop. IIRC I ran into a couple\n// good reasons for not using it but I don't remember what they were at this point.\n/**\n * Base class for a component shown over the edge of a resizable column that is responsible\n * for handling column resize mouse events and displaying any visible UI on the column edge.\n */\n@Directive()\nexport abstract class ResizeOverlayHandle implements AfterViewInit, OnDestroy {\n  protected readonly destroyed = new ReplaySubject<void>();\n\n  protected abstract readonly columnDef: CdkColumnDef;\n  protected abstract readonly document: Document;\n  protected abstract readonly directionality: Directionality;\n  protected abstract readonly elementRef: ElementRef;\n  protected abstract readonly eventDispatcher: HeaderRowEventDispatcher;\n  protected abstract readonly ngZone: NgZone;\n  protected abstract readonly resizeNotifier: ColumnResizeNotifierSource;\n  protected abstract readonly resizeRef: ResizeRef;\n\n  ngAfterViewInit() {\n    this._listenForMouseEvents();\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  private _listenForMouseEvents() {\n    this.ngZone.runOutsideAngular(() => {\n      const takeUntilDestroyed = takeUntil<MouseEvent>(this.destroyed);\n\n      fromEvent<MouseEvent>(this.elementRef.nativeElement!, 'mouseenter').pipe(\n          takeUntilDestroyed,\n          mapTo(this.resizeRef.origin.nativeElement!),\n      ).subscribe(cell => this.eventDispatcher.headerCellHovered.next(cell));\n\n      fromEvent<MouseEvent>(this.elementRef.nativeElement!, 'mouseleave').pipe(\n          takeUntilDestroyed,\n          map(event => event.relatedTarget &&\n              _closest(event.relatedTarget as Element, HEADER_CELL_SELECTOR)),\n      ).subscribe(cell => this.eventDispatcher.headerCellHovered.next(cell));\n\n      fromEvent<MouseEvent>(this.elementRef.nativeElement!, 'mousedown')\n          .pipe(takeUntilDestroyed).subscribe(mousedownEvent => {\n        this._dragStarted(mousedownEvent);\n      });\n    });\n  }\n\n  private _dragStarted(mousedownEvent: MouseEvent) {\n    // Only allow dragging using the left mouse button.\n    if (mousedownEvent.button !== 0) {\n      return;\n    }\n\n    const mouseup = fromEvent<MouseEvent>(this.document, 'mouseup');\n    const mousemove = fromEvent<MouseEvent>(this.document, 'mousemove');\n    const escape = fromEvent<KeyboardEvent>(this.document, 'keyup')\n        .pipe(filter(event => event.keyCode === ESCAPE));\n\n    const startX = mousedownEvent.screenX;\n\n    const initialSize = this._getOriginWidth();\n    let overlayOffset = this._getOverlayOffset();\n    let originOffset = this._getOriginOffset();\n    let size = initialSize;\n    let overshot = 0;\n\n    this.updateResizeActive(true);\n\n    mouseup.pipe(takeUntil(escape), takeUntil(this.destroyed)).subscribe(({screenX}) => {\n      this._notifyResizeEnded(size, screenX !== startX);\n    });\n\n    escape.pipe(takeUntil(mouseup), takeUntil(this.destroyed)).subscribe(() => {\n      this._notifyResizeEnded(initialSize);\n    });\n\n    mousemove.pipe(\n        map(({screenX}) => screenX),\n        startWith(startX),\n        distinctUntilChanged(),\n        pairwise(),\n        takeUntil(mouseup),\n        takeUntil(escape),\n        takeUntil(this.destroyed),\n    ).subscribe(([prevX, currX]) => {\n      let deltaX = currX - prevX;\n\n      // If the mouse moved further than the resize was able to match, limit the\n      // movement of the overlay to match the actual size and position of the origin.\n      if (overshot !== 0) {\n        if (overshot < 0 && deltaX < 0 || overshot > 0 && deltaX > 0) {\n          overshot += deltaX;\n          return;\n        } else {\n          const remainingOvershot = overshot + deltaX;\n          overshot = overshot > 0 ?\n              Math.max(remainingOvershot, 0) : Math.min(remainingOvershot, 0);\n          deltaX = remainingOvershot - overshot;\n\n          if (deltaX === 0) {\n            return;\n          }\n        }\n      }\n\n      let computedNewSize: number = size + (this._isLtr() ? deltaX : -deltaX);\n      computedNewSize = Math.min(\n          Math.max(computedNewSize, this.resizeRef.minWidthPx, 0), this.resizeRef.maxWidthPx);\n\n      this.resizeNotifier.triggerResize.next(\n          {columnId: this.columnDef.name, size: computedNewSize, previousSize: size});\n\n      const originNewSize = this._getOriginWidth();\n      const originNewOffset = this._getOriginOffset();\n      const originOffsetDeltaX = originNewOffset - originOffset;\n      const originSizeDeltaX = originNewSize - size;\n      size = originNewSize;\n      originOffset = originNewOffset;\n\n      overshot += deltaX + (this._isLtr() ? -originSizeDeltaX : originSizeDeltaX);\n      overlayOffset += originOffsetDeltaX + (this._isLtr() ? originSizeDeltaX : 0);\n\n      this._updateOverlayOffset(overlayOffset);\n    });\n  }\n\n  protected updateResizeActive(active: boolean): void {\n    this.eventDispatcher.overlayHandleActiveForCell.next(\n        active ? this.resizeRef.origin.nativeElement! : null);\n  }\n\n  private _getOriginWidth(): number {\n    return this.resizeRef.origin.nativeElement!.offsetWidth;\n  }\n\n  private _getOriginOffset(): number {\n    return this.resizeRef.origin.nativeElement!.offsetLeft;\n  }\n\n  private _getOverlayOffset(): number {\n    return parseInt(this.resizeRef.overlayRef.overlayElement.style.left!, 10);\n  }\n\n  private _updateOverlayOffset(offset: number): void {\n    this.resizeRef.overlayRef.overlayElement.style.left = coerceCssPixelValue(offset);\n  }\n\n  private _isLtr(): boolean {\n    return this.directionality.value === 'ltr';\n  }\n\n  private _notifyResizeEnded(size: number, completedSuccessfully = false): void {\n    this.updateResizeActive(false);\n\n    this.ngZone.run(() => {\n      const sizeMessage = {columnId: this.columnDef.name, size};\n      if (completedSuccessfully) {\n        this.resizeNotifier.resizeCompleted.next(sizeMessage);\n      } else {\n        this.resizeNotifier.resizeCanceled.next(sizeMessage);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './column-resize';\nexport * from './column-resize-directives/column-resize';\nexport * from './column-resize-directives/column-resize-flex';\nexport * from './column-resize-directives/default-enabled-column-resize';\nexport * from './column-resize-directives/default-enabled-column-resize-flex';\nexport * from './column-resize-module';\nexport * from './column-resize-notifier';\nexport * from './column-size-store';\nexport * from './event-dispatcher';\nexport * from './resizable';\nexport * from './resize-ref';\nexport * from './resize-strategy';\nexport * from './overlay-handle';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {FLEX_PROVIDERS as Éµangular_material_src_cdk_experimental_column_resize_column_resize_b,TABLE_PROVIDERS as Éµangular_material_src_cdk_experimental_column_resize_column_resize_a} from './column-resize-directives/constants';"],"names":[],"mappings":"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"}