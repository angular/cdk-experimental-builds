{"version":3,"file":"popover-edit.js","sources":["../../../../../../src/cdk-experimental/popover-edit/constants.ts","../../../../../../src/cdk-experimental/popover-edit/polyfill.ts","../../../../../../src/cdk-experimental/popover-edit/edit-event-dispatcher.ts","../../../../../../src/cdk-experimental/popover-edit/edit-ref.ts","../../../../../../src/cdk-experimental/popover-edit/focus-dispatcher.ts","../../../../../../src/cdk-experimental/popover-edit/form-value-container.ts","../../../../../../src/cdk-experimental/popover-edit/lens-directives.ts","../../../../../../src/cdk-experimental/popover-edit/popover-edit-position-strategy-factory.ts","../../../../../../src/cdk-experimental/popover-edit/edit-services.ts","../../../../../../src/cdk-experimental/popover-edit/focus-escape-notifier.ts","../../../../../../src/cdk-experimental/popover-edit/table-directives.ts","../../../../../../src/cdk-experimental/popover-edit/popover-edit-module.ts","../../../../../../src/cdk-experimental/popover-edit/public-api.ts","../../../../../../src/cdk-experimental/popover-edit/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Selector for finding table cells. */\nexport const CELL_SELECTOR = '.cdk-cell, .mat-cell, td';\n\n/** Selector for finding editable table cells. */\nexport const EDITABLE_CELL_SELECTOR = '.cdk-popover-edit-cell, .mat-popover-edit-cell';\n\n/** Selector for finding table rows. */\nexport const ROW_SELECTOR = '.cdk-row, .mat-row, tr';\n\n/** Selector for finding the table element. */\nexport const TABLE_SELECTOR = 'table, cdk-table, mat-table';\n\n/** CSS class added to the edit lens pane. */\nexport const EDIT_PANE_CLASS = 'cdk-edit-pane';\n\n/** Selector for finding the edit lens pane. */\nexport const EDIT_PANE_SELECTOR = `.${EDIT_PANE_CLASS}, .mat-edit-pane`;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IE 11 compatible matches implementation. */\nexport function matches(element: Element, selector: string): boolean {\n  return element.matches ?\n      element.matches(selector) :\n      (element as any)['msMatchesSelector'](selector);\n}\n\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\nexport function closest(element: EventTarget|Element|null|undefined, selector: string):\n    Element|null {\n  if (!(element instanceof Node)) { return null; }\n\n  let curr: Node|null = element;\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n\n  return curr && (hasNativeClosest ?\n      curr.closest(selector) : polyfillClosest(curr, selector)) as Element|null;\n}\n\n/** Polyfill for browsers without Element.closest. */\nfunction polyfillClosest(element: Element, selector: string): Element|null {\n  let curr: Node|null = element;\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n\n  return (curr || null) as Element|null;\n}\n\nconst hasNativeClosest = !!Element.prototype.closest;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone} from '@angular/core';\nimport {combineLatest, MonoTypeOperatorFunction, Observable, pipe, Subject} from 'rxjs';\nimport {\n  audit,\n  auditTime,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  skip,\n  startWith,\n  shareReplay,\n} from 'rxjs/operators';\n\nimport {CELL_SELECTOR, ROW_SELECTOR} from './constants';\nimport {closest} from './polyfill';\n\n/** The delay applied to mouse events before hiding or showing hover content. */\nconst MOUSE_EVENT_DELAY_MS = 40;\n\n/** The delay for reacting to focus/blur changes. */\nconst FOCUS_DELAY = 0;\n\n/**\n * The possible states for hover content:\n * OFF - Not rendered.\n * FOCUSABLE - Rendered in the dom and styled for its contents to be focusable but invisible.\n * ON - Rendered and fully visible.\n */\nexport const enum HoverContentState {\n  OFF = 0,\n  FOCUSABLE,\n  ON,\n}\n\n// Note: this class is generic, rather than referencing EditRef directly, in order to avoid\n// circular imports. If we were to reference it here, importing the registry into the\n// class that is registering itself will introduce a circular import.\n\n/**\n * Service for sharing delegated events and state for triggering table edits.\n */\n@Injectable()\nexport class EditEventDispatcher<R> {\n  /** A subject that indicates which table cell is currently editing (unless it is disabled). */\n  readonly editing = new Subject<Element|null>();\n\n  /** A subject that indicates which table row is currently hovered. */\n  readonly hovering = new Subject<Element|null>();\n\n  /** A subject that indicates which table row currently contains focus. */\n  readonly focused = new Subject<Element|null>();\n\n  /** A subject that indicates all elements in the table matching ROW_SELECTOR. */\n  readonly allRows = new Subject<NodeList>();\n\n  /** A subject that emits mouse move events from the table indicating the targeted row. */\n  readonly mouseMove = new Subject<Element|null>();\n\n  // TODO: Use WeakSet once IE11 support is dropped.\n  /**\n   * Tracks the currently disabled editable cells - edit calls will be ignored\n   * for these cells.\n   */\n  readonly disabledCells = new WeakMap<Element, boolean>();\n\n  /** The EditRef for the currently active edit lens (if any). */\n  get editRef(): R|null {\n    return this._editRef;\n  }\n  private _editRef: R|null = null;\n\n  // Optimization: Precompute common pipeable operators used per row/cell.\n  private readonly _distinctUntilChanged =\n      distinctUntilChanged<Element|HoverContentState|boolean|null>();\n  private readonly _startWithNull = startWith<Element|null>(null);\n  private readonly _distinctShare = pipe(\n    this._distinctUntilChanged as MonoTypeOperatorFunction<HoverContentState>,\n    shareReplay(1),\n  );\n  private readonly _startWithNullDistinct = pipe(\n    this._startWithNull,\n    this._distinctUntilChanged as MonoTypeOperatorFunction<Element|null>,\n  );\n\n  readonly editingAndEnabled = this.editing.pipe(\n      filter(cell => cell == null || !this.disabledCells.has(cell)),\n      shareReplay(1),\n  );\n\n  /** An observable that emits the row containing focus or an active edit. */\n  readonly editingOrFocused = combineLatest([\n      this.editingAndEnabled.pipe(\n          map(cell => closest(cell, ROW_SELECTOR)),\n          this._startWithNull,\n      ),\n      this.focused.pipe(this._startWithNull),\n  ]).pipe(\n      map(([editingRow, focusedRow]) => focusedRow || editingRow),\n      this._distinctUntilChanged as MonoTypeOperatorFunction<Element|null>,\n      auditTime(FOCUS_DELAY), // Use audit to skip over blur events to the next focused element.\n      this._distinctUntilChanged as MonoTypeOperatorFunction<Element|null>,\n      shareReplay(1),\n  );\n\n  /** Tracks rows that contain hover content with a reference count. */\n  private _rowsWithHoverContent = new WeakMap<Element, number>();\n\n  /** The table cell that has an active edit lens (or null). */\n  private _currentlyEditing: Element|null = null;\n\n  /** The combined set of row hover content states organized by row. */\n  private readonly _hoveredContentStateDistinct = combineLatest([\n      this._getFirstRowWithHoverContent(),\n      this._getLastRowWithHoverContent(),\n      this.editingOrFocused,\n      this.hovering.pipe(\n          distinctUntilChanged(),\n          audit(row => this.mouseMove.pipe(\n              filter(mouseMoveRow => row === mouseMoveRow),\n              this._startWithNull,\n              debounceTime(MOUSE_EVENT_DELAY_MS)),\n          ),\n          this._startWithNullDistinct,\n      ),\n  ]).pipe(\n      skip(1), // Skip the initial emission of [null, null, null, null].\n      map(computeHoverContentState),\n      distinctUntilChanged(areMapEntriesEqual),\n      // Optimization: Enter the zone before shareReplay so that we trigger a single\n      // ApplicationRef.tick for all row updates.\n      this._enterZone(),\n      shareReplay(1),\n  );\n\n  private readonly _editingAndEnabledDistinct = this.editingAndEnabled.pipe(\n      distinctUntilChanged(),\n      this._enterZone(),\n      shareReplay(1),\n  );\n\n  // Optimization: Share row events observable with subsequent callers.\n  // At startup, calls will be sequential by row.\n  private _lastSeenRow: Element|null = null;\n  private _lastSeenRowHoverOrFocus: Observable<HoverContentState>|null = null;\n\n  constructor(private readonly _ngZone: NgZone) {\n    this._editingAndEnabledDistinct.subscribe(cell => {\n      this._currentlyEditing = cell;\n    });\n  }\n\n  /**\n   * Gets an Observable that emits true when the specified element's cell\n   * is editing and false when not.\n   */\n  editingCell(element: Element|EventTarget): Observable<boolean> {\n    let cell: Element|null = null;\n\n    return this._editingAndEnabledDistinct.pipe(\n        map(editCell => editCell === (cell || (cell = closest(element, CELL_SELECTOR)))),\n        this._distinctUntilChanged as MonoTypeOperatorFunction<boolean>,\n    );\n  }\n\n  /**\n   * Stops editing for the specified cell. If the specified cell is not the current\n   * edit cell, does nothing.\n   */\n  doneEditingCell(element: Element|EventTarget): void {\n    const cell = closest(element, CELL_SELECTOR);\n\n    if (this._currentlyEditing === cell) {\n      this.editing.next(null);\n    }\n  }\n\n  /** Sets the currently active EditRef. */\n  setActiveEditRef(ref: R) {\n    this._editRef = ref;\n  }\n\n  /** Unsets the currently active EditRef, if the specified editRef is active. */\n  unsetActiveEditRef(ref: R) {\n    if (this._editRef !== ref) {\n      return;\n    }\n\n    this._editRef = null;\n  }\n\n  /** Adds the specified table row to be tracked for first/last row comparisons. */\n  registerRowWithHoverContent(row: Element): void {\n    this._rowsWithHoverContent.set(row, (this._rowsWithHoverContent.get(row) || 0) + 1);\n  }\n\n  /**\n   * Reference decrements and ultimately removes the specified table row from first/last row\n   * comparisons.\n   */\n  deregisterRowWithHoverContent(row: Element): void {\n    const refCount = this._rowsWithHoverContent.get(row) || 0;\n\n    if (refCount <= 1) {\n      this._rowsWithHoverContent.delete(row);\n    } else {\n      this._rowsWithHoverContent.set(row, refCount - 1);\n    }\n  }\n\n  /**\n   * Gets an Observable that emits true when the specified element's row\n   * contains the focused element or is being hovered over and false when not.\n   * Hovering is defined as when the mouse has momentarily stopped moving over the cell.\n   */\n  hoverOrFocusOnRow(row: Element): Observable<HoverContentState> {\n    if (row !== this._lastSeenRow) {\n      this._lastSeenRow = row;\n      this._lastSeenRowHoverOrFocus = this._hoveredContentStateDistinct.pipe(\n        map(state => state.get(row) || HoverContentState.OFF),\n        this._distinctShare,\n      );\n    }\n\n    return this._lastSeenRowHoverOrFocus!;\n  }\n\n  /**\n   * RxJS operator that enters the Angular zone, used to reduce boilerplate in\n   * re-entering the zone for stream pipelines.\n   */\n  private _enterZone<T>(): MonoTypeOperatorFunction<T> {\n    return (source: Observable<T>) =>\n        new Observable<T>((observer) => source.subscribe({\n             next: (value) => this._ngZone.run(() => observer.next(value)),\n             error: (err) => observer.error(err),\n             complete: () => observer.complete()\n           }));\n  }\n\n  private _getFirstRowWithHoverContent(): Observable<Element|null> {\n    return this._mapAllRowsToSingleRow(rows => {\n      for (let i = 0, row; row = rows[i]; i++) {\n        if (this._rowsWithHoverContent.has(row as Element)) {\n          return row as Element;\n        }\n      }\n      return null;\n    });\n  }\n\n  private _getLastRowWithHoverContent(): Observable<Element|null> {\n    return this._mapAllRowsToSingleRow(rows => {\n      for (let i = rows.length - 1, row; row = rows[i]; i--) {\n        if (this._rowsWithHoverContent.has(row as Element)) {\n          return row as Element;\n        }\n      }\n      return null;\n    });\n  }\n\n  private _mapAllRowsToSingleRow(mapper: (rows: NodeList) => Element|null):\n      Observable<Element|null> {\n    return this.allRows.pipe(\n        map(mapper),\n        this._startWithNullDistinct,\n    );\n  }\n}\n\nfunction computeHoverContentState([firstRow, lastRow, activeRow, hoverRow]: (Element|null)[]):\n     Map<Element, HoverContentState> {\n  const hoverContentState = new Map<Element, HoverContentState>();\n\n  // Add focusable rows.\n  for (const focussableRow of [\n    firstRow,\n    lastRow,\n    activeRow && activeRow.previousElementSibling,\n    activeRow && activeRow.nextElementSibling,\n  ]) {\n    if (focussableRow) {\n      hoverContentState.set(focussableRow as Element, HoverContentState.FOCUSABLE);\n    }\n  }\n\n  // Add/overwrite with fully visible rows.\n  for (const onRow of [activeRow, hoverRow]) {\n    if (onRow) {\n      hoverContentState.set(onRow, HoverContentState.ON);\n    }\n  }\n\n  return hoverContentState;\n}\n\nfunction areMapEntriesEqual<K, V>(a: Map<K, V>, b: Map<K, V>): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  // TODO: use Map.prototype.entries once we're off IE11.\n  for (const aKey of Array.from(a.keys())) {\n    if (b.get(aKey) !== a.get(aKey)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy, Self, NgZone} from '@angular/core';\nimport {ControlContainer} from '@angular/forms';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {EditEventDispatcher} from './edit-event-dispatcher';\n\n/**\n * Used for communication between the form within the edit lens and the\n * table that launched it. Provided by CdkEditControl within the lens.\n */\n@Injectable()\nexport class EditRef<FormValue> implements OnDestroy {\n  /** Emits the final value of this edit instance before closing. */\n  private readonly _finalValueSubject = new Subject<FormValue>();\n  readonly finalValue: Observable<FormValue> = this._finalValueSubject;\n\n  /** Emits when the user tabs out of this edit lens before closing. */\n  private readonly _blurredSubject = new Subject<void>();\n  readonly blurred: Observable<void> = this._blurredSubject;\n\n  /** The value to set the form back to on revert. */\n  private _revertFormValue: FormValue;\n\n  constructor(\n      @Self() private readonly _form: ControlContainer,\n      private readonly _editEventDispatcher: EditEventDispatcher<EditRef<FormValue>>,\n      private readonly _ngZone: NgZone) {\n    this._editEventDispatcher.setActiveEditRef(this);\n  }\n\n  /**\n   * Called by the host directive's OnInit hook. Reads the initial state of the\n   * form and overrides it with persisted state from previous openings, if\n   * applicable.\n   */\n  init(previousFormValue: FormValue|undefined): void {\n    // Wait for the zone to stabilize before caching the initial value.\n    // This ensures that all form controls have been initialized.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this.updateRevertValue();\n      if (previousFormValue) {\n        this.reset(previousFormValue);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._editEventDispatcher.unsetActiveEditRef(this);\n    this._finalValueSubject.next(this._form.value);\n    this._finalValueSubject.complete();\n  }\n\n  /** Whether the attached form is in a valid state. */\n  isValid(): boolean|null {\n    return this._form.valid;\n  }\n\n  /** Set the form's current value as what it will be set to on revert/reset. */\n  updateRevertValue(): void {\n    this._revertFormValue = this._form.value;\n  }\n\n  /** Tells the table to close the edit popup. */\n  close(): void {\n    this._editEventDispatcher.editing.next(null);\n  }\n\n  /** Notifies the active edit that the user has moved focus out of the lens. */\n  blur(): void {\n    this._blurredSubject.next();\n  }\n\n  /**\n   * Resets the form value to the specified value or the previously set\n   * revert value.\n   */\n  reset(value?: FormValue): void {\n    this._form.reset(value || this._revertFormValue);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, UP_ARROW, RIGHT_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {Injectable} from '@angular/core';\nimport {PartialObserver} from 'rxjs';\n\nimport {EDITABLE_CELL_SELECTOR, ROW_SELECTOR, TABLE_SELECTOR} from './constants';\nimport {closest} from './polyfill';\n\n/**\n * Service responsible for moving cell focus around in response to keyboard events.\n * May be overridden to customize the keyboard behavior of popover edit.\n */\n@Injectable({providedIn: 'root'})\nexport class FocusDispatcher {\n  /** Observes keydown events triggered from the table. */\n  readonly keyObserver: PartialObserver<KeyboardEvent>;\n\n  constructor(protected readonly directionality: Directionality) {\n    this.keyObserver = {next: (event) => this.handleKeyboardEvent(event)};\n  }\n\n  /**\n   * Moves focus to earlier or later cells (in dom order) by offset cells relative to\n   * currentCell.\n   */\n  moveFocusHorizontally(currentCell: HTMLElement, offset: number): void {\n    const cells = Array.from(closest(currentCell, TABLE_SELECTOR)!.querySelectorAll(\n                      EDITABLE_CELL_SELECTOR)) as HTMLElement[];\n    const currentIndex = cells.indexOf(currentCell);\n    const newIndex = currentIndex + offset;\n\n    if (cells[newIndex]) {\n      cells[newIndex].focus();\n    }\n  }\n\n  /** Moves focus to up or down by row by offset cells relative to currentCell. */\n  moveFocusVertically(currentCell: HTMLElement, offset: number): void {\n    const currentRow = closest(currentCell, ROW_SELECTOR)!;\n    const rows = Array.from(closest(currentRow, TABLE_SELECTOR)!.querySelectorAll(ROW_SELECTOR));\n    const currentRowIndex = rows.indexOf(currentRow);\n    const currentIndexWithinRow =\n        Array.from(currentRow.querySelectorAll(EDITABLE_CELL_SELECTOR)).indexOf(currentCell);\n    const newRowIndex = currentRowIndex + offset;\n\n    if (rows[newRowIndex]) {\n      const rowToFocus =\n          Array.from(rows[newRowIndex].querySelectorAll(EDITABLE_CELL_SELECTOR)) as HTMLElement[];\n\n      if (rowToFocus[currentIndexWithinRow]) {\n        rowToFocus[currentIndexWithinRow].focus();\n      }\n    }\n  }\n\n  /** Translates arrow keydown events into focus move operations. */\n  protected handleKeyboardEvent(event: KeyboardEvent): void {\n    const cell = closest(event.target, EDITABLE_CELL_SELECTOR) as HTMLElement | null;\n\n    if (!cell) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case UP_ARROW:\n        this.moveFocusVertically(cell, -1);\n        break;\n      case DOWN_ARROW:\n        this.moveFocusVertically(cell, 1);\n        break;\n      case LEFT_ARROW:\n        this.moveFocusHorizontally(cell, this.directionality.value === 'ltr' ? -1 : 1);\n        break;\n      case RIGHT_ARROW:\n        this.moveFocusHorizontally(cell, this.directionality.value === 'ltr' ? 1 : -1);\n        break;\n      default:\n        // If the keyboard event is not handled, return now so that we don't `preventDefault`.\n        return;\n    }\n\n    event.preventDefault();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface Entry<FormValue> {\n  value?: FormValue;\n}\n\n/**\n * A convenience class for preserving unsaved form state while an edit lens is closed.\n *\n * Example usage:\n * class MyComponent {\n *   readonly nameEditValues = new FormValueContainer&lt;Item, {name: string}&gt;();\n * }\n *\n * &lt;form cdkEditControl [(cdkEditControlPreservedFormValue)]=\"nameEditValues.for(item).value\"&gt;\n */\nexport class FormValueContainer<Key extends object, FormValue> {\n  private _formValues = new WeakMap<Key, Entry<FormValue>>();\n\n  for(key: Key): Entry<FormValue> {\n    const _formValues = this._formValues;\n\n    let entry = _formValues.get(key);\n    if (!entry) {\n      // Expose entry as an object so that we can [(two-way)] bind to its value member\n      entry = {};\n      _formValues.set(key, entry);\n    }\n\n    return entry;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {EDIT_PANE_SELECTOR} from './constants';\nimport {closest} from './polyfill';\nimport {EditRef} from './edit-ref';\n\n/** Options for what do to when the user clicks outside of an edit lens. */\nexport type PopoverEditClickOutBehavior = 'close' | 'submit' | 'noop';\n\n/**\n * A directive that attaches to a form within the edit lens.\n * It coordinates the form state with the table-wide edit system and handles\n * closing the edit lens when the form is submitted or the user clicks\n * out.\n */\n@Directive({\n  selector: 'form[cdkEditControl]',\n  inputs: [\n    'clickOutBehavior: cdkEditControlClickOutBehavior',\n    'preservedFormValue: cdkEditControlPreservedFormValue',\n    'ignoreSubmitUnlessValid: cdkEditControlIgnoreSubmitUnlessValid',\n  ],\n  outputs: ['preservedFormValueChange: cdkEditControlPreservedFormValueChange'],\n  providers: [EditRef],\n})\nexport class CdkEditControl<FormValue> implements OnDestroy, OnInit {\n  protected readonly destroyed = new Subject<void>();\n\n  /**\n   * Specifies what should happen when the user clicks outside of the edit lens.\n   * The default behavior is to close the lens without submitting the form.\n   */\n  clickOutBehavior: PopoverEditClickOutBehavior = 'close';\n\n  /**\n   * A two-way binding for storing unsubmitted form state. If not provided\n   * then form state will be discarded on close. The PeristBy directive is offered\n   * as a convenient shortcut for these bindings.\n   */\n  preservedFormValue?: FormValue;\n  readonly preservedFormValueChange = new EventEmitter<FormValue>();\n\n  /**\n   * Determines whether the lens will close on form submit if the form is not in a valid\n   * state. By default the lens will remain open.\n   */\n  ignoreSubmitUnlessValid = true;\n\n  constructor(protected readonly elementRef: ElementRef, readonly editRef: EditRef<FormValue>) {}\n\n  ngOnInit(): void {\n    this.editRef.init(this.preservedFormValue);\n    this.editRef.finalValue.subscribe(this.preservedFormValueChange);\n    this.editRef.blurred.subscribe(() => this._handleBlur());\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  /**\n   * Called when the form submits. If ignoreSubmitUnlessValid is true, checks\n   * the form for validity before proceeding.\n   * Updates the revert state with the latest submitted value then closes the edit.\n   */\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('ngSubmit')\n  handleFormSubmit(): void {\n    if (this.ignoreSubmitUnlessValid && !this.editRef.isValid()) { return; }\n\n    this.editRef.updateRevertValue();\n    this.editRef.close();\n  }\n\n  /** Called on Escape keyup. Closes the edit. */\n  close(): void {\n    // todo - allow this behavior to be customized as well, such as calling\n    // reset before close\n    this.editRef.close();\n  }\n\n  /**\n   * Called on click anywhere in the document.\n   * If the click was outside of the lens, trigger the specified click out behavior.\n   */\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('document:click', ['$event'])\n  handlePossibleClickOut(evt: Event): void {\n    if (closest(evt.target, EDIT_PANE_SELECTOR)) { return; }\n    switch (this.clickOutBehavior) {\n      case 'submit':\n        // Manually cause the form to submit before closing.\n        this._triggerFormSubmit();\n        this.editRef.close();\n        break;\n      case 'close':\n        this.editRef.close();\n        break;\n      default:\n        break;\n    }\n  }\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('keydown', ['$event'])\n  _handleKeydown(event: KeyboardEvent) {\n    if (event.key === 'Escape' && !hasModifierKey(event)) {\n      this.close();\n      event.preventDefault();\n    }\n  }\n\n  /** Triggers submit on tab out if clickOutBehavior is 'submit'. */\n  private _handleBlur(): void {\n    if (this.clickOutBehavior === 'submit') {\n      // Manually cause the form to submit before closing.\n      this._triggerFormSubmit();\n    }\n  }\n\n  private _triggerFormSubmit() {\n    this.elementRef.nativeElement!.dispatchEvent(new Event('submit'));\n  }\n}\n\n/** Reverts the form to its initial or previously submitted state on click. */\n@Directive({\n  selector: 'button[cdkEditRevert]',\n  host: {\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class CdkEditRevert<FormValue> {\n  /** Type of the button. Defaults to `button` to avoid accident form submits. */\n  @Input() type: string = 'button';\n\n  constructor(\n      protected readonly editRef: EditRef<FormValue>) {}\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('click')\n  revertEdit(): void {\n    this.editRef.reset();\n  }\n}\n\n/** Closes the lens on click. */\n@Directive({selector: '[cdkEditClose]'})\nexport class CdkEditClose<FormValue> {\n  constructor(\n      protected readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly editRef: EditRef<FormValue>) {\n\n    const nativeElement = elementRef.nativeElement;\n\n    // Prevent accidental form submits.\n    if (nativeElement.nodeName === 'BUTTON' && !nativeElement.getAttribute('type')) {\n      nativeElement.setAttribute('type', 'button');\n    }\n  }\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('click')\n  @HostListener('keydown.enter')\n  @HostListener('keydown.space')\n  closeEdit(): void {\n    // Note that we use `click` here, rather than a keyboard event, because some screen readers\n    // will emit a fake click event instead of an enter keyboard event on buttons. For the keyboard\n    // events we use `keydown`, rather than `keyup`, because we use `keydown` to open the overlay\n    // as well. If we were to use `keyup`, the user could end up opening and closing within\n    // the same event sequence if focus was moved quickly.\n    this.editRef.close();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlaySizeConfig, PositionStrategy} from '@angular/cdk/overlay';\nimport {Injectable} from '@angular/core';\n\n/**\n * Overridable factory responsible for configuring how cdkPopoverEdit popovers are positioned\n * and sized.\n */\n@Injectable()\nexport abstract class PopoverEditPositionStrategyFactory {\n  /**\n   * Creates a PositionStrategy based on the specified table cells.\n   * The cells will be provided in DOM order.\n   */\n  abstract positionStrategyForCells(cells: HTMLElement[]): PositionStrategy;\n\n  /**\n   * Creates an OverlaySizeConfig based on the specified table cells.\n   * The cells will be provided in DOM order.\n   */\n  abstract sizeConfigForCells(cells: HTMLElement[]): OverlaySizeConfig;\n}\n\n/**\n * Default implementation of PopoverEditPositionStrategyFactory.\n * Uses a FlexibleConnectedPositionStrategy anchored to the start + top of the cell.\n * Note: This will change to CoverPositionStrategy once it implemented.\n */\n@Injectable()\nexport class DefaultPopoverEditPositionStrategyFactory extends PopoverEditPositionStrategyFactory {\n  constructor(protected readonly direction: Directionality, protected readonly overlay: Overlay) {\n    super();\n  }\n\n  positionStrategyForCells(cells: HTMLElement[]): PositionStrategy {\n    return this.overlay.position()\n        .flexibleConnectedTo(cells[0])\n        .withGrowAfterOpen()\n        .withPush()\n        .withViewportMargin(16)\n        .withPositions([{\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'top',\n        }]);\n  }\n\n  sizeConfigForCells(cells: HTMLElement[]): OverlaySizeConfig {\n    if (cells.length === 0) {\n      return {};\n    }\n\n    if (cells.length === 1) {\n      return {width: cells[0].getBoundingClientRect().width};\n    }\n\n    let firstCell, lastCell;\n    if (this.direction.value === 'ltr') {\n      firstCell = cells[0];\n      lastCell = cells[cells.length - 1];\n    } else {\n      lastCell = cells[0];\n      firstCell = cells[cells.length - 1];\n    }\n\n    return {width: lastCell.getBoundingClientRect().right - firstCell.getBoundingClientRect().left};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone} from '@angular/core';\nimport {FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay} from '@angular/cdk/overlay';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\nimport {EditEventDispatcher} from './edit-event-dispatcher';\nimport {FocusDispatcher} from './focus-dispatcher';\nimport {PopoverEditPositionStrategyFactory} from './popover-edit-position-strategy-factory';\nimport {EditRef} from './edit-ref';\n\n/**\n * Optimization\n * Collects multiple Injectables into a singleton shared across the table. By reducing the\n * number of services injected into each CdkPopoverEdit, this saves about 0.023ms of cpu time\n * and 56 bytes of memory per instance.\n */\n@Injectable()\nexport class EditServices {\n  constructor(\n      readonly directionality: Directionality,\n      readonly editEventDispatcher: EditEventDispatcher<EditRef<unknown>>,\n      readonly focusDispatcher: FocusDispatcher,\n      readonly focusTrapFactory: FocusTrapFactory, readonly ngZone: NgZone,\n      readonly overlay: Overlay, readonly positionFactory: PopoverEditPositionStrategyFactory,\n      readonly scrollDispatcher: ScrollDispatcher, readonly viewportRuler: ViewportRuler) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, InteractivityChecker} from '@angular/cdk/a11y';\nimport {Observable, Subject} from 'rxjs';\n\n/** Value indicating whether focus left the target area before or after the enclosed elements. */\nexport const enum FocusEscapeNotifierDirection {\n  START,\n  END,\n}\n\n/**\n * Like FocusTrap, but rather than trapping focus within a dom region, notifies subscribers when\n * focus leaves the region.\n */\nexport class FocusEscapeNotifier extends FocusTrap {\n  private _escapeSubject = new Subject<FocusEscapeNotifierDirection>();\n\n  constructor(\n      element: HTMLElement,\n      checker: InteractivityChecker,\n      ngZone: NgZone,\n      document: Document) {\n    super(element, checker, ngZone, document, true /* deferAnchors */);\n\n    // The focus trap adds \"anchors\" at the beginning and end of a trapped region that redirect\n    // focus. We override that redirect behavior here with simply emitting on a stream.\n    this.startAnchorListener = () => {\n      this._escapeSubject.next(FocusEscapeNotifierDirection.START);\n      return true;\n    };\n    this.endAnchorListener = () => {\n      this._escapeSubject.next(FocusEscapeNotifierDirection.END);\n      return true;\n    };\n\n    this.attachAnchors();\n  }\n\n  escapes(): Observable<FocusEscapeNotifierDirection> {\n    return this._escapeSubject;\n  }\n}\n\n/** Factory that allows easy instantiation of focus escape notifiers. */\n@Injectable({providedIn: 'root'})\nexport class FocusEscapeNotifierFactory {\n  private _document: Document;\n\n  constructor(\n      private _checker: InteractivityChecker,\n      private _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus escape notifier region around the given element.\n   * @param element The element around which focus will be monitored.\n   * @returns The created focus escape notifier instance.\n   */\n  create(element: HTMLElement): FocusEscapeNotifier {\n    return new FocusEscapeNotifier(element, this._checker, this._ngZone, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FocusTrap} from '@angular/cdk/a11y';\nimport {OverlayRef, PositionStrategy} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n  HostListener,\n} from '@angular/core';\nimport {fromEvent, fromEventPattern, merge, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  mapTo,\n  share,\n  startWith,\n  takeUntil,\n  throttleTime,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport {CELL_SELECTOR, EDIT_PANE_CLASS, EDIT_PANE_SELECTOR, ROW_SELECTOR} from './constants';\nimport {EditEventDispatcher, HoverContentState} from './edit-event-dispatcher';\nimport {EditServices} from './edit-services';\nimport {FocusDispatcher} from './focus-dispatcher';\nimport {\n  FocusEscapeNotifier,\n  FocusEscapeNotifierDirection,\n  FocusEscapeNotifierFactory\n} from './focus-escape-notifier';\nimport {closest} from './polyfill';\nimport {EditRef} from './edit-ref';\n\n/**\n * Describes the number of columns before and after the originating cell that the\n * edit popup should span. In left to right locales, before means left and after means\n * right. In right to left locales before means right and after means left.\n */\nexport interface CdkPopoverEditColspan {\n  before?: number;\n  after?: number;\n}\n\n/** Used for rate-limiting mousemove events. */\nconst MOUSE_MOVE_THROTTLE_TIME_MS = 10;\n\n/**\n * A directive that must be attached to enable editability on a table.\n * It is responsible for setting up delegated event handlers and providing the\n * EditEventDispatcher service for use by the other edit directives.\n */\n@Directive({\n  selector: 'table[editable], cdk-table[editable], mat-table[editable]',\n  providers: [EditEventDispatcher, EditServices],\n})\nexport class CdkEditable implements AfterViewInit, OnDestroy {\n  protected readonly destroyed = new Subject<void>();\n\n  constructor(\n      protected readonly elementRef: ElementRef,\n      protected readonly editEventDispatcher: EditEventDispatcher<EditRef<unknown>>,\n      protected readonly focusDispatcher: FocusDispatcher, protected readonly ngZone: NgZone) {}\n\n  ngAfterViewInit(): void {\n    this._listenForTableEvents();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  private _listenForTableEvents(): void {\n    const element = this.elementRef.nativeElement;\n    const toClosest = (selector: string) =>\n        map((event: UIEvent) => closest(event.target, selector));\n\n    this.ngZone.runOutsideAngular(() => {\n      // Track mouse movement over the table to hide/show hover content.\n      fromEvent<MouseEvent>(element, 'mouseover').pipe(\n          toClosest(ROW_SELECTOR),\n          takeUntil(this.destroyed),\n          ).subscribe(this.editEventDispatcher.hovering);\n      fromEvent<MouseEvent>(element, 'mouseleave').pipe(\n          mapTo(null),\n          takeUntil(this.destroyed),\n          ).subscribe(this.editEventDispatcher.hovering);\n      fromEvent<MouseEvent>(element, 'mousemove').pipe(\n          throttleTime(MOUSE_MOVE_THROTTLE_TIME_MS),\n          toClosest(ROW_SELECTOR),\n          takeUntil(this.destroyed),\n          ).subscribe(this.editEventDispatcher.mouseMove);\n\n      // Track focus within the table to hide/show/make focusable hover content.\n      fromEventPattern<FocusEvent>(\n          handler => element.addEventListener('focus', handler, true),\n          handler => element.removeEventListener('focus', handler, true)\n          ).pipe(\n              toClosest(ROW_SELECTOR),\n              share(),\n              takeUntil(this.destroyed),\n              ).subscribe(this.editEventDispatcher.focused);\n\n      merge(\n        fromEventPattern<FocusEvent>(\n          handler => element.addEventListener('blur', handler, true),\n          handler => element.removeEventListener('blur', handler, true)\n        ),\n        fromEvent<KeyboardEvent>(element, 'keydown').pipe(filter(event => event.key === 'Escape'))\n      ).pipe(\n        mapTo(null),\n        share(),\n        takeUntil(this.destroyed),\n      ).subscribe(this.editEventDispatcher.focused);\n\n      // Keep track of rows within the table. This is used to know which rows with hover content\n      // are first or last in the table. They are kept focusable in case focus enters from above\n      // or below the table.\n      this.ngZone.onStable.pipe(\n          // Optimization: ignore dom changes while focus is within the table as we already\n          // ensure that rows above and below the focused/active row are tabbable.\n          withLatestFrom(this.editEventDispatcher.editingOrFocused),\n          filter(([_, activeRow]) => activeRow == null),\n          map(() => element.querySelectorAll(ROW_SELECTOR)),\n          share(),\n          takeUntil(this.destroyed),\n          ).subscribe(this.editEventDispatcher.allRows);\n\n      fromEvent<KeyboardEvent>(element, 'keydown').pipe(\n          filter(event => event.key === 'Enter'),\n          toClosest(CELL_SELECTOR),\n          takeUntil(this.destroyed),\n          ).subscribe(this.editEventDispatcher.editing);\n\n      // Keydown must be used here or else key autorepeat does not work properly on some platforms.\n      fromEvent<KeyboardEvent>(element, 'keydown')\n          .pipe(takeUntil(this.destroyed))\n          .subscribe(this.focusDispatcher.keyObserver);\n    });\n  }\n}\n\nconst POPOVER_EDIT_HOST_BINDINGS = {\n  '[attr.tabindex]': 'disabled ? null : 0',\n  'class': 'cdk-popover-edit-cell',\n  '[attr.aria-haspopup]': '!disabled',\n};\n\nconst POPOVER_EDIT_INPUTS = [\n  'template: cdkPopoverEdit',\n  'context: cdkPopoverEditContext',\n  'colspan: cdkPopoverEditColspan',\n  'disabled: cdkPopoverEditDisabled',\n];\n\n/**\n * Attaches an ng-template to a cell and shows it when instructed to by the\n * EditEventDispatcher service.\n * Makes the cell focusable.\n */\n@Directive({\n  selector: '[cdkPopoverEdit]:not([cdkPopoverEditTabOut])',\n  host: POPOVER_EDIT_HOST_BINDINGS,\n  inputs: POPOVER_EDIT_INPUTS,\n})\nexport class CdkPopoverEdit<C> implements AfterViewInit, OnDestroy {\n  /** The edit lens template shown over the cell on edit. */\n  template: TemplateRef<any>|null = null;\n\n  /**\n   * Implicit context to pass along to the template. Can be omitted if the template\n   * is defined within the cell.\n   */\n  context?: C;\n\n  /**\n   * Specifies that the popup should cover additional table cells before and/or after\n   * this one.\n   */\n  get colspan(): CdkPopoverEditColspan {\n    return this._colspan;\n  }\n  set colspan(value: CdkPopoverEditColspan) {\n    this._colspan = value;\n\n    // Recompute positioning when the colspan changes.\n    if (this.overlayRef) {\n      this.overlayRef.updatePositionStrategy(this._getPositionStrategy());\n\n      if (this.overlayRef.hasAttached()) {\n        this._updateOverlaySize();\n      }\n    }\n  }\n  private _colspan: CdkPopoverEditColspan = {};\n\n  /** Whether popover edit is disabled for this cell. */\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n\n    if (value) {\n      this.services.editEventDispatcher.doneEditingCell(this.elementRef.nativeElement!);\n      this.services.editEventDispatcher.disabledCells.set(this.elementRef.nativeElement!, true);\n    } else {\n      this.services.editEventDispatcher.disabledCells.delete(this.elementRef.nativeElement!);\n    }\n  }\n  private _disabled = false;\n\n  protected focusTrap?: FocusTrap;\n  protected overlayRef?: OverlayRef;\n  protected readonly destroyed = new Subject<void>();\n\n  constructor(\n      protected readonly services: EditServices, protected readonly elementRef: ElementRef,\n      protected readonly viewContainerRef: ViewContainerRef) {}\n\n  ngAfterViewInit(): void {\n    this._startListeningToEditEvents();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n\n    if (this.focusTrap) {\n      this.focusTrap.destroy();\n      this.focusTrap = undefined;\n    }\n\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n    }\n  }\n\n  protected initFocusTrap(): void {\n    this.focusTrap = this.services.focusTrapFactory.create(this.overlayRef!.overlayElement);\n  }\n\n  protected closeEditOverlay(): void {\n    this.services.editEventDispatcher.doneEditingCell(this.elementRef.nativeElement!);\n  }\n\n  protected panelClass(): string {\n    return EDIT_PANE_CLASS;\n  }\n\n  private _startListeningToEditEvents(): void {\n    this.services.editEventDispatcher.editingCell(this.elementRef.nativeElement!)\n        .pipe(takeUntil(this.destroyed))\n        .subscribe((open) => {\n          if (open && this.template) {\n            if (!this.overlayRef) {\n              this._createEditOverlay();\n            }\n\n            this._showEditOverlay();\n          } else if (this.overlayRef) {\n            this._maybeReturnFocusToCell();\n\n            this.overlayRef.detach();\n          }\n        });\n  }\n\n  private _createEditOverlay(): void {\n    this.overlayRef = this.services.overlay.create({\n      disposeOnNavigation: true,\n      panelClass: this.panelClass(),\n      positionStrategy: this._getPositionStrategy(),\n      scrollStrategy: this.services.overlay.scrollStrategies.reposition(),\n      direction: this.services.directionality,\n    });\n\n    this.initFocusTrap();\n    this.overlayRef.overlayElement.setAttribute('aria-role', 'dialog');\n\n    this.overlayRef.detachments().subscribe(() => this.closeEditOverlay());\n  }\n\n  private _showEditOverlay(): void {\n    this.overlayRef!.attach(new TemplatePortal(\n        this.template!,\n        this.viewContainerRef,\n        {$implicit: this.context}));\n\n    // We have to defer trapping focus, because doing so too early can cause the form inside\n    // the overlay to be submitted immediately if it was opened on an Enter keydown event.\n    this.services.ngZone.runOutsideAngular(() => {\n      setTimeout(() => {\n        this.focusTrap!.focusInitialElement();\n      });\n    });\n\n    // Update the size of the popup initially and on subsequent changes to\n    // scroll position and viewport size.\n    merge(this.services.scrollDispatcher.scrolled(), this.services.viewportRuler.change())\n        .pipe(\n          startWith(null),\n          takeUntil(merge(this.overlayRef!.detachments(), this.destroyed))\n        )\n        .subscribe(() => {\n          this._updateOverlaySize();\n        });\n  }\n\n  private _getOverlayCells(): HTMLElement[] {\n    const cell = closest(this.elementRef.nativeElement!, CELL_SELECTOR) as HTMLElement;\n\n    if (!this._colspan.before && !this._colspan.after) {\n      return [cell];\n    }\n\n    const row = closest(this.elementRef.nativeElement!, ROW_SELECTOR)!;\n    const rowCells = Array.from(row.querySelectorAll(CELL_SELECTOR)) as HTMLElement[];\n    const ownIndex = rowCells.indexOf(cell);\n\n    return rowCells.slice(\n        ownIndex - (this._colspan.before || 0), ownIndex + (this._colspan.after || 0) + 1);\n  }\n\n  private _getPositionStrategy(): PositionStrategy {\n    return this.services.positionFactory.positionStrategyForCells(this._getOverlayCells());\n  }\n\n  private _updateOverlaySize(): void {\n    this.overlayRef!.updateSize(\n        this.services.positionFactory.sizeConfigForCells(this._getOverlayCells()));\n  }\n\n  private _maybeReturnFocusToCell(): void {\n    if (closest(document.activeElement, EDIT_PANE_SELECTOR) ===\n        this.overlayRef!.overlayElement) {\n      this.elementRef.nativeElement!.focus();\n    }\n  }\n}\n\n/**\n * Attaches an ng-template to a cell and shows it when instructed to by the\n * EditEventDispatcher service.\n * Makes the cell focusable.\n */\n@Directive({\n  selector: '[cdkPopoverEdit][cdkPopoverEditTabOut]',\n  host: POPOVER_EDIT_HOST_BINDINGS,\n  inputs: POPOVER_EDIT_INPUTS,\n})\nexport class CdkPopoverEditTabOut<C> extends CdkPopoverEdit<C> {\n  protected focusTrap?: FocusEscapeNotifier;\n\n  constructor(\n      elementRef: ElementRef, viewContainerRef: ViewContainerRef, services: EditServices,\n      protected readonly focusEscapeNotifierFactory: FocusEscapeNotifierFactory) {\n    super(services, elementRef, viewContainerRef);\n  }\n\n  protected initFocusTrap(): void {\n    this.focusTrap = this.focusEscapeNotifierFactory.create(this.overlayRef!.overlayElement);\n\n    this.focusTrap.escapes().pipe(takeUntil(this.destroyed)).subscribe(direction => {\n      if (this.services.editEventDispatcher.editRef) {\n        this.services.editEventDispatcher.editRef.blur();\n      }\n\n      this.services.focusDispatcher.moveFocusHorizontally(\n          closest(this.elementRef.nativeElement!, CELL_SELECTOR) as HTMLElement,\n          direction === FocusEscapeNotifierDirection.START ? -1 : 1);\n\n      this.closeEditOverlay();\n    });\n  }\n}\n\n/**\n * A structural directive that shows its contents when the table row containing\n * it is hovered or when an element in the row has focus.\n */\n@Directive({\n  selector: '[cdkRowHoverContent]',\n})\nexport class CdkRowHoverContent implements AfterViewInit, OnDestroy {\n  protected readonly destroyed = new Subject<void>();\n  protected viewRef: EmbeddedViewRef<any>|null = null;\n\n  private _row?: Element;\n\n  constructor(\n      protected readonly services: EditServices, protected readonly elementRef: ElementRef,\n      protected readonly templateRef: TemplateRef<any>,\n      protected readonly viewContainerRef: ViewContainerRef) {}\n\n  ngAfterViewInit(): void {\n    this._row = closest(this.elementRef.nativeElement!, ROW_SELECTOR)!;\n\n    this.services.editEventDispatcher.registerRowWithHoverContent(this._row);\n    this._listenForHoverAndFocusEvents();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n\n    if (this.viewRef) {\n      this.viewRef.destroy();\n    }\n\n    if (this._row) {\n      this.services.editEventDispatcher.deregisterRowWithHoverContent(this._row);\n    }\n  }\n\n  /**\n   * Called immediately after the hover content is created and added to the dom.\n   * In the CDK version, this is a noop but subclasses such as MatRowHoverContent use this\n   * to prepare/style the inserted element.\n   */\n  protected initElement(_: HTMLElement): void {\n  }\n\n  /**\n   * Called when the hover content needs to be focusable to preserve a reasonable tab ordering\n   * but should not yet be shown.\n   */\n  protected makeElementHiddenButFocusable(element: HTMLElement): void {\n    element.style.opacity = '0';\n  }\n\n  /**\n   * Called when the hover content needs to be focusable to preserve a reasonable tab ordering\n   * but should not yet be shown.\n   */\n  protected makeElementVisible(element: HTMLElement): void {\n    element.style.opacity = '';\n  }\n\n  private _listenForHoverAndFocusEvents(): void {\n    this.services.editEventDispatcher.hoverOrFocusOnRow(this._row!)\n        .pipe(takeUntil(this.destroyed))\n        .subscribe(eventState => {\n          // When in FOCUSABLE state, add the hover content to the dom but make it transparent so\n          // that it is in the tab order relative to the currently focused row.\n\n          if (eventState === HoverContentState.ON || eventState === HoverContentState.FOCUSABLE) {\n            if (!this.viewRef) {\n              this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, {});\n              this.initElement(this.viewRef.rootNodes[0] as HTMLElement);\n              this.viewRef.markForCheck();\n            } else if (this.viewContainerRef.indexOf(this.viewRef) === -1) {\n              this.viewContainerRef.insert(this.viewRef!);\n              this.viewRef.markForCheck();\n            }\n\n            if (eventState === HoverContentState.ON) {\n              this.makeElementVisible(this.viewRef.rootNodes[0] as HTMLElement);\n            } else {\n              this.makeElementHiddenButFocusable(this.viewRef.rootNodes[0] as HTMLElement);\n            }\n          } else if (this.viewRef) {\n            this.viewContainerRef.detach(this.viewContainerRef.indexOf(this.viewRef));\n          }\n        });\n  }\n}\n\n/**\n * Opens the closest edit popover to this element, whether it's associated with this exact\n * element or an ancestor element.\n */\n@Directive({\n  selector: '[cdkEditOpen]',\n})\nexport class CdkEditOpen {\n  constructor(\n      protected readonly elementRef: ElementRef<HTMLElement>,\n      protected readonly editEventDispatcher: EditEventDispatcher<EditRef<unknown>>) {\n\n    const nativeElement = elementRef.nativeElement;\n\n    // Prevent accidental form submits.\n    if (nativeElement.nodeName === 'BUTTON' && !nativeElement.getAttribute('type')) {\n      nativeElement.setAttribute('type', 'button');\n    }\n  }\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  openEdit(evt: Event): void {\n    this.editEventDispatcher.editing.next(closest(this.elementRef.nativeElement!, CELL_SELECTOR));\n    evt.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {\n  CdkPopoverEdit,\n  CdkPopoverEditTabOut,\n  CdkRowHoverContent,\n  CdkEditable,\n  CdkEditOpen\n} from './table-directives';\nimport {CdkEditControl,\n  CdkEditRevert,\n  CdkEditClose\n} from './lens-directives';\nimport {\n  DefaultPopoverEditPositionStrategyFactory,\n  PopoverEditPositionStrategyFactory\n} from './popover-edit-position-strategy-factory';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkPopoverEdit,\n  CdkPopoverEditTabOut,\n  CdkRowHoverContent,\n  CdkEditControl,\n  CdkEditRevert,\n  CdkEditClose,\n  CdkEditable,\n  CdkEditOpen,\n];\n\n@NgModule({\n  imports: [\n    OverlayModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n  providers: [{\n    provide: PopoverEditPositionStrategyFactory,\n    useClass: DefaultPopoverEditPositionStrategyFactory\n  }],\n})\nexport class CdkPopoverEditModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './edit-event-dispatcher';\nexport * from './edit-ref';\nexport * from './focus-dispatcher';\nexport * from './form-value-container';\nexport * from './lens-directives';\nexport * from './popover-edit-module';\nexport * from './popover-edit-position-strategy-factory';\nexport * from './table-directives';\n\n// Private to Angular Components\nexport {CELL_SELECTOR as _CELL_SELECTOR} from './constants';\nexport {closest as _closest, matches as _matches} from './polyfill';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {EditServices as Éµangular_material_src_cdk_experimental_popover_edit_popover_edit_a} from './edit-services';\nexport {FocusEscapeNotifierFactory as Éµangular_material_src_cdk_experimental_popover_edit_popover_edit_b} from './focus-escape-notifier';"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;AASA,MAAa,aAAa,GAAG,0BAA0B,CAAC;;AAGxD,AAAO,MAAM,sBAAsB,GAAG,gDAAgD,CAAC;;AAGvF,AAAO,MAAM,YAAY,GAAG,wBAAwB,CAAC;;AAGrD,AAAO,MAAM,cAAc,GAAG,6BAA6B,CAAC;;AAG5D,AAAO,MAAM,eAAe,GAAG,eAAe,CAAC;;AAG/C,AAAO,MAAM,kBAAkB,GAAG,IAAI,eAAe,kBAAkB,CAAC;;ACxBxE;;;;;;;;AASA,SAAgB,OAAO,CAAC,OAAgB,EAAE,QAAgB;IACxD,OAAO,OAAO,CAAC,OAAO;QAClB,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;QACxB,OAAe,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,CAAC;CACrD;;AAGD,SAAgB,OAAO,CAAC,OAA2C,EAAE,QAAgB;IAEnF,IAAI,EAAE,OAAO,YAAY,IAAI,CAAC,EAAE;QAAE,OAAO,IAAI,CAAC;KAAE;IAEhD,IAAI,IAAI,GAAc,OAAO,CAAC;IAC9B,OAAO,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,YAAY,OAAO,CAAC,EAAE;QACjD,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;KACxB;IAED,OAAO,IAAI,KAAK,gBAAgB;QAC5B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAiB,CAAC;CAC/E;;AAGD,SAAS,eAAe,CAAC,OAAgB,EAAE,QAAgB;IACzD,IAAI,IAAI,GAAc,OAAO,CAAC;IAC9B,OAAO,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,YAAY,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAE;QAC5E,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;KACxB;IAED,QAAQ,IAAI,IAAI,IAAI,EAAkB;CACvC;AAED,MAAM,gBAAgB,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC;;ACvCrD;;;;;;;AAQA,AAiBA;AACA,MAAM,oBAAoB,GAAG,EAAE,CAAC;;AAGhC,MAAM,WAAW,GAAG,CAAC,CAAC;;;;;;;AAsBtB,MAAa,mBAAmB;IAuG9B,YAA6B,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;;QArGnC,YAAO,GAAG,IAAI,OAAO,EAAgB,CAAC;;QAGtC,aAAQ,GAAG,IAAI,OAAO,EAAgB,CAAC;;QAGvC,YAAO,GAAG,IAAI,OAAO,EAAgB,CAAC;;QAGtC,YAAO,GAAG,IAAI,OAAO,EAAY,CAAC;;QAGlC,cAAS,GAAG,IAAI,OAAO,EAAgB,CAAC;;;;;;QAOxC,kBAAa,GAAG,IAAI,OAAO,EAAoB,CAAC;QAMjD,aAAQ,GAAW,IAAI,CAAC;;QAGf,0BAAqB,GAClC,oBAAoB,EAA0C,CAAC;QAClD,mBAAc,GAAG,SAAS,CAAe,IAAI,CAAC,CAAC;QAC/C,mBAAc,GAAG,IAAI,CACpC,IAAI,CAAC,qBAAoE,EACzE,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QACe,2BAAsB,GAAG,IAAI,CAC5C,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,qBAA+D,CACrE,CAAC;QAEO,sBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAC1C,MAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAC7D,WAAW,CAAC,CAAC,CAAC,CACjB,CAAC;;QAGO,qBAAgB,GAAG,aAAa,CAAC;YACtC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACvB,GAAG,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,EACxC,IAAI,CAAC,cAAc,CACtB;YACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;SACzC,CAAC,CAAC,IAAI,CACH,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,KAAK,UAAU,IAAI,UAAU,CAAC,EAC3D,IAAI,CAAC,qBAA+D,EACpE,SAAS,CAAC,WAAW,CAAC;QACtB,IAAI,CAAC,qBAA+D,EACpE,WAAW,CAAC,CAAC,CAAC,CACjB,CAAC;;QAGM,0BAAqB,GAAG,IAAI,OAAO,EAAmB,CAAC;;QAGvD,sBAAiB,GAAiB,IAAI,CAAC;;QAG9B,iCAA4B,GAAG,aAAa,CAAC;YAC1D,IAAI,CAAC,4BAA4B,EAAE;YACnC,IAAI,CAAC,2BAA2B,EAAE;YAClC,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CACd,oBAAoB,EAAE,EACtB,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAC5B,MAAM,CAAC,YAAY,IAAI,GAAG,KAAK,YAAY,CAAC,EAC5C,IAAI,CAAC,cAAc,EACnB,YAAY,CAAC,oBAAoB,CAAC,CAAC,CACtC,EACD,IAAI,CAAC,sBAAsB,CAC9B;SACJ,CAAC,CAAC,IAAI,CACH,IAAI,CAAC,CAAC,CAAC;QACP,GAAG,CAAC,wBAAwB,CAAC,EAC7B,oBAAoB,CAAC,kBAAkB,CAAC;;;QAGxC,IAAI,CAAC,UAAU,EAAE,EACjB,WAAW,CAAC,CAAC,CAAC,CACjB,CAAC;QAEe,+BAA0B,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACrE,oBAAoB,EAAE,EACtB,IAAI,CAAC,UAAU,EAAE,EACjB,WAAW,CAAC,CAAC,CAAC,CACjB,CAAC;;;QAIM,iBAAY,GAAiB,IAAI,CAAC;QAClC,6BAAwB,GAAuC,IAAI,CAAC;QAG1E,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,IAAI;YAC5C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SAC/B,CAAC,CAAC;KACJ;;IAnFD,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;;;IAuFD,WAAW,CAAC,OAA4B;QACtC,IAAI,IAAI,GAAiB,IAAI,CAAC;QAE9B,OAAO,IAAI,CAAC,0BAA0B,CAAC,IAAI,CACvC,GAAG,CAAC,QAAQ,IAAI,QAAQ,MAAM,IAAI,KAAK,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,EAChF,IAAI,CAAC,qBAA0D,CAClE,CAAC;KACH;;;;;IAMD,eAAe,CAAC,OAA4B;QAC1C,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAE7C,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;YACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACzB;KACF;;IAGD,gBAAgB,CAAC,GAAM;QACrB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;KACrB;;IAGD,kBAAkB,CAAC,GAAM;QACvB,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,EAAE;YACzB,OAAO;SACR;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KACtB;;IAGD,2BAA2B,CAAC,GAAY;QACtC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACrF;;;;;IAMD,6BAA6B,CAAC,GAAY;QACxC,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE1D,IAAI,QAAQ,IAAI,CAAC,EAAE;YACjB,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxC;aAAM;YACL,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;SACnD;KACF;;;;;;IAOD,iBAAiB,CAAC,GAAY;QAC5B,IAAI,GAAG,KAAK,IAAI,CAAC,YAAY,EAAE;YAC7B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;YACxB,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,4BAA4B,CAAC,IAAI,CACpE,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,gBAA0B,EACrD,IAAI,CAAC,cAAc,CACpB,CAAC;SACH;QAED,OAAO,IAAI,CAAC,wBAAyB,CAAC;KACvC;;;;;IAMO,UAAU;QAChB,OAAO,CAAC,MAAqB,KACzB,IAAI,UAAU,CAAI,CAAC,QAAQ,KAAK,MAAM,CAAC,SAAS,CAAC;YAC5C,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7D,KAAK,EAAE,CAAC,GAAG,KAAK,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;YACnC,QAAQ,EAAE,MAAM,QAAQ,CAAC,QAAQ,EAAE;SACpC,CAAC,CAAC,CAAC;KACZ;IAEO,4BAA4B;QAClC,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI;YACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAc,CAAC,EAAE;oBAClD,OAAO,GAAc,CAAC;iBACvB;aACF;YACD,OAAO,IAAI,CAAC;SACb,CAAC,CAAC;KACJ;IAEO,2BAA2B;QACjC,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI;YACrC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACrD,IAAI,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAc,CAAC,EAAE;oBAClD,OAAO,GAAc,CAAC;iBACvB;aACF;YACD,OAAO,IAAI,CAAC;SACb,CAAC,CAAC;KACJ;IAEO,sBAAsB,CAAC,MAAwC;QAErE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CACpB,GAAG,CAAC,MAAM,CAAC,EACX,IAAI,CAAC,sBAAsB,CAC9B,CAAC;KACH;;;YAlOF,UAAU;;;YA1CS,MAAM;;AA+Q1B,SAAS,wBAAwB,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAmB;IAE1F,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAA8B,CAAC;;IAGhE,KAAK,MAAM,aAAa,IAAI;QAC1B,QAAQ;QACR,OAAO;QACP,SAAS,IAAI,SAAS,CAAC,sBAAsB;QAC7C,SAAS,IAAI,SAAS,CAAC,kBAAkB;KAC1C,EAAE;QACD,IAAI,aAAa,EAAE;YACjB,iBAAiB,CAAC,GAAG,CAAC,aAAwB,oBAA8B,CAAC;SAC9E;KACF;;IAGD,KAAK,MAAM,KAAK,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE;QACzC,IAAI,KAAK,EAAE;YACT,iBAAiB,CAAC,GAAG,CAAC,KAAK,aAAuB,CAAC;SACpD;KACF;IAED,OAAO,iBAAiB,CAAC;CAC1B;AAED,SAAS,kBAAkB,CAAO,CAAY,EAAE,CAAY;IAC1D,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;QACrB,OAAO,KAAK,CAAC;KACd;;IAGD,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE;QACvC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC/B,OAAO,KAAK,CAAC;SACd;KACF;IAED,OAAO,IAAI,CAAC;CACb;;AC9TD;;;;;;;AAQA,AAOA;;;;AAKA,MAAa,OAAO;IAYlB,YAC6B,KAAuB,EAC/B,oBAA6D,EAC7D,OAAe;QAFP,UAAK,GAAL,KAAK,CAAkB;QAC/B,yBAAoB,GAApB,oBAAoB,CAAyC;QAC7D,YAAO,GAAP,OAAO,CAAQ;;QAbnB,uBAAkB,GAAG,IAAI,OAAO,EAAa,CAAC;QACtD,eAAU,GAA0B,IAAI,CAAC,kBAAkB,CAAC;;QAGpD,oBAAe,GAAG,IAAI,OAAO,EAAQ,CAAC;QAC9C,YAAO,GAAqB,IAAI,CAAC,eAAe,CAAC;QASxD,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;KAClD;;;;;;IAOD,IAAI,CAAC,iBAAsC;;;QAGzC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAC5C,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,iBAAiB,EAAE;gBACrB,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;aAC/B;SACF,CAAC,CAAC;KACJ;IAED,WAAW;QACT,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;KACpC;;IAGD,OAAO;QACL,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;KACzB;;IAGD,iBAAiB;QACf,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;KAC1C;;IAGD,KAAK;QACH,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9C;;IAGD,IAAI;QACF,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;KAC7B;;;;;IAMD,KAAK,CAAC,KAAiB;QACrB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAClD;;;YApEF,UAAU;;;YAVH,gBAAgB,uBAwBjB,IAAI;YApBH,mBAAmB;YALU,MAAM;;;ACR3C;;;;;;;AAQA,AAQA;;;;AAKA,MAAa,eAAe;IAI1B,YAA+B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAC3D,IAAI,CAAC,WAAW,GAAG,EAAC,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAC,CAAC;KACvE;;;;;IAMD,qBAAqB,CAAC,WAAwB,EAAE,MAAc;QAC5D,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,cAAc,CAAE,CAAC,gBAAgB,CAC7D,sBAAsB,CAAC,CAAkB,CAAC;QAC5D,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAChD,MAAM,QAAQ,GAAG,YAAY,GAAG,MAAM,CAAC;QAEvC,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE;YACnB,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;SACzB;KACF;;IAGD,mBAAmB,CAAC,WAAwB,EAAE,MAAc;QAC1D,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,EAAE,YAAY,CAAE,CAAC;QACvD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,cAAc,CAAE,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC;QAC7F,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACjD,MAAM,qBAAqB,GACvB,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACzF,MAAM,WAAW,GAAG,eAAe,GAAG,MAAM,CAAC;QAE7C,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE;YACrB,MAAM,UAAU,GACZ,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAkB,CAAC;YAE5F,IAAI,UAAU,CAAC,qBAAqB,CAAC,EAAE;gBACrC,UAAU,CAAC,qBAAqB,CAAC,CAAC,KAAK,EAAE,CAAC;aAC3C;SACF;KACF;;IAGS,mBAAmB,CAAC,KAAoB;QAChD,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,sBAAsB,CAAuB,CAAC;QAEjF,IAAI,CAAC,IAAI,EAAE;YACT,OAAO;SACR;QAED,QAAQ,KAAK,CAAC,OAAO;YACnB,KAAK,QAAQ;gBACX,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAClC,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC/E,MAAM;YACR,KAAK,WAAW;gBACd,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC/E,MAAM;YACR;;gBAEE,OAAO;SACV;QAED,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;;;;YAtEF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;YAZxB,cAAc;;;ACRtB;;;;;;;;;;;;;;;;;AAsBA,MAAa,kBAAkB;IAA/B;QACU,gBAAW,GAAG,IAAI,OAAO,EAAyB,CAAC;KAc5D;IAZC,GAAG,CAAC,GAAQ;QACV,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAErC,IAAI,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,KAAK,EAAE;;YAEV,KAAK,GAAG,EAAE,CAAC;YACX,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC7B;QAED,OAAO,KAAK,CAAC;KACd;CACF;;ACrCD;;;;;;;AAQA,AAkBA;;;;;;AAgBA,MAAa,cAAc;IAuBzB,YAA+B,UAAsB,EAAW,OAA2B;QAA5D,eAAU,GAAV,UAAU,CAAY;QAAW,YAAO,GAAP,OAAO,CAAoB;QAtBxE,cAAS,GAAG,IAAI,OAAO,EAAQ,CAAC;;;;;QAMnD,qBAAgB,GAAgC,OAAO,CAAC;QAQ/C,6BAAwB,GAAG,IAAI,YAAY,EAAa,CAAC;;;;;QAMlE,4BAAuB,GAAG,IAAI,CAAC;KAEgE;IAE/F,QAAQ;QACN,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC3C,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACjE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC1D;IAED,WAAW;QACT,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;KAC3B;;;;;;;;;;IAYD,gBAAgB;QACd,IAAI,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;YAAE,OAAO;SAAE;QAExE,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACtB;;IAGD,KAAK;;;QAGH,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACtB;;;;;;;;;IAWD,sBAAsB,CAAC,GAAU;QAC/B,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,CAAC,EAAE;YAAE,OAAO;SAAE;QACxD,QAAQ,IAAI,CAAC,gBAAgB;YAC3B,KAAK,QAAQ;;gBAEX,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBACrB,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBACrB,MAAM;YACR;gBACE,MAAM;SACT;KACF;;;;;IAOD,cAAc,CAAC,KAAoB;QACjC,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACpD,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,KAAK,CAAC,cAAc,EAAE,CAAC;SACxB;KACF;;IAGO,WAAW;QACjB,IAAI,IAAI,CAAC,gBAAgB,KAAK,QAAQ,EAAE;;YAEtC,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;KACF;IAEO,kBAAkB;QACxB,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;KACnE;;;YArHF,SAAS,SAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,MAAM,EAAE;oBACN,kDAAkD;oBAClD,sDAAsD;oBACtD,gEAAgE;iBACjE;gBACD,OAAO,EAAE,CAAC,kEAAkE,CAAC;gBAC7E,SAAS,EAAE,CAAC,OAAO,CAAC;aACrB;;;YA9BC,UAAU;YAUJ,OAAO;;;+BAkEZ,YAAY,SAAC,UAAU;qCAuBvB,YAAY,SAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC;6BAqBzC,YAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;;;AA4BrC,MAAa,aAAa;IAIxB,YACuB,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;;QAHzC,SAAI,GAAW,QAAQ,CAAC;KAGqB;;;;;IAOtD,UAAU;QACR,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACtB;;;YApBF,SAAS,SAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,IAAI,EAAE;oBACJ,MAAM,EAAE,QAAQ;iBACjB;aACF;;;YAzIO,OAAO;;;mBA4IZ,KAAK;yBASL,YAAY,SAAC,OAAO;;;AAQvB,MAAa,YAAY;IACvB,YACuB,UAAmC,EACnC,OAA2B;QAD3B,eAAU,GAAV,UAAU,CAAyB;QACnC,YAAO,GAAP,OAAO,CAAoB;QAEhD,MAAM,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;;QAG/C,IAAI,aAAa,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;YAC9E,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAC9C;KACF;;;;;IASD,SAAS;;;;;;QAMP,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACtB;;;YA5BF,SAAS,SAAC,EAAC,QAAQ,EAAE,gBAAgB,EAAC;;;YAtKrC,UAAU;YAUJ,OAAO;;;wBA8KZ,YAAY,SAAC,OAAO,cACpB,YAAY,SAAC,eAAe,cAC5B,YAAY,SAAC,eAAe;;;ACrM/B;;;;;;;AAQA,AAIA;;;;AAKA,MAAsB,kCAAkC;;;YADvD,UAAU;;;;;;;AAqBX,MAAa,yCAA0C,SAAQ,kCAAkC;IAC/F,YAA+B,SAAyB,EAAqB,OAAgB;QAC3F,KAAK,EAAE,CAAC;QADqB,cAAS,GAAT,SAAS,CAAgB;QAAqB,YAAO,GAAP,OAAO,CAAS;KAE5F;IAED,wBAAwB,CAAC,KAAoB;QAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;aACzB,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAC7B,iBAAiB,EAAE;aACnB,QAAQ,EAAE;aACV,kBAAkB,CAAC,EAAE,CAAC;aACtB,aAAa,CAAC,CAAC;gBACd,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,OAAO;gBACjB,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC,CAAC;KACT;IAED,kBAAkB,CAAC,KAAoB;QACrC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO,EAAE,CAAC;SACX;QAED,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO,EAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,qBAAqB,EAAE,CAAC,KAAK,EAAC,CAAC;SACxD;QAED,IAAI,SAAS,EAAE,QAAQ,CAAC;QACxB,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,KAAK,EAAE;YAClC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACpC;aAAM;YACL,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACrC;QAED,OAAO,EAAC,KAAK,EAAE,QAAQ,CAAC,qBAAqB,EAAE,CAAC,KAAK,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC,IAAI,EAAC,CAAC;KACjG;;;YAvCF,UAAU;;;YA5BH,cAAc;YACd,OAAO;;;ACTf;;;;;;;AAQA,AAWA;;;;;;AAOA,MAAa,YAAY;IACvB,YACa,cAA8B,EAC9B,mBAA0D,EAC1D,eAAgC,EAChC,gBAAkC,EAAW,MAAc,EAC3D,OAAgB,EAAW,eAAmD,EAC9E,gBAAkC,EAAW,aAA4B;QALzE,mBAAc,GAAd,cAAc,CAAgB;QAC9B,wBAAmB,GAAnB,mBAAmB,CAAuC;QAC1D,oBAAe,GAAf,eAAe,CAAiB;QAChC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAW,WAAM,GAAN,MAAM,CAAQ;QAC3D,YAAO,GAAP,OAAO,CAAS;QAAW,oBAAe,GAAf,eAAe,CAAoC;QAC9E,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAW,kBAAa,GAAb,aAAa,CAAe;KAAI;;;YAR3F,UAAU;;;YAfH,cAAc;YAId,mBAAmB;YACnB,eAAe;YANf,gBAAgB;YADJ,MAAM;YAGlB,OAAO;YAKP,kCAAkC;YAJlC,gBAAgB;YAAE,aAAa;;;ACZvC;;;;;;;AAQA,AAWA;;;;AAIA,MAAa,mBAAoB,SAAQ,SAAS;IAGhD,YACI,OAAoB,EACpB,OAA6B,EAC7B,MAAc,EACd,QAAkB;QACpB,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,oBAAoB,CAAC;QAP7D,mBAAc,GAAG,IAAI,OAAO,EAAgC,CAAC;;;QAWnE,IAAI,CAAC,mBAAmB,GAAG;YACzB,IAAI,CAAC,cAAc,CAAC,IAAI,eAAoC,CAAC;YAC7D,OAAO,IAAI,CAAC;SACb,CAAC;QACF,IAAI,CAAC,iBAAiB,GAAG;YACvB,IAAI,CAAC,cAAc,CAAC,IAAI,aAAkC,CAAC;YAC3D,OAAO,IAAI,CAAC;SACb,CAAC;QAEF,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;IAED,OAAO;QACL,OAAO,IAAI,CAAC,cAAc,CAAC;KAC5B;CACF;;AAID,MAAa,0BAA0B;IAGrC,YACY,QAA8B,EAC9B,OAAe,EACL,SAAc;QAFxB,aAAQ,GAAR,QAAQ,CAAsB;QAC9B,YAAO,GAAP,OAAO,CAAQ;QAGzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC5B;;;;;;IAOD,MAAM,CAAC,OAAoB;QACzB,OAAO,IAAI,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;KACtF;;;;YAnBF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;YA3Cb,oBAAoB;YAFX,MAAM;4CAoD3B,MAAM,SAAC,QAAQ;;;ACLtB;AACA,MAAM,2BAA2B,GAAG,EAAE,CAAC;;;;;;AAWvC,MAAa,WAAW;IAGtB,YACuB,UAAsB,EACtB,mBAA0D,EAC1D,eAAgC,EAAqB,MAAc;QAFnE,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAuC;QAC1D,oBAAe,GAAf,eAAe,CAAiB;QAAqB,WAAM,GAAN,MAAM,CAAQ;QALvE,cAAS,GAAG,IAAI,OAAO,EAAQ,CAAC;KAK2C;IAE9F,eAAe;QACb,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAC9B;IAED,WAAW;QACT,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;KAC3B;IAEO,qBAAqB;QAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAC9C,MAAM,SAAS,GAAG,CAAC,QAAgB,KAC/B,GAAG,CAAC,CAAC,KAAc,KAAK,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAE7D,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;;YAE5B,SAAS,CAAa,OAAO,EAAE,WAAW,CAAC,CAAC,IAAI,CAC5C,SAAS,CAAC,YAAY,CAAC,EACvB,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YACnD,SAAS,CAAa,OAAO,EAAE,YAAY,CAAC,CAAC,IAAI,CAC7C,KAAK,CAAC,IAAI,CAAC,EACX,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YACnD,SAAS,CAAa,OAAO,EAAE,WAAW,CAAC,CAAC,IAAI,CAC5C,YAAY,CAAC,2BAA2B,CAAC,EACzC,SAAS,CAAC,YAAY,CAAC,EACvB,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;;YAGpD,gBAAgB,CACZ,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,EAC3D,OAAO,IAAI,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAC7D,CAAC,IAAI,CACF,SAAS,CAAC,YAAY,CAAC,EACvB,KAAK,EAAE,EACP,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAEtD,KAAK,CACH,gBAAgB,CACd,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,EAC1D,OAAO,IAAI,OAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAC9D,EACD,SAAS,CAAgB,OAAO,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAC3F,CAAC,IAAI,CACJ,KAAK,CAAC,IAAI,CAAC,EACX,KAAK,EAAE,EACP,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAC1B,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;;;;YAK9C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI;;;YAGrB,cAAc,CAAC,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,EACzD,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,SAAS,IAAI,IAAI,CAAC,EAC7C,GAAG,CAAC,MAAM,OAAO,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,EACjD,KAAK,EAAE,EACP,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAElD,SAAS,CAAgB,OAAO,EAAE,SAAS,CAAC,CAAC,IAAI,CAC7C,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,CAAC,EACtC,SAAS,CAAC,aAAa,CAAC,EACxB,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;;YAGlD,SAAS,CAAgB,OAAO,EAAE,SAAS,CAAC;iBACvC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC/B,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;SAClD,CAAC,CAAC;KACJ;;;YAxFF,SAAS,SAAC;gBACT,QAAQ,EAAE,2DAA2D;gBACrE,SAAS,EAAE,CAAC,mBAAmB,EAAE,YAAY,CAAC;aAC/C;;;YArDC,UAAU;YAqBJ,mBAAmB;YAEnB,eAAe;YArBrB,MAAM;;AA2IR,MAAM,0BAA0B,GAAG;IACjC,iBAAiB,EAAE,qBAAqB;IACxC,OAAO,EAAE,uBAAuB;IAChC,sBAAsB,EAAE,WAAW;CACpC,CAAC;AAEF,MAAM,mBAAmB,GAAG;IAC1B,0BAA0B;IAC1B,gCAAgC;IAChC,gCAAgC;IAChC,kCAAkC;CACnC,CAAC;;;;;;AAYF,MAAa,cAAc;IAmDzB,YACuB,QAAsB,EAAqB,UAAsB,EACjE,gBAAkC;QADlC,aAAQ,GAAR,QAAQ,CAAc;QAAqB,eAAU,GAAV,UAAU,CAAY;QACjE,qBAAgB,GAAhB,gBAAgB,CAAkB;;QAnDzD,aAAQ,GAA0B,IAAI,CAAC;QA2B/B,aAAQ,GAA0B,EAAE,CAAC;QAgBrC,cAAS,GAAG,KAAK,CAAC;QAIP,cAAS,GAAG,IAAI,OAAO,EAAQ,CAAC;KAIU;;;;;IAvC7D,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;IACD,IAAI,OAAO,CAAC,KAA4B;QACtC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;;QAGtB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;YAEpE,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE;gBACjC,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC3B;SACF;KACF;;IAID,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;IACD,IAAI,QAAQ,CAAC,KAAc;QACzB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,CAAC;YAClF,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,IAAI,CAAC,CAAC;SAC3F;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,CAAC;SACxF;KACF;IAWD,eAAe;QACb,IAAI,CAAC,2BAA2B,EAAE,CAAC;KACpC;IAED,WAAW;QACT,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAE1B,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC5B;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;SAC3B;KACF;IAES,aAAa;QACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,UAAW,CAAC,cAAc,CAAC,CAAC;KACzF;IAES,gBAAgB;QACxB,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,CAAC;KACnF;IAES,UAAU;QAClB,OAAO,eAAe,CAAC;KACxB;IAEO,2BAA2B;QACjC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC;aACxE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/B,SAAS,CAAC,CAAC,IAAI;YACd,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACzB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;oBACpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBAC3B;gBAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB;iBAAM,IAAI,IAAI,CAAC,UAAU,EAAE;gBAC1B,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBAE/B,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;aAC1B;SACF,CAAC,CAAC;KACR;IAEO,kBAAkB;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC;YAC7C,mBAAmB,EAAE,IAAI;YACzB,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE;YAC7B,gBAAgB,EAAE,IAAI,CAAC,oBAAoB,EAAE;YAC7C,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE;YACnE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc;SACxC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAEnE,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;KACxE;IAEO,gBAAgB;QACtB,IAAI,CAAC,UAAW,CAAC,MAAM,CAAC,IAAI,cAAc,CACtC,IAAI,CAAC,QAAS,EACd,IAAI,CAAC,gBAAgB,EACrB,EAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC,CAAC;;;QAIhC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC;YACrC,UAAU,CAAC;gBACT,IAAI,CAAC,SAAU,CAAC,mBAAmB,EAAE,CAAC;aACvC,CAAC,CAAC;SACJ,CAAC,CAAC;;;QAIH,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;aACjF,IAAI,CACH,SAAS,CAAC,IAAI,CAAC,EACf,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAW,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CACjE;aACA,SAAS,CAAC;YACT,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B,CAAC,CAAC;KACR;IAEO,gBAAgB;QACtB,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,aAAa,CAAgB,CAAC;QAEnF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;YACjD,OAAO,CAAC,IAAI,CAAC,CAAC;SACf;QAED,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,YAAY,CAAE,CAAC;QACnE,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAkB,CAAC;QAClF,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAExC,OAAO,QAAQ,CAAC,KAAK,CACjB,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC,EAAE,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KACxF;IAEO,oBAAoB;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,wBAAwB,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;KACxF;IAEO,kBAAkB;QACxB,IAAI,CAAC,UAAW,CAAC,UAAU,CACvB,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;KAChF;IAEO,uBAAuB;QAC7B,IAAI,OAAO,CAAC,QAAQ,CAAC,aAAa,EAAE,kBAAkB,CAAC;YACnD,IAAI,CAAC,UAAW,CAAC,cAAc,EAAE;YACnC,IAAI,CAAC,UAAU,CAAC,aAAc,CAAC,KAAK,EAAE,CAAC;SACxC;KACF;;;YAlLF,SAAS,SAAC;gBACT,QAAQ,EAAE,8CAA8C;gBACxD,IAAI,EAAE,0BAA0B;gBAChC,MAAM,EAAE,mBAAmB;aAC5B;;;YA7IO,YAAY;YAtBlB,UAAU;YAKV,gBAAgB;;;;;;;AAyVlB,MAAa,oBAAwB,SAAQ,cAAiB;IAG5D,YACI,UAAsB,EAAE,gBAAkC,EAAE,QAAsB,EAC/D,0BAAsD;QAC3E,KAAK,CAAC,QAAQ,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;QADzB,+BAA0B,GAA1B,0BAA0B,CAA4B;KAE5E;IAES,aAAa;QACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,IAAI,CAAC,UAAW,CAAC,cAAc,CAAC,CAAC;QAEzF,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS;YAC1E,IAAI,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,OAAO,EAAE;gBAC7C,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;aAClD;YAED,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,qBAAqB,CAC/C,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,aAAa,CAAgB,EACrE,SAAS,qBAA0C,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAE/D,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB,CAAC,CAAC;KACJ;;;YA5BF,SAAS,SAAC;gBACT,QAAQ,EAAE,wCAAwC;gBAClD,IAAI,EAAE,0BAA0B;gBAChC,MAAM,EAAE,mBAAmB;aAC5B;;;YA7VC,UAAU;YAKV,gBAAgB;YAiBV,YAAY;YAKlB,0BAA0B;;;;;;AAoW5B,MAAa,kBAAkB;IAM7B,YACuB,QAAsB,EAAqB,UAAsB,EACjE,WAA6B,EAC7B,gBAAkC;QAFlC,aAAQ,GAAR,QAAQ,CAAc;QAAqB,eAAU,GAAV,UAAU,CAAY;QACjE,gBAAW,GAAX,WAAW,CAAkB;QAC7B,qBAAgB,GAAhB,gBAAgB,CAAkB;QARtC,cAAS,GAAG,IAAI,OAAO,EAAQ,CAAC;QACzC,YAAO,GAA8B,IAAI,CAAC;KAOS;IAE7D,eAAe;QACb,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,YAAY,CAAE,CAAC;QAEnE,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzE,IAAI,CAAC,6BAA6B,EAAE,CAAC;KACtC;IAED,WAAW;QACT,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAE1B,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;SACxB;QAED,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC5E;KACF;;;;;;IAOS,WAAW,CAAC,CAAc;KACnC;;;;;IAMS,6BAA6B,CAAC,OAAoB;QAC1D,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;KAC7B;;;;;IAMS,kBAAkB,CAAC,OAAoB;QAC/C,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;KAC5B;IAEO,6BAA6B;QACnC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAK,CAAC;aAC1D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/B,SAAS,CAAC,UAAU;;;YAInB,IAAI,UAAU,mBAA6B,UAAU,wBAAkC;gBACrF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;oBAC9E,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAgB,CAAC,CAAC;oBAC3D,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;iBAC7B;qBAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC7D,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,OAAQ,CAAC,CAAC;oBAC5C,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;iBAC7B;gBAED,IAAI,UAAU,iBAA2B;oBACvC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAgB,CAAC,CAAC;iBACnE;qBAAM;oBACL,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAgB,CAAC,CAAC;iBAC9E;aACF;iBAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBACvB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;aAC3E;SACF,CAAC,CAAC;KACR;;;YApFF,SAAS,SAAC;gBACT,QAAQ,EAAE,sBAAsB;aACjC;;;YAxWO,YAAY;YAtBlB,UAAU;YAIV,WAAW;YACX,gBAAgB;;;;;;AAqdlB,MAAa,WAAW;IACtB,YACuB,UAAmC,EACnC,mBAA0D;QAD1D,eAAU,GAAV,UAAU,CAAyB;QACnC,wBAAmB,GAAnB,mBAAmB,CAAuC;QAE/E,MAAM,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;;QAG/C,IAAI,aAAa,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;YAC9E,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAC9C;KACF;;;;;IAOD,QAAQ,CAAC,GAAU;QACjB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,aAAa,CAAC,CAAC,CAAC;QAC9F,GAAG,CAAC,eAAe,EAAE,CAAC;KACvB;;;YAxBF,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;aAC1B;;;YAzdC,UAAU;YAqBJ,mBAAmB;;;uBAsdxB,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;ACxfnC;;;;;;;AAQA,AAkBA,MAAM,qBAAqB,GAAG;IAC5B,cAAc;IACd,oBAAoB;IACpB,kBAAkB;IAClB,cAAc;IACd,aAAa;IACb,YAAY;IACZ,WAAW;IACX,WAAW;CACZ,CAAC;AAaF,MAAa,oBAAoB;;;YAXhC,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,aAAa;iBACd;gBACD,OAAO,EAAE,qBAAqB;gBAC9B,YAAY,EAAE,qBAAqB;gBACnC,SAAS,EAAE,CAAC;wBACV,OAAO,EAAE,kCAAkC;wBAC3C,QAAQ,EAAE,yCAAyC;qBACpD,CAAC;aACH;;;AC/CD;;;;;;GAMG;;ACNH;;GAEG;;;;"}