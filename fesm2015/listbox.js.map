{"version":3,"file":"listbox.js","sources":["../../../../../../src/cdk-experimental/listbox/listbox.ts","../../../../../../src/cdk-experimental/listbox/listbox-module.ts","../../../../../../src/cdk-experimental/listbox/public-api.ts","../../../../../../src/cdk-experimental/listbox/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef, EventEmitter, forwardRef,\n  Inject,\n  Input, OnDestroy, Output,\n  QueryList\n} from '@angular/core';\nimport {ActiveDescendantKeyManager, Highlightable, ListKeyManagerOption} from '@angular/cdk/a11y';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\nlet nextId = 0;\n\n@Directive({\n  selector: '[cdkOption]',\n  exportAs: 'cdkOption',\n  host: {\n    'role': 'option',\n    '(click)': 'toggle()',\n    '(focus)': 'activate()',\n    '(blur)': 'deactivate()',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_selected || null',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': '_isInteractionDisabled()',\n    '[class.cdk-option-disabled]': '_isInteractionDisabled()',\n    '[class.cdk-option-active]': '_active'\n\n  }\n})\nexport class CdkOption implements ListKeyManagerOption, Highlightable {\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n  _active: boolean = false;\n\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    if (!this._disabled) {\n      this._selected = coerceBooleanProperty(value);\n    }\n  }\n\n  /** The id of the option, set to a uniqueid if the user does not provide one. */\n  @Input() id = `cdk-option-${nextId++}`;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Inject(forwardRef(() => CdkListbox)) public listbox: CdkListbox) {\n  }\n\n  /** Toggles the selected state, emits a change event through the injected listbox. */\n  toggle() {\n    if (!this._isInteractionDisabled()) {\n      this.selected = !this.selected;\n      this.listbox._emitChangeEvent(this);\n    }\n  }\n\n  /** Sets the active property true if the option and listbox aren't disabled. */\n  activate() {\n    if (!this._isInteractionDisabled()) {\n      this._active = true;\n      this.listbox.setActiveOption(this);\n    }\n  }\n\n  /** Sets the active property false. */\n  deactivate() {\n    this._active = false;\n  }\n\n  /** Returns true if the option or listbox are disabled, and false otherwise. */\n  _isInteractionDisabled(): boolean {\n    return (this.listbox.disabled || this._disabled);\n  }\n\n  /** Returns the tab index which depends on the disabled property. */\n  _getTabIndex(): string | null {\n    return (this.listbox.disabled || this._disabled) ? null : '-1';\n  }\n\n  getLabel(): string {\n    // TODO: improve to method to handle more complex combinations of elements and text\n    return this._elementRef.nativeElement.textContent;\n  }\n\n  setActiveStyles() {\n    this._active = true;\n  }\n\n  setInactiveStyles() {\n    this._active = false;\n  }\n\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Directive({\n    selector: '[cdkListbox]',\n    exportAs: 'cdkListbox',\n    host: {\n      'role': 'listbox',\n      '(keydown)': '_keydown($event)',\n      '[attr.aria-disabled]': '_disabled',\n    }\n})\nexport class CdkListbox implements AfterContentInit, OnDestroy {\n\n  _listKeyManager: ActiveDescendantKeyManager<CdkOption>;\n  private _disabled: boolean = false;\n\n  @ContentChildren(CdkOption, {descendants: true}) _options: QueryList<CdkOption>;\n\n  @Output() readonly selectionChange: EventEmitter<ListboxSelectionChangeEvent> =\n      new EventEmitter<ListboxSelectionChangeEvent>();\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  ngAfterContentInit() {\n    this._listKeyManager = new ActiveDescendantKeyManager(this._options)\n      .withWrap().withVerticalOrientation().withTypeAhead();\n  }\n\n  ngOnDestroy() {\n    this._listKeyManager.change.complete();\n  }\n\n  _keydown(event: KeyboardEvent) {\n    if (this._disabled) {\n      return;\n    }\n\n    const manager = this._listKeyManager;\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n\n    } else if (keyCode === SPACE || keyCode === ENTER) {\n      if (manager.activeItem && !manager.isTyping()) {\n        this._toggleActiveOption();\n      }\n\n    } else {\n      manager.onKeydown(event);\n    }\n\n  }\n\n  /** Emits a selection change event, called when an option has its selected state changed. */\n  _emitChangeEvent(option: CdkOption) {\n    this.selectionChange.emit(new ListboxSelectionChangeEvent(this, option));\n  }\n\n  private _toggleActiveOption() {\n    const activeOption = this._listKeyManager.activeItem;\n    if (activeOption && !activeOption.disabled) {\n      activeOption.toggle();\n      this._emitChangeEvent(activeOption);\n    }\n  }\n\n  /** Selects the given option if the option and listbox aren't disabled. */\n  select(option: CdkOption) {\n    if (!this.disabled && !option.disabled) {\n      option.selected = true;\n    }\n  }\n\n  /** Deselects the given option if the option and listbox aren't disabled. */\n  deselect(option: CdkOption) {\n    if (!this.disabled && !option.disabled) {\n      option.selected = false;\n    }\n  }\n\n  /** Updates the key manager's active item to the given option. */\n  setActiveOption(option: CdkOption) {\n    this._listKeyManager.updateActiveItem(option);\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class ListboxSelectionChangeEvent {\n  constructor(\n      /** Reference to the listbox that emitted the event. */\n      public source: CdkListbox,\n      /** Reference to the option that has been changed. */\n      public option: CdkOption) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkListbox, CdkOption} from './listbox';\n\nconst EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class CdkListboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './listbox';\nexport * from './listbox-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}