{"version":3,"file":"listbox.js","sources":["../../../../../../src/cdk-experimental/listbox/listbox.ts","../../../../../../src/cdk-experimental/listbox/listbox-module.ts","../../../../../../src/cdk-experimental/listbox/public-api.ts","../../../../../../src/cdk-experimental/listbox/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef, EventEmitter, forwardRef,\n  Inject,\n  Input, OnDestroy, OnInit, Output,\n  QueryList\n} from '@angular/core';\nimport {ActiveDescendantKeyManager, Highlightable, ListKeyManagerOption} from '@angular/cdk/a11y';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionChange, SelectionModel} from '@angular/cdk/collections';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {startWith, switchMap, takeUntil} from 'rxjs/operators';\n\nlet nextId = 0;\n\n@Directive({\n  selector: '[cdkOption]',\n  exportAs: 'cdkOption',\n  host: {\n    'role': 'option',\n    '(click)': 'toggle()',\n    '(focus)': 'activate()',\n    '(blur)': 'deactivate()',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected || null',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': '_isInteractionDisabled()',\n    '[class.cdk-option-disabled]': '_isInteractionDisabled()',\n    '[class.cdk-option-active]': '_active',\n    '[class.cdk-option-selected]': 'selected'\n  }\n})\nexport class CdkOption implements ListKeyManagerOption, Highlightable {\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n  _active: boolean = false;\n\n  /** The id of the option, set to a uniqueid if the user does not provide one. */\n  @Input() id = `cdk-option-${nextId++}`;\n\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    if (!this._disabled) {\n      this._selected = coerceBooleanProperty(value);\n    }\n  }\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  @Output() readonly selectionChange: EventEmitter<OptionSelectionChangeEvent> =\n      new EventEmitter<OptionSelectionChangeEvent>();\n\n  constructor(private readonly _elementRef: ElementRef,\n              @Inject(forwardRef(() => CdkListbox)) readonly listbox: CdkListbox) {\n  }\n\n  /** Toggles the selected state, emits a change event through the injected listbox. */\n  toggle() {\n    if (!this._isInteractionDisabled()) {\n      this.selected = !this.selected;\n      this._emitSelectionChange(true);\n    }\n  }\n\n  /** Sets the active property true if the option and listbox aren't disabled. */\n  activate() {\n    if (!this._isInteractionDisabled()) {\n      this._active = true;\n    }\n  }\n\n  /** Sets the active property false. */\n  deactivate() {\n    if (!this._isInteractionDisabled()) {\n      this._active = false;\n    }\n  }\n\n  /** Sets the selected property true if it was false. */\n  select() {\n    if (!this.selected) {\n      this.selected = true;\n      this._emitSelectionChange();\n    }\n  }\n\n  /** Sets the selected property false if it was true. */\n  deselect() {\n    if (this.selected) {\n      this.selected = false;\n      this._emitSelectionChange();\n    }\n  }\n\n  /** Applies focus to the option. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Returns true if the option or listbox are disabled, and false otherwise. */\n  _isInteractionDisabled(): boolean {\n    return (this.listbox.disabled || this._disabled);\n  }\n\n  /** Emits a change event extending the Option Selection Change Event interface. */\n  private _emitSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: isUserInput\n    });\n  }\n\n  /** Returns the tab index which depends on the disabled property. */\n  _getTabIndex(): string | null {\n    return this._isInteractionDisabled() ? null : '-1';\n  }\n\n  /** Get the label for this element which is required by the FocusableOption interface. */\n  getLabel() {\n    // we know that the current node is an element type\n    const clone = this._elementRef.nativeElement.cloneNode(true) as Element;\n    this._removeIcons(clone);\n\n    return clone.textContent?.trim() || '';\n  }\n\n  /** Remove any child from the given element which can be identified as an icon. */\n  private _removeIcons(element: Element) {\n    // TODO: make this a configurable function that can removed any desired type of node.\n    for (const icon of Array.from(element.querySelectorAll('mat-icon, .material-icons'))) {\n      icon.parentNode?.removeChild(icon);\n    }\n  }\n\n  /** Sets the active property to true to enable the active css class. */\n  setActiveStyles() {\n    this._active = true;\n  }\n\n  /** Sets the active property to false to disable the active css class. */\n  setInactiveStyles() {\n    this._active = false;\n  }\n\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Directive({\n    selector: '[cdkListbox]',\n    exportAs: 'cdkListbox',\n    host: {\n      'role': 'listbox',\n      '(keydown)': '_keydown($event)',\n      '[attr.tabindex]': '_tabIndex',\n      '[attr.aria-disabled]': 'disabled',\n      '[attr.aria-multiselectable]': 'multiple',\n      '[attr.aria-activedescendant]': '_getAriaActiveDescendant()'\n    }\n})\nexport class CdkListbox implements AfterContentInit, OnDestroy, OnInit {\n\n  _listKeyManager: ActiveDescendantKeyManager<CdkOption>;\n  _selectionModel: SelectionModel<CdkOption>;\n  _tabIndex = 0;\n\n  readonly optionSelectionChanges: Observable<OptionSelectionChangeEvent> = defer(() => {\n    const options = this._options;\n\n    return options.changes.pipe(\n      startWith(options),\n      switchMap(() => merge(...options.map(option => option.selectionChange)))\n    );\n  }) as Observable<OptionSelectionChangeEvent>;\n\n  private _disabled: boolean = false;\n  private _multiple: boolean = false;\n  private _useActiveDescendant: boolean = true;\n  private _activeOption: CdkOption;\n\n  private readonly _destroyed = new Subject<void>();\n\n  @ContentChildren(CdkOption, {descendants: true}) _options: QueryList<CdkOption>;\n\n  @Output() readonly selectionChange: EventEmitter<ListboxSelectionChangeEvent> =\n      new EventEmitter<ListboxSelectionChangeEvent>();\n\n  /**\n   * Whether the listbox allows multiple options to be selected.\n   * If `multiple` switches from `true` to `false`, all options are deselected.\n   */\n  @Input()\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(value: boolean) {\n    this._updateSelectionOnMultiSelectionChange(value);\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the listbox will use active descendant or will move focus onto the options. */\n  @Input()\n  get useActiveDescendant(): boolean {\n    return this._useActiveDescendant;\n  }\n  set useActiveDescendant(shouldUseActiveDescendant: boolean) {\n    this._useActiveDescendant = coerceBooleanProperty(shouldUseActiveDescendant);\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<CdkOption>(this.multiple);\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n    this._initSelectionModel();\n\n    this.optionSelectionChanges.subscribe(event => {\n      this._emitChangeEvent(event.source);\n      this._updateSelectionModel(event.source);\n      this.setActiveOption(event.source);\n    });\n  }\n\n  ngOnDestroy() {\n    this._listKeyManager.change.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  private _initKeyManager() {\n    this._listKeyManager = new ActiveDescendantKeyManager(this._options)\n        .withWrap()\n        .withVerticalOrientation()\n        .withTypeAhead()\n        .withAllowedModifierKeys(['shiftKey']);\n\n    this._listKeyManager.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._updateActiveOption();\n    });\n  }\n\n  private _initSelectionModel() {\n    this._selectionModel.changed.pipe(takeUntil(this._destroyed))\n        .subscribe((event: SelectionChange<CdkOption>) => {\n\n      for (const option of event.added) {\n        option.selected = true;\n      }\n\n      for (const option of event.removed) {\n        option.selected = false;\n      }\n    });\n  }\n\n  _keydown(event: KeyboardEvent) {\n    if (this._disabled) {\n      return;\n    }\n\n    const manager = this._listKeyManager;\n    const {keyCode} = event;\n    const previousActiveIndex = manager.activeItemIndex;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n\n    } else if (keyCode === SPACE || keyCode === ENTER) {\n      if (manager.activeItem && !manager.isTyping()) {\n        this._toggleActiveOption();\n      }\n\n    } else {\n      manager.onKeydown(event);\n    }\n\n    /** Will select an option if shift was pressed while navigating to the option */\n    const isArrow = (keyCode === UP_ARROW || keyCode === DOWN_ARROW);\n    if (isArrow && event.shiftKey && previousActiveIndex !== this._listKeyManager.activeItemIndex) {\n      this._toggleActiveOption();\n    }\n  }\n\n  /** Emits a selection change event, called when an option has its selected state changed. */\n  _emitChangeEvent(option: CdkOption) {\n    this.selectionChange.emit({\n      source: this,\n      option: option\n    });\n  }\n\n  /** Updates the selection model after a toggle. */\n  _updateSelectionModel(option: CdkOption) {\n    if (!this.multiple && this._selectionModel.selected.length !== 0) {\n      const previouslySelected = this._selectionModel.selected[0];\n      this.deselect(previouslySelected);\n    }\n\n    option.selected ? this._selectionModel.select(option) :\n                      this._selectionModel.deselect(option);\n  }\n\n  /** Toggles the selected state of the active option if not disabled. */\n  private _toggleActiveOption() {\n    const activeOption = this._listKeyManager.activeItem;\n    if (activeOption && !activeOption.disabled) {\n      activeOption.toggle();\n    }\n  }\n\n  /** Returns the id of the active option if active descendant is being used. */\n  _getAriaActiveDescendant(): string | null | undefined {\n    return this._useActiveDescendant ? this._listKeyManager?.activeItem?.id : null;\n  }\n\n  /** Updates the activeOption and the active and focus properties of the option. */\n  private _updateActiveOption() {\n    if (!this._listKeyManager.activeItem) {\n      return;\n    }\n\n    this._activeOption?.deactivate();\n    this._activeOption = this._listKeyManager.activeItem;\n    this._activeOption.activate();\n\n    if (!this.useActiveDescendant) {\n      this._activeOption.focus();\n    }\n  }\n\n  /** Updates selection states of options when the 'multiple' property changes. */\n  private _updateSelectionOnMultiSelectionChange(value: boolean) {\n    if (this.multiple && !value) {\n      // Deselect all options instead of arbitrarily keeping one of the selected options.\n      this.setAllSelected(false);\n    } else if (!this.multiple && value) {\n      this._selectionModel = new SelectionModel<CdkOption>(value, this._selectionModel.selected);\n    }\n  }\n\n  /** Selects the given option if the option and listbox aren't disabled. */\n  select(option: CdkOption) {\n    if (!this.disabled && !option.disabled) {\n      option.select();\n    }\n  }\n\n  /** Deselects the given option if the option and listbox aren't disabled. */\n  deselect(option: CdkOption) {\n    if (!this.disabled && !option.disabled) {\n      option.deselect();\n    }\n  }\n\n  /** Sets the selected state of all options to be the given value. */\n  setAllSelected(isSelected: boolean) {\n    for (const option of this._options.toArray()) {\n      const wasSelected = option.selected;\n      isSelected ? this.select(option) : this.deselect(option);\n\n      if (wasSelected !== isSelected) {\n        this._emitChangeEvent(option);\n        this._updateSelectionModel(option);\n      }\n    }\n  }\n\n  /** Updates the key manager's active item to the given option. */\n  setActiveOption(option: CdkOption) {\n    this._listKeyManager.updateActiveItem(option);\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_useActiveDescendant: BooleanInput;\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport interface ListboxSelectionChangeEvent {\n  /** Reference to the listbox that emitted the event. */\n  readonly source: CdkListbox;\n\n  /** Reference to the option that has been changed. */\n  readonly option: CdkOption;\n}\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport interface OptionSelectionChangeEvent {\n  /** Reference to the option that emitted the event. */\n  source: CdkOption;\n\n  /** Whether the change in the option's value was a result of a user action. */\n  isUserInput: boolean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkListbox, CdkOption} from './listbox';\n\nconst EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class CdkListboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './listbox';\nexport * from './listbox-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}